initSidebarItems({"mod":[["alloc","Defines memory-related functions, such as allocate/deallocate/reallocate memory regions, cache and allocation alignments."],["array","fixed-length and immutable containers with optional values that are layed in memory according to the Arrow specification. Each array type has its own `struct`. The following are the main array types:"],["bitmap","Contains efficient containers of booleans: [`Bitmap`] and [`MutableBitmap`]. The memory backing these containers is cache-aligned and optimized for both vertical and horizontal operations over booleans."],["buffer","Contains containers for all Arrow sized types (e.g. `i32`), [`Buffer`] and [`MutableBuffer`]."],["compute","Contains operators over arrays. This moduleâ€™s general design is that each operator has two interfaces, a statically-typed version and a dynamically-typed version. The statically-typed version expects concrete arrays (like `PrimitiveArray`); the dynamically-typed version expects `&dyn Array` and errors if the the type is not supported. Some dynamically-typed operators have an auxiliary function, `can_*`, that returns true if the operator can be applied to the particular `DataType`."],["datatypes","This module contains logical types defined in the Arrow specification:"],["error","Defines [`ArrowError`], representing all errors returned by this crate."],["ffi","Contains interfaces to use the C Data Interface."],["io",""],["record_batch","A two-dimensional batch of column-oriented data with a defined schema."],["scalar",""],["temporal_conversions","Conversion methods for dates and times."],["trusted_len",""],["types","This module contains traits to handle all physical types used in this crate. Most physical types used in this crate are native Rust types, like `i32`. The most important trait is [`NativeType`], implemented for all Arrow types with a Rust correspondence (such as `i32` or `f64`)."],["util",""]]});