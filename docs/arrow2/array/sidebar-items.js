initSidebarItems({"fn":[["clone","Clones a dynamic [`Array`]."],["new_empty_array","Creates a new empty [`Array`]. An empty array has a length of 0."],["new_null_array","Creates a new null [`Array`] of [`DataType`] `data_type` and `length`. A null array has all its elements nulls."]],"mod":[["growable","Contains components suitable to create an array out of N other arrays, by slicing from each in a random-access fashion."],["ord","Contains functions and function factories to order values within arrays."]],"struct":[["BinaryArray",""],["BinaryPrimitive","auxiliary struct used to create a [`BinaryArray`] out of an iterator"],["BooleanArray","A [`BooleanArray`] is arrow’s equivalent to `Vec<Option<bool>>`, i.e. an array designed for highly performant operations on optionally nullable booleans. The size of this struct is `O(1)` as all data is stored behind an `Arc`."],["DictionaryArray",""],["DictionaryPrimitive",""],["FixedSizeBinaryArray",""],["FixedSizeBinaryPrimitive","auxiliary struct used to create a [`BinaryArray`] out of an iterator"],["FixedSizeListArray",""],["FixedSizeListPrimitive",""],["ListArray",""],["ListPrimitive",""],["NullArray",""],["Primitive","Auxiliary struct used to create a [`PrimitiveArray`] out of iterators. Primitive arrays are often built from this struct, that knows how to cheaply convert itself into a primitive array."],["PrimitiveArray","A [`PrimitiveArray`] is arrow’s equivalent to `Vec<Option<T: NativeType>>`, i.e. an array designed for highly performant operations on optionally nullable slots, backed by a physical type of a physical byte-width, such as `i32` or `f64`. The size of this struct is `O(1)` as all data is stored behind an `Arc`."],["StructArray",""],["Utf8Array","A [`Utf8Array`] is arrow’s equivalent of `Vec<Option<String>>`, i.e. an array designed for highly performant operations on optionally nullable strings. The size of this struct is `O(1)` as all data is stored behind an `Arc`."],["Utf8Primitive","auxiliary struct used to create a [`PrimitiveArray`] out of an iterator"]],"trait":[["Array","A trait representing an Arrow array. Arrow arrays are trait objects that are infalibly downcasted to concrete types according to the `Array::data_type`."],["Builder","A trait describing the ability of a struct to"],["DictionaryKey","Trait denoting [`NativeType`]s that can be used as keys of a dictionary."],["FromFfi","Trait describing how a creates itself from the C data interface (FFI)."],["GenericBinaryArray","Trait that binary and string arrays implement for the purposes of DRY."],["IntoArray","A trait describing the ability of a struct to convert itself to a Arc’ed [`Array`]."],["IterableListArray","Trait that list arrays implement for the purposes of DRY."],["Offset","Trait uses to distinguish types whose offset sizes support multiple sizes. This trait is only implemented for i32 and i64, which are the two sizes currently declared in arrow specification."],["TryFromIterator","A trait describing the ability of a struct to create itself from a falible iterator Used in the context of creating arrays from non-sized iterators."]],"type":[["Float32Array",""],["Float64Array",""],["Int128Array",""],["Int16Array",""],["Int32Array",""],["Int64Array",""],["Int8Array",""],["UInt16Array",""],["UInt32Array",""],["UInt64Array",""],["UInt8Array",""]]});