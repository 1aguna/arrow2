initSidebarItems({"fn":[["bytes_for","Returns the number of bytes required to hold `bits` bits."],["get_bit","Returns whether bit at position `i` in `data` is set or not"],["get_bit_unchecked","Returns whether bit at position `i` in `data` is set or not."],["is_set","Returns whether bit at position `i` in `byte` is set or not"],["null_count",""],["set","Sets bit at position `i` in `byte`"],["set_bit","Returns whether bit at position `i` in `data` is set or not"],["zip_validity","Returns an iterator adapter that returns Option according to an optional validity."]],"struct":[["BitChunks","This struct is used to efficiently iterate over bit masks by loading bytes on the stack with alignments of `uX`. This allows efficient iteration over bitmaps."],["BitChunksExact","An iterator over a [`BitChunk`] from a slice of bytes."],["BitmapIter","An iterator over bits according to the LSB, i.e. the bytes `[4u8, 128u8]` correspond to `[false, false, true, false, ..., true]`."],["SlicesIterator","Iterator over a bitmap that returns slices of set regions This is the most efficient method to extract slices of values from arrays with a validity bitmap. For example, the bitmap `00101111` returns `[(0,4), (6,1)]`"],["ZipValidity","Iterator of Option from an iterator and validity."]],"trait":[["BitChunk","Something that can be use as a chunk of bits. This is used to create masks of a given number of lengths, whose width is `1`. In `simd_packed` notation, this corresponds to `m1xY`."],["BitChunkIterExact",""]]});