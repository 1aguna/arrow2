var searchIndex = JSON.parse('{\
"arrow2":{"doc":"Doc provided by README","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,5,5,5,5,5,5,8,6,3,3,6,6,3,8,3,3,6,6,6,6,8,8,6,6,6,6,6,6,6,6,6,6,8,3,6,6,8,3,3,3,3,3,3,3,3,3,8,3,3,8,8,8,6,6,6,6,6,6,6,6,3,3,3,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,0,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,5,5,3,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,0,11,8,8,3,3,3,16,3,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,10,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,5,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,4,3,6,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,8,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8,3,16,16,18,8,3,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,3,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,12,12,12,12,12,12,12,16,8,18,16,16,8,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3],"n":["alloc","array","bitmap","buffer","datatypes","error","ffi","io","record_batch","scalar","temporal_conversions","trusted_len","types","util","ALIGNMENT","allocate_aligned","allocate_aligned_zeroed","dangling","free_aligned","reallocate","total_allocated_bytes","Array","ArrayRef","BinaryArray","BooleanArray","DaysMsArray","DaysMsVec","DictionaryArray","DictionaryKey","FixedSizeBinaryArray","FixedSizeListArray","Float32Array","Float32Vec","Float64Array","Float64Vec","FromFfi","GenericBinaryArray","Int128Array","Int128Vec","Int16Array","Int16Vec","Int32Array","Int32Vec","Int64Array","Int64Vec","Int8Array","Int8Vec","IterableListArray","ListArray","MonthsDaysNsArray","MonthsDaysNsVec","MutableArray","MutableBinaryArray","MutableBooleanArray","MutableDictionaryArray","MutableFixedSizeBinaryArray","MutableFixedSizeListArray","MutableListArray","MutablePrimitiveArray","MutableUtf8Array","NullArray","Offset","PrimitiveArray","StructArray","ToFfi","TryExtend","TryPush","UInt16Array","UInt16Vec","UInt32Array","UInt32Vec","UInt64Array","UInt64Vec","UInt8Array","UInt8Vec","UnionArray","Utf8Array","Utf8ValuesIter","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","children","children","children","children","children","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default_data_type","default_data_type","default_datatype","default_datatype","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","extend","extend","extend","extend","extend_trusted_len","extend_trusted_len_unchecked","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data_unchecked","from_data_unchecked","from_isize","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_values","get_child_field","get_child_type","get_display","get_fields","get_fields","growable","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_data","into_data","into_iter","is_empty","is_empty","is_large","is_null","is_sparse","is_valid","is_valid","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","keys","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","mut_values","mut_values","mut_values","new","new","new","new","new","new","new","new","new","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty_array","new_from","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null_array","new_with_capacity","new_with_field","next","next_back","null_count","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","ord","push","push","push","push","push","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","reserve","reserve","reserve","reserve","set","set","set_validity","set_values","size","size_hint","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","to","to","to_isize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push_valid","try_push_valid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","value","value","value","value","value","value","value","value","value","value","value","value","value","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_mut_slice","values_mut_slice","with_capacities","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_from","Growable","GrowableBinary","GrowableBoolean","GrowableDictionary","GrowableFixedSizeBinary","GrowableList","GrowableNull","GrowablePrimitive","GrowableStruct","GrowableUtf8","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","make_growable","new","new","new","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DynComparator","build_compare","total_cmp","total_cmp_f32","total_cmp_f64","Bitmap","MutableBitmap","as_slice","as_slice","binary","borrow","borrow","borrow_mut","borrow_mut","capacity","chunks","clear","clone","clone_into","default","default","eq","eq","extend_constant","extend_from_bitmap","extend_from_slice","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","fmt","fmt","from","from","from","from","from","from_buffer","from_iter","from_iter","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_u8_buffer","from_u8_slice","get","get","get_bit","get_bit_unchecked","into","into","is_empty","is_empty","iter","iter","len","len","new","new","new_zeroed","null_count","null_count","null_count_range","push","push_unchecked","quaternary","reserve","set","slice","ternary","to_owned","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","type_id","type_id","unary","utils","with_capacity","BitChunk","BitChunkIterExact","BitChunks","BitChunksExact","BitmapIter","Bytes","SlicesIterator","ZipValidity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_for","clone","clone","clone","clone_into","clone_into","clone_into","count_zeros","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ne_bytes","get_bit","get_bit_unchecked","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_set","len","len","new","new","new","new","new","next","next","next","next","next","next_back","next_back","one","remainder","remainder","remainder","remainder","remainder","remainder_iter","remainder_len","set","set_bit","size_hint","size_hint","size_hint","size_hint","slots","to_ne_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","zero","zip_validity","Buffer","MutableBuffer","as_mut_ptr","as_mut_slice","as_ptr","as_ptr","as_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","default","deref","deref","deref_mut","drop","eq","eq","extend","extend_constant","extend_from_slice","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","fmt","fmt","from","from","from","from","from","from","from_bytes","from_chunk_iter","from_chunk_iter_unchecked","from_iter","from_iter","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","into","into","is_empty","is_empty","len","len","ne","new","new","new_zeroed","push","reserve","resize","set_len","shrink_to_fit","slice","to_owned","truncate","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","type_id","type_id","with_capacity","Binary","Binary","Boolean","Boolean","DataType","Date32","Date64","DayTime","DaysMs","Decimal","Dictionary","Dictionary","DictionaryIndexType","Duration","Extension","Field","FixedSizeBinary","FixedSizeBinary","FixedSizeList","FixedSizeList","Float16","Float32","Float32","Float64","Float64","Int128","Int16","Int16","Int16","Int32","Int32","Int32","Int64","Int64","Int64","Int8","Int8","Int8","Interval","IntervalUnit","LargeBinary","LargeBinary","LargeList","LargeList","LargeUtf8","LargeUtf8","List","List","Microsecond","Millisecond","MonthDayNano","MonthDayNano","Nanosecond","Null","Null","PhysicalType","Primitive","PrimitiveType","Schema","SchemaRef","Second","Struct","Struct","Time32","Time64","TimeUnit","Timestamp","UInt16","UInt16","UInt16","UInt32","UInt32","UInt32","UInt64","UInt64","UInt64","UInt8","UInt8","UInt8","Union","Union","Utf8","Utf8","YearMonth","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column_with_name","data_type","data_type","dict_id","dict_id","dict_is_ordered","dict_is_ordered","empty","eq","eq","eq","eq","eq","eq","eq","eq","field","field_with_name","fields","fields_with_dict_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","index_of","into","into","into","into","into","into","into","into","is_nullable","metadata","metadata","metadata","name","name","ne","ne","ne","ne","new","new","new_dict","new_from","nullable","set_metadata","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical_type","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_merge","try_merge","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_metadata","with_metadata","ArithmeticError","ArrowError","External","ExternalFormat","Ffi","InvalidArgumentError","Io","Ipc","KeyOverflowError","NotYetImplemented","Other","Result","Schema","borrow","borrow_mut","fmt","fmt","from","from","from","from_external_error","into","to_string","try_from","try_into","type_id","Ffi_ArrowArray","Ffi_ArrowSchema","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","drop","empty","empty","export_array_to_c","export_field_to_c","fmt","fmt","from","from","import_array_from_c","import_field_from_c","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","RecordBatch","RecordBatchOptions","RecordBatchReader","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","column","columns","default","eq","fmt","fmt","from","from","from","into","into","match_field_names","ne","new_empty","next_batch","num_columns","num_rows","schema","schema","to_owned","try_from","try_from","try_from_iter","try_from_iter_with_nullable","try_into","try_into","try_new","try_new_with_options","type_id","type_id","BinaryScalar","BooleanScalar","ListScalar","NullScalar","PrimitiveScalar","Scalar","StructScalar","Utf8Scalar","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","new","new","new","new","new","new","new","new_scalar","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","values","values","EPOCH_DAYS_FROM_CE","MICROSECONDS","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","SECONDS_IN_DAY","date32_to_date","date32_to_datetime","date64_to_date","date64_to_datetime","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_us_to_datetime","timeunit_scale","TrustedLen","BitChunk","BitChunkIter","Bytes","Bytes","DATA_TYPE","Index","IndexRange","NativeType","NaturalDataType","Relation","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","days","days","days_ms","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_ne_bytes","from_usize","hash","hash","into","into","into","into","into_iter","into_iter","is_valid","is_valid","is_valid","milliseconds","months","months_days_ns","ne","ne","new","new","new","new","next","next","ns","one","range","range","simd","size_hint","size_hint","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_owned","to_owned","to_string","to_string","to_usize","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero","0","0","0","0","0","0","0","0","0","0","Chunk","FromMaskChunk","LANES","Mask","Native","NativeSimd","Simd","Simd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","default","default","default","default","default","f32x16","f64x8","from","from","from","from","from","from","from","from","from","from","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","i16x32","i32x16","i64x8","i8x64","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","select","select","select","select","select","select","select","select","select","select","select","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u16x32","u32x16","u64x8","u8x64"],"q":["arrow2","","","","","","","","","","","","","","arrow2::alloc","","","","","","","arrow2::arrayarrow2::array::growable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array::ord","","","","","arrow2::bitmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::bitmap::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::datatypesarrow2::error","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::record_batch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::temporal_conversions","","","","","","","","","","","","","","","","","","","arrow2::trusted_len","arrow2::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Defines memory-related functions, such as …","fixed-length and immutable containers with optional values…","Contains efficient containers of booleans: [<code>Bitmap</code>] and […","Contains containers for all Arrow sized types (e.g. <code>i32</code>), …","Metadata declarations such as [<code>DataType</code>], [<code>Field</code>] and […","Defines [<code>ArrowError</code>], representing all errors returned by …","Contains interfaces to use the C Data Interface.","Interact with different formats such as Arrow, CSV, …","A two-dimensional batch of column-oriented data with a …","Declares the [<code>Scalar</code>] API, an optional, trait object …","Conversion methods for dates and times.","Declares [<code>TrustedLen</code>].","traits to handle <em>all physical types</em> used in this crate. …","Misc utilities used in different places in the crate.","Cache and allocation multiple alignment size","Allocates a cache-aligned memory region of <code>size</code> bytes …","Allocates a cache-aligned memory region of <code>size</code> bytes …","Safety","Frees memory previously allocated by […","Reallocates memory previously allocated by […","Returns the total number of bytes allocated to buffers by …","A trait representing an immutable Arrow array. Arrow …","A type def of [<code>Array</code>].","A [<code>BinaryArray</code>] is a nullable array of bytes - the Arrow …","The Arrow’s equivalent to an immutable <code>Vec<Option<bool>></code>…","A type definition [<code>PrimitiveArray</code>] for [<code>days_ms</code>]","A type definition [<code>MutablePrimitiveArray</code>] for [<code>days_ms</code>]","An [<code>Array</code>] whose values are encoded by keys. This [<code>Array</code>] …","Trait denoting [<code>NativeType</code>]s that can be used as keys of …","The Arrow’s equivalent to an immutable …","The Arrow’s equivalent to an immutable …","A type definition [<code>PrimitiveArray</code>] for <code>f32</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>f32</code>","A type definition [<code>PrimitiveArray</code>] for <code>f64</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>f64</code>","Trait describing how a struct imports into itself from the…","Trait that [<code>BinaryArray</code>] and [<code>Utf8Array</code>] implement for …","A type definition [<code>PrimitiveArray</code>] for <code>i128</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>i128</code>","A type definition [<code>PrimitiveArray</code>] for <code>i16</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>i16</code>","A type definition [<code>PrimitiveArray</code>] for <code>i32</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>i32</code>","A type definition [<code>PrimitiveArray</code>] for <code>i64</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>i64</code>","A type definition [<code>PrimitiveArray</code>] for <code>i8</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>i8</code>","Trait that list arrays implement for the purposes of DRY.","","A type definition [<code>PrimitiveArray</code>] for [<code>months_days_ns</code>]","A type definition [<code>MutablePrimitiveArray</code>] for […","A trait describing a mutable array; i.e. an array whose …","The Arrow’s equivalent to <code>Vec<Option<Vec<u8>>></code>. …","The Arrow’s equivalent to <code>Vec<Option<bool>></code>, but with …","A mutable, strong-typed version of [<code>DictionaryArray</code>].","The Arrow’s equivalent to a mutable …","The mutable version of [<code>FixedSizeListArray</code>].","The mutable version of [<code>ListArray</code>].","The Arrow’s equivalent to <code>Vec<Option<T>></code> where <code>T</code> is …","The mutable version of [<code>Utf8Array</code>]. See [<code>MutableArray</code>] …","The concrete [<code>Array</code>] of [<code>DataType::Null</code>].","Trait describing types that can be used as offsets as per …","A [<code>PrimitiveArray</code>] is arrow’s equivalent to …","A [<code>StructArray</code>] is a nested [<code>Array</code>] with an optional …","Trait describing how a struct presents itself to the C …","A trait describing the ability of a struct to create …","A trait describing the ability of a struct to receive new …","A type definition [<code>PrimitiveArray</code>] for <code>u16</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>u16</code>","A type definition [<code>PrimitiveArray</code>] for <code>u32</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>u32</code>","A type definition [<code>PrimitiveArray</code>] for <code>u64</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>u64</code>","A type definition [<code>PrimitiveArray</code>] for <code>u8</code>","A type definition [<code>MutablePrimitiveArray</code>] for <code>u8</code>","[<code>UnionArray</code>] represents an array whose each slot can …","A [<code>Utf8Array</code>] is arrow’s equivalent of an immutable …","Iterator of values of an <code>Utf8Array</code>.","Convert to trait object.","Convert to <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","Convert itself to an (immutable) [<code>Array</code>].","","","","","","","","","Convert to mutable <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pointers to the buffers.","","","","","","","","","","","","The children","The children","","","","","Clones a dynamic [<code>Array</code>].","","","","","","","","","","","","","","","","","","","","","","","","","The [<code>DataType</code>] of the [<code>Array</code>]. In combination with […","The [<code>DataType</code>] of the array.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the default [<code>DataType</code>], <code>DataType::Binary</code> or …","Returns the default [<code>DataType</code>], <code>DataType::Utf8</code> or …","Returns a [<code>DataType</code>] consistent with this Array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logically compares two [<code>Array</code>]s. Two arrays are logically …","","","","","Extends the [<code>MutablePrimitiveArray</code>] from an iterator of …","Extends the [<code>MutablePrimitiveArray</code>] from an iterator of …","Returns the fields of this [<code>StructArray</code>].","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new [<code>BinaryArray</code>] from a slice of optional <code>&[u8]</code>…","","","Creates a new [<code>MutableBooleanArray</code>] out of a slice of …","Creates a new [<code>BooleanArray</code>] out of a slice of Optional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new [<code>Utf8Array</code>] from a slice of <code>&str</code>.","","The canonical method to create a [<code>MutableBinaryArray</code>] out …","Creates a new [<code>BinaryArray</code>] from lower-level parts","Canonical method to create a new [<code>MutableBooleanArray</code>].","The canonical method to create a [<code>BooleanArray</code>] out of …","The canonical method to create a new [<code>DictionaryArray</code>].","Canonical method to create a new […","Returns a new [<code>FixedSizeBinaryArray</code>].","Returns a [<code>FixedSizeListArray</code>].","","Returns a new [<code>NullArray</code>].","Create a [<code>MutablePrimitiveArray</code>] out of low-end APIs.","The canonical method to create a [<code>PrimitiveArray</code>] out of …","Canonical method to create a [<code>StructArray</code>].","","The canonical method to create a [<code>MutableUtf8Array</code>] out …","The canonical method to create a [<code>Utf8Array</code>] out of …","Create a [<code>MutableUtf8Array</code>] out of low-end APIs.","The same as [<code>Utf8Array::from_data</code>] but does not check for …","converts from <code>isize</code>","","","","","Creates a [<code>FixedSizeBinaryArray</code>] from an iterator of …","","","","","Creates a new [<code>MutableBinaryArray</code>] from a [<code>Iterator</code>] of …","Creates a new [<code>BinaryArray</code>] from a [<code>Iterator</code>] of <code>&str</code>.","Creates a new [<code>MutableUtf8Array</code>] from a [<code>Iterator</code>] of <code>&str</code>…","Creates a new [<code>Utf8Array</code>] from a [<code>Iterator</code>] of <code>&str</code>.","Creates a new [<code>BinaryArray</code>] from slices of <code>&[u8]</code>.","Creates a new [<code>MutableBooleanArray</code>] from a slice of <code>bool</code>.","Creates a new [<code>BooleanArray</code>] from a slice of <code>bool</code>.","Creates a [<code>MutablePrimitiveArray</code>] from a slice of values.","Creates a new array out an iterator over values","Creates a new [<code>Utf8Array</code>] from a slice of <code>&str</code>. This is a …","Creates a [<code>MutableBinaryArray</code>] from an iterator of …","Creates a [<code>BinaryArray</code>] from an iterator of trusted …","Creates a [<code>BooleanArray</code>] from a [<code>TrustedLen</code>].","Creates a [<code>BooleanArray</code>] from a [<code>TrustedLen</code>].","Creates a [<code>MutablePrimitiveArray</code>] from a [<code>TrustedLen</code>].","Creates a new [<code>PrimitiveArray</code>] from an iterator over …","Creates a [<code>MutableUtf8Array</code>] from an iterator of trusted …","Creates a [<code>Utf8Array</code>] from an iterator of trusted length.","Creates a [<code>MutableBinaryArray</code>] from an iterator of …","Creates a [<code>BinaryArray</code>] from an iterator of trusted …","Creates a [<code>BooleanArray</code>] from an iterator of trusted …","Creates a [<code>BooleanArray</code>] from an iterator of trusted …","Creates a [<code>MutablePrimitiveArray</code>] from an iterator of …","Creates a new [<code>PrimitiveArray</code>] from an iterator over …","Creates a [<code>MutableUtf8Array</code>] from an iterator of trusted …","Creates a [<code>Utf8Array</code>] from an iterator of trusted length.","Creates a new [<code>BinaryArray</code>] from a [<code>TrustedLen</code>] of <code>&[u8]</code>.","Creates a [<code>BinaryArray</code>] from an iterator of trusted …","Creates a new [<code>MutableBooleanArray</code>] from an [<code>TrustedLen</code>] …","Creates a new [<code>BooleanArray</code>] from an [<code>TrustedLen</code>] of <code>bool</code>.","Creates a new [<code>MutablePrimitiveArray</code>] out an iterator …","Creates a new array out an iterator over values","Creates a new [<code>Utf8Array</code>] from a [<code>TrustedLen</code>] of <code>&str</code>.","Creates a new [<code>Utf8Array</code>] from a [<code>TrustedLen</code>] of <code>&str</code>.","Creates a new [<code>MutablePrimitiveArray</code>] from an iterator …","Creates a new [<code>PrimitiveArray</code>] from an iterator over …","Creates a new array out an iterator over values","","","Returns a function of index returning the string …","Returns the fields the <code>DataType::Struct</code>.","","Contains the trait [<code>Growable</code>] and corresponding concreate …","Returns the index and slot of the field to select from …","","","","","","","","","","","","","","","","","","","","","Converts itself into an [<code>Array</code>].","Converts itself into an [<code>Array</code>].","converts itself into <code>Arc<dyn Array></code>","Converts itself into an [<code>Array</code>].","Converts itself into an [<code>Array</code>].","Converts itself into an [<code>Array</code>].","Extract the low-end APIs from the [<code>MutablePrimitiveArray</code>].","Deconstructs the [<code>StructArray</code>] into its individual …","","whether the array is empty","Whether the array is empty.","Whether it is <code>i32</code> or <code>i64</code>","Returns whether slot <code>i</code> is null.","","Returns whether slot <code>i</code> is valid.","Whether <code>index</code> is valid / set.","Returns an iterator of <code>Option<&[u8]></code>","Returns an iterator over the optional values of this […","Returns an iterator over the optional values of this […","Returns an iterator of <code>Option<Box<dyn Array>></code>","constructs a new iterator","constructs a new iterator","Returns an iterator of <code>Option<Box<dyn Array>></code>","Returns an iterator of <code>Option<Box<dyn Array>></code>","Returns an iterator over <code>Option<T></code>","constructs a new iterator","constructs a new iterator","Returns an iterator of <code>Option<&str></code>","Returns the keys of the [<code>DictionaryArray</code>]. These keys can …","The length of the [<code>Array</code>]. Every array has a length …","The length of the array.","","","","","","","","","","","","","","","","","","","","returns a mutable reference to the inner values.","","","Creates a new empty [<code>MutableBinaryArray</code>].","Creates an new empty [<code>MutableBooleanArray</code>].","Creates an empty [<code>MutableDictionaryArray</code>].","Creates a new empty [<code>MutableFixedSizeBinaryArray</code>].","","","Creates a new empty [<code>MutablePrimitiveArray</code>].","Creates a new [<code>Utf8ValuesIter</code>]","Initializes a new empty [<code>MutableUtf8Array</code>].","Creates an empty [<code>BinaryArray</code>], i.e. whose <code>.len</code> is zero.","Returns a new empty [<code>BooleanArray</code>].","Returns a new empty [<code>DictionaryArray</code>].","Returns a new empty [<code>FixedSizeBinaryArray</code>].","Returns a new empty [<code>FixedSizeListArray</code>].","","Returns a new empty [<code>NullArray</code>].","Returns a new empty [<code>PrimitiveArray</code>].","Creates an empty [<code>StructArray</code>].","","Returns a new empty [<code>Utf8Array</code>].","Creates a new [<code>Array</code>] with a [<code>Array::len</code>] of 0.","","Creates an null [<code>BinaryArray</code>], i.e. whose …","Returns a new [<code>BooleanArray</code>] whose all slots are null / …","Returns an [<code>DictionaryArray</code>] whose all elements are null","Returns a new null [<code>FixedSizeBinaryArray</code>].","Returns a new null [<code>FixedSizeListArray</code>].","","Returns a new [<code>NullArray</code>].","Returns a new [<code>PrimitiveArray</code>] whose all slots are null / …","Creates a null [<code>StructArray</code>] of length <code>length</code>.","","Returns a new [<code>Utf8Array</code>] whose all slots are null / <code>None</code>.","Creates a new [<code>Array</code>] of [<code>DataType</code>] <code>data_type</code> and <code>length</code>. …","","","","","The number of null slots on this [<code>Array</code>]. This is usually …","The offset","","","","","","","","","","","","The offsets of the array","Returns the offsets that slice <code>.values()</code> to return valid …","","","","returns its offsets.","Returns the offsets of this [<code>Utf8Array</code>].","","Contains functions and function factories to order values …","Pushes a new element to the array.","Pushes a new entry to [<code>MutableBooleanArray</code>].","pushes a new entry to [<code>MutableFixedSizeBinaryArray</code>].","Adds a new value to the array.","Pushes a new element to the array.","Adds a new null element to the array.","","","","pushes a null value","","","","","","Reserves <code>additional</code> slots.","Reserves <code>additional</code> slots.","Reserves <code>additional</code> entries.","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","Sets position <code>index</code> to <code>value</code>. Note that if it is the …","Sets position <code>index</code> to <code>value</code>. Note that if it is the …","Sets the validity.","Sets values.","Returns the size","","Slices the [<code>Array</code>], returning a new <code>Box<dyn Array></code>.","","Creates a new [<code>BinaryArray</code>] by slicing this [<code>BinaryArray</code>].","","Returns a slice of this [<code>BooleanArray</code>].","Creates a new [<code>DictionaryArray</code>] by slicing the existing […","","","Returns a slice of this [<code>FixedSizeBinaryArray</code>].","Returns a slice of this [<code>FixedSizeListArray</code>].","","","","Returns a slice of the [<code>NullArray</code>].","","Returns a slice of this [<code>PrimitiveArray</code>].","","","Creates a new [<code>StructArray</code>] that is a slice of <code>self</code>.","","Returns a slice of this [<code>UnionArray</code>].","Returns a slice of this [<code>Utf8Array</code>].","","Changes the arrays’ [<code>DataType</code>], returning a new […","Returns a new [<code>PrimitiveArray</code>] with a different logical …","converts itself to <code>isize</code>","","","","","","","","","","","","","","","","","","","","","","","","Fallible version of [<code>Extend::extend</code>].","","This is infalible and is implemented for consistency with …","","","This is infalible and is implemented for consistency with …","","","","","","","","","","","","","","","","","","","","","","Convert itself from FFI.","","","","","","","","","Creates a new [<code>MutableFixedSizeBinaryArray</code>] from an …","Creates a [<code>FixedSizeBinaryArray</code>] from an fallible …","","","","Creates a [<code>MutableBinaryArray</code>] from an falible iterator …","Creates a [<code>BinaryArray</code>] from an fallible iterator of …","Creates a [<code>BooleanArray</code>] from a [<code>TrustedLen</code>].","Creates a [<code>BooleanArray</code>] from a [<code>TrustedLen</code>].","Creates a [<code>MutablePrimitiveArray</code>] from an fallible …","Creates a [<code>MutableUtf8Array</code>] from an falible iterator of …","Creates a [<code>Utf8Array</code>] from an fallible iterator of …","Creates a [<code>MutableBinaryArray</code>] from an falible iterator …","Creates a [<code>BinaryArray</code>] from an falible iterator of …","Creates a [<code>BooleanArray</code>] from an falible iterator of …","Creates a [<code>BooleanArray</code>] from an falible iterator of …","Creates a [<code>MutablePrimitiveArray</code>] from an fallible …","Creates a [<code>MutableUtf8Array</code>] from an falible iterator of …","Creates a [<code>Utf8Array</code>] from an falible iterator of trusted …","","","","","","","","","","","","","","","","","","","","","Tries to push a new element.","","This is infalible and is implemented for consistency with …","tries to push a new entry to [<code>MutableFixedSizeBinaryArray</code>]…","","This is infalible and is implemented for consistency with …","","Returns whether the value should be pushed to the values …","","","","","","","","","","","","","","","","","","","","","","","The validity of the [<code>Array</code>]: every array has an optional […","The optional validity of the array.","","","","","","","","","","","","","","","","","","","","","Returns the element at index <code>i</code>","Returns the value at index <code>i</code>","Returns the value of the [<code>DictionaryArray</code>] at position <code>i</code>.","Returns the element at index <code>i</code> as <code>&[u8]</code>","Returns value at position <code>i</code>.","Returns the <code>Vec<T></code> at position <code>i</code>.","","Returns the element at index <code>i</code>","","Safe method to retrieve the value at slot <code>i</code>. Equivalent …","Returns the slot <code>index</code> as a [<code>Scalar</code>].","Returns the element at index <code>i</code> as &str","Returns the element at index <code>i</code>","Returns the element at index <code>i</code> as bool","Returns the element at index <code>i</code> as <code>&[u8]</code>","Returns the element at index <code>i</code> as &str","Returns the element at index <code>i</code> as &str","Returns the element at index <code>i</code> as <code>T</code>","Returns the element at index <code>i</code> as &str","The values of the array","","Returns all values in this array. Use <code>.offsets()</code> to slice …","Returns its values.","Returns the values of this [<code>BooleanArray</code>].","returns a reference to the inner values.","Returns the values of the [<code>DictionaryArray</code>].","Returns its values.","Returns the values allocated on this [<code>FixedSizeBinaryArray</code>…","","Returns the inner array.","","","Returns its values.","The values [<code>Buffer</code>].","Returns the values of this [<code>StructArray</code>].","returns its values.","","Returns the values of this [<code>Utf8Array</code>].","Returns an iterator of <code>&[u8]</code>","Returns an iterator over the values of this […","Returns an iterator over the values of this [<code>BooleanArray</code>]","Returns an iterator of <code>Box<dyn Array></code>","Returns an iterator of <code>Box<dyn Array></code>","Returns an iterator of <code>Box<dyn Array></code>","Returns an iterator of <code>bool</code>","Returns an iterator of <code>&str</code>","Returns a mutable slice of values.","Returns a mutable slice of values.","Initializes a new [<code>MutableUtf8Array</code>] with a pre-allocated …","Creates a new [<code>MutableBinaryArray</code>] with capacity for …","Creates an new [<code>MutableBooleanArray</code>] with a capacity of …","Creates a new [<code>MutableFixedSizeBinaryArray</code>] with capacity …","","Creates a new [<code>MutablePrimitiveArray</code>] with a capacity.","Initializes a new [<code>MutableUtf8Array</code>] with a pre-allocated …","Creates a new [<code>MutablePrimitiveArray</code>] from a capacity and …","A trait describing a struct that can be extended from …","Concrete [<code>Growable</code>] for the [<code>BinaryArray</code>].","Concrete [<code>Growable</code>] for the [<code>BooleanArray</code>].","Concrete [<code>Growable</code>] for the [<code>DictionaryArray</code>].","Concrete [<code>Growable</code>] for the [<code>FixedSizeBinaryArray</code>].","Concrete [<code>Growable</code>] for the [<code>ListArray</code>].","Concrete [<code>Growable</code>] for the [<code>NullArray</code>].","Concrete [<code>Growable</code>] for the [<code>PrimitiveArray</code>].","Concrete [<code>Growable</code>] for the [<code>StructArray</code>].","Concrete [<code>Growable</code>] for the [<code>Utf8Array</code>].","","","","","","","","","Converts itself to an <code>Arc<dyn Array></code>, thereby finishing …","","Converts itself to an <code>Box<dyn Array></code>, thereby finishing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extends this [<code>Growable</code>] with elements from the bounded […","","","","","","","","","","Extends this [<code>Growable</code>] with null elements, disregarding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new [<code>Growable</code>] from an arbitrary number of …","Panics","","","","","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare the values at two arbitrary indices in two arrays.","returns a comparison function that compares values at two …","Total order of all native types whose Rust implementation …","implements comparison using IEEE 754 total ordering for …","implements comparison using IEEE 754 total ordering for …","An immutable container whose API is optimized to handle …","A container to store booleans. [<code>MutableBitmap</code>] is …","Returns the slice of bytes of this [<code>MutableBitmap</code>]. Note …","Returns the byte slice of this Bitmap.","Apply a bitwise operation <code>op</code> to two inputs and return the …","","","","","Returns the capacity of [<code>MutableBitmap</code>] in number of bits.","Returns an iterator over bits in chunks of <code>T</code>, which is …","Empties the [<code>MutableBitmap</code>].","","","","","","","Extends [<code>MutableBitmap</code>] by <code>additional</code> values of constant …","Extends the [<code>MutableBitmap</code>] from a [<code>Bitmap</code>].","Extends the [<code>MutableBitmap</code>] from a slice of bytes with …","Extends <code>self</code> from a [<code>TrustedLen</code>] iterator.","Extends <code>self</code> from an iterator of trusted len.","","","","","","","","Initializes a [<code>MutableBitmap</code>] from a [<code>MutableBuffer<u8></code>] …","","","Initializes a zeroed [<code>MutableBitmap</code>].","Creates a new [<code>MutableBitmap</code>] from an iterator of …","Creates a new [<code>Bitmap</code>] from an iterator of booleans.","Creates a new [<code>MutableBitmap</code>] from an iterator of …","Creates a new [<code>Bitmap</code>] from an iterator of booleans.","Creates a new [<code>Bitmap</code>] from [<code>MutableBuffer</code>] and a length.","Creates a new [<code>Bitmap</code>] from a slice and length.","Returns whether the position <code>index</code> is set.","Returns whether the bit at position <code>i</code> is set.","Returns whether the bit at position <code>i</code> is set.","Unsafely returns whether the bit at position <code>i</code> is set.","","","Returns whether [<code>MutableBitmap</code>] is empty.","Returns whether [<code>Bitmap</code>] is empty","constructs a new iterator over the values of […","constructs a new iterator","Returns the length of the [<code>MutableBitmap</code>].","Returns the length of the [<code>Bitmap</code>].","Initializes an empty [<code>MutableBitmap</code>].","Initializes an empty [<code>Bitmap</code>].","Initializes an new [<code>Bitmap</code>] filled with unset values.","Returns the number of unset bits on this [<code>MutableBitmap</code>].","Returns the number of unset bits on this [<code>Bitmap</code>].","Counts the nulls (unset bits) starting from <code>offset</code> bits …","Pushes a new bit to the [<code>MutableBitmap</code>], re-sizing it if …","Pushes a new bit to the [<code>MutableBitmap</code>]","Apply a bitwise operation <code>op</code> to four inputs and return …","Initializes an a pre-allocated [<code>MutableBitmap</code>] with …","Sets the position <code>index</code> to <code>value</code>","Slices <code>self</code>, offseting by <code>offset</code> and truncating up to …","Apply a bitwise operation <code>op</code> to three inputs and return …","","","","Creates a new [<code>MutableBitmap</code>] from an iterator of …","Creates a new [<code>Bitmap</code>] from a fallible iterator of …","Creates a new [<code>MutableBitmap</code>] from an falible iterator of …","Creates a new [<code>Bitmap</code>] from a fallible iterator of …","","","","","Apply a bitwise operation <code>op</code> to one input and return the …","General utilities for bitmaps representing items where …","Initializes an a pre-allocated [<code>MutableBitmap</code>] with …","Something that can be use as a chunk of bits. This is …","Trait representing an exact iterator over bytes in […","This struct is used to efficiently iterate over bit masks …","An iterator over a slice of bytes in [<code>BitChunk</code>]s.","An iterator over bits according to the LSB, i.e. the …","The representation of this type in the stack.","Iterator over a bitmap that returns slices of set regions …","An iterator adapter that converts an iterator over <code>T</code> and …","","","","","","","","","","","Returns the number of bytes required to hold <code>bits</code> bits.","","","","","","","Returns the number of zero bits in the slice offsetted by …","Formats <code>bytes</code> taking into account an offset and length of …","","","","","","","","","","convert itself from bytes.","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","","","","","","","","","","","Returns whether there are still elements in this iterator","Returns whether bit at position <code>i</code> in <code>byte</code> is set or not","Returns the number of chunks of this iterator","","Creates a new [<code>ZipValidity</code>].","Creates a new [<code>BitChunksExact</code>].","Creates a [<code>BitChunks</code>].","Creates a new [<code>BitmapIter</code>].","Creates a new [<code>SlicesIterator</code>]","","","","","","","","A value with a single bit set at the most right position.","The remainder of the iterator.","","Returns the remaining [<code>BitChunk</code>]. It is zero iff …","","Returns the remainder [<code>BitChunk</code>].","Returns an iterator over the remainder bits.","Returns the remainder bits in [<code>BitChunks::remainder</code>].","Sets bit at position <code>i</code> in <code>byte</code>","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","","","","","Returns the total number of slots. It corresponds to the …","convert itself into bytes.","","","","","","","","","","","","","","","","","","","A value with no bits set.","Returns an iterator adapter that returns Option according …","[<code>Buffer</code>] is a contiguous memory region that can be shared …","A [<code>MutableBuffer</code>] is this crates’ interface to store …","Returns a mutable raw pointer to this buffer’s internal …","Returns the data stored in this buffer as a mutable slice.","Returns a raw pointer to this buffer’s internal memory …","Returns a pointer to the start of this buffer.","Returns the data stored in this buffer as a slice.","Returns the byte slice stored in this buffer","","","","","Returns the total capacity in this buffer. The invariant …","Clear all existing data from this buffer.","","","","","","","","","","","","Extends this buffer by <code>additional</code> items of value <code>value</code>.","Extends this buffer from a slice of items, increasing its …","Extends <code>self</code> from a [<code>TrustedLen</code>] iterator.","Extends <code>self</code> from an iterator.","","","","","","","","","Auxiliary method to create a new Buffer","Creates a [<code>MutableBuffer<u8></code>] from an iterator of <code>u64</code>.","Safety","","","Allocates a new [MutableBuffer] with <code>len</code> and capacity to …","Creates a [<code>MutableBuffer</code>] from an [<code>Iterator</code>] with a …","Creates a [<code>Buffer</code>] from an [<code>Iterator</code>] with a trusted …","Creates a [<code>MutableBuffer</code>] from an [<code>Iterator</code>] with a …","Creates a [<code>Buffer</code>] from an [<code>Iterator</code>] with a trusted …","","","Returns whether this buffer is empty.","Returns whether the buffer is empty.","Returns the length (the number of items) in this buffer. …","Returns the number of bytes in the buffer","","Creates an empty [<code>MutableBuffer</code>]. This does not allocate …","Creates an empty [<code>Buffer</code>].","Creates a new [<code>Buffer</code>] filled with zeros.","Pushes a new item to the buffer, increasing its capacity …","Ensures that this buffer has at least …","Resizes the buffer, either truncating its contents (with …","Sets the length of this buffer.","Shrinks the capacity of the [<code>MutableBuffer</code>] to fit its …","Returns a new [Buffer] that is a slice of this buffer …","","Shortens the buffer. If <code>len</code> is greater or equal to the …","","","Creates a [<code>MutableBuffer</code>] from a fallible [<code>TrustedLen</code>] …","Safety","Creates a [<code>MutableBuffer</code>] from an [<code>Iterator</code>] with a …","Safety","","","","","Allocate a new [<code>MutableBuffer</code>] with initial capacity to …","Opaque binary data of variable length.","Opaque binary data of variable length.","A boolean represented as a single bit.","A boolean datatype representing the values <code>true</code> and <code>false</code>.","The set of datatypes that are supported by this …","A 32-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","Indicates the number of elapsed days and milliseconds, …","Two i32 representing days and ms","Decimal value with precision and scale precision is the …","A dictionary encoded array by <code>DictionaryIndexType</code>.","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","the set of valid indices used to index a …","Measure of elapsed time in either seconds, milliseconds, …","Extension type.","A logical [<code>DataType</code>] and its associated metadata per …","Opaque binary data of fixed size.","Opaque binary data of fixed size. Enum parameter …","A list of some data type with fixed length.","A list of some logical data type with fixed length.","A 16-bit floating point number.","A 32-bit floating point number.","A 32-bit floating point number.","A 64-bit floating point number.","A 64-bit floating point number.","A signed 128-bit integer.","A signed 16-bit integer.","A signed 16-bit integer.","A signed 16-bit integer.","A signed 32-bit integer.","A signed 32-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","A signed 64-bit integer.","A signed 64-bit integer.","A signed 8-bit integer.","A signed 8-bit integer.","A signed 8-bit integer.","A “calendar” interval which models types that don’t …","Interval units defined in Arrow","Opaque binary data of variable length and 64-bit offsets.","Opaque binary data of variable length and 64-bit offsets.","A list of some data type with variable length and 64-bit …","A list of some logical data type with variable length and …","A variable-length string in Unicode with UFT-8 encoding …","A variable-length string in Unicode with UFT-8 encoding …","A list of some data type with variable length.","A list of some logical data type with variable length.","Time in microseconds.","Time in milliseconds.","months_days_ns(i32, i32, i64)","The values are stored contiguously in 16 byte blocks. …","Time in nanoseconds.","A Null with no allocation.","Null type, representing an array without values or …","The set of physical types: unique in-memory …","An array where each slot has a known compile-time size.","","An ordered sequence of [<code>Field</code>] with optional metadata.","typedef for [<code>Arc<Schema></code>].","Time in seconds.","A nested type that contains an arbitrary number of fields.","A nested datatype that contains a number of sub-fields.","A 32-bit time representing the elapsed time since …","A 64-bit time representing the elapsed time since …","Time units defined in Arrow.","A timestamp with an optional timezone.","An unsigned 16-bit integer.","An unsigned 16-bit integer.","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 32-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","An unsigned 64-bit integer.","An unsigned 64-bit integer.","An unsigned 8-bit integer.","An unsigned 8-bit integer.","An unsigned 8-bit integer.","A nested type that represents slots of differing types.","A nested datatype that can represent slots of differing …","A variable-length string in Unicode with UTF-8 encoding.","A variable-length string in Unicode with UTF-8 encoding.","Indicates the number of elapsed whole months, stored as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Look up a column by name and return a immutable reference …","Returns the [<code>Field</code>]’s [<code>DataType</code>].","Its logical [<code>DataType</code>]","Returns the dictionary ID, if this is a dictionary type.","The dictionary id of this field (currently un-used)","Returns whether this [<code>Field</code>]’s dictionary is ordered, …","Whether the dictionary’s values are ordered","Creates an empty [<code>Schema</code>].","","","","","","","","","Returns the [<code>Field</code>] at position <code>i</code>.","Returns the first [<code>Field</code>] named <code>name</code>.","Returns all [<code>Field</code>]s in this schema.","Returns all [<code>Field</code>]s with dictionary id <code>dict_id</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Find the index of the column with the given name.","","","","","","","","","Returns the [<code>Field</code>] nullability.","Returns the [<code>Field</code>]’s optional custom metadata.","Returns an immutable reference to the Map of custom …","A map of key-value pairs containing additional custom …","Returns the [<code>Field</code>]’s name.","Its name","","","","","Creates a new field","Creates a new [<code>Schema</code>] from a sequence of [<code>Field</code>] values.","Creates a new field","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values and …","Whether its values can be null or not","Sets the [<code>Field</code>]’s optional metadata. The metadata is …","","","","","","","","","the [<code>PhysicalType</code>] of this [<code>DataType</code>].","","","","","","","","","","","","","","","","","","","","Merge field into self if it is compatible. Struct will be …","Merge schema into self if it is compatible. Struct fields …","","","","","","","","","Creates a new [<code>Field</code>] with metadata.","Creates a new [<code>Field</code>] with metadata.","Error during arithmetic operation. Normally returned …","Enum with all errors in this crate.","Triggered by an external error, such as CSV, serde, …","Error during import or export to/from a format","Error during import or export to/from C Data Interface","When an invalid argument is passed to a function.","Errors associated with IO","Error during import or export to/from IPC","Whenever pushing to a container fails because it does not …","Returned when functionality is not yet available.","Any other error.","Typedef for a [<code>std::result::Result</code>] of an [<code>ArrowError</code>].","Error associated with incompatible schemas.","","","","","","","","Wraps an external error in an <code>ArrowError</code>.","","","","","","ABI-compatible struct for ArrowArray from C Data Interface…","ABI-compatible struct for <code>ArrowSchema</code> from C Data …","","","","","","","","","","create an empty [Ffi_ArrowSchema]","Exports an <code>Array</code> to the C data interface.","Exports a [<code>Field</code>] to the C data interface.","","","","","Imports a [<code>Field</code>] from the C data interface.","Imports a [<code>Field</code>] from the C data interface.","","","","","","","","","","A two-dimensional batch of column-oriented data with a …","Options that control the behaviour used when creating a […","Trait for types that can read <code>RecordBatch</code>’s.","","","","","","","Get a reference to a column’s array by index.","Get a reference to all columns in the record batch.","","","","","Panics iff the null count of the array is not null.","","","","","Match field names of structs and lists. If set to <code>true</code>, …","","Creates a new empty [<code>RecordBatch</code>].","Reads the next <code>RecordBatch</code>.","Returns the number of columns in the record batch.","Returns the number of rows in each column.","Returns the schema of this <code>RecordBatchReader</code>.","Returns the <code>Schema</code> of the record batch.","","","","Create a <code>RecordBatch</code> from an iterable list of pairs of the…","Create a <code>RecordBatch</code> from an iterable list of tuples of …","","","Creates a <code>RecordBatch</code> from a schema and columns.","Creates a <code>RecordBatch</code> from a schema and columns, with …","","","","","The scalar equivalent of [<code>ListArray</code>]. Like [<code>ListArray</code>], …","","","Trait object declaring an optional value with a logical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","creates a new [<code>Scalar</code>] from an [<code>Array</code>].","Returns a new <code>PrimitiveScalar</code> with the same value but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of seconds in a day","converts a <code>i32</code> representing a <code>date32</code> to [<code>NaiveDate</code>]","converts a <code>i32</code> representing a <code>date32</code> to [<code>NaiveDateTime</code>]","converts a <code>i64</code> representing a <code>date64</code> to [<code>NaiveDate</code>]","converts a <code>i64</code> representing a <code>date64</code> to [<code>NaiveDateTime</code>]","converts a <code>i32</code> representing a <code>time32(ms)</code> to [<code>NaiveDateTime</code>…","converts a <code>i32</code> representing a <code>time32(s)</code> to [<code>NaiveDateTime</code>]","converts a <code>i64</code> representing a <code>time64(ns)</code> to [<code>NaiveDateTime</code>…","converts a <code>i64</code> representing a <code>time64(us)</code> to [<code>NaiveDateTime</code>…","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to […","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to […","converts a <code>i64</code> representing a <code>timestamp(s)</code> to […","converts a <code>i64</code> representing a <code>timestamp(us)</code> to […","Calculates the scale factor between two TimeUnits. The …","An iterator of known, fixed size. A trait denoting Rusts…","Something that can be use as a chunk of bits. This is …","An iterator of <code>bool</code> over a [<code>BitChunk</code>]. This iterator is …","The representation of this type in the stack.","Type denoting its representation as bytes","The natural [<code>DataType</code>].","Types that can be used to index a slot of an array.","iterator of [<code>Index</code>] equivalent to <code>(a..b)</code>.","Declares any type that can be allocated, serialized and …","Trait denoting anything that has a natural logical […","describes whether a [<code>DataType</code>] is valid.","","","","","","","","","","","","","The number of days","","The in-memory representation of the DayMillisecond …","","","","","","","","","","","","","From bytes in big endian","","","convert itself from bytes.","Convert itself from [<code>usize</code>].","","","","","","","","","Whether <code>data_type</code> is a valid [<code>DataType</code>].","","","The number of milliseconds","","The in-memory representation of the MonthDayNano variant …","","","Creates a new [<code>BitChunkIter</code>] with <code>len</code> bits.","Returns a new [<code>IndexRange</code>].","A new [<code>days_ms</code>].","","","","","A value with a single bit set at the most right position.","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","Contains traits and implementations of multi-data used in …","","","To bytes in big endian","","","To bytes in little endian","","","convert itself into bytes.","","","","","Convert itself to [<code>usize</code>].","","","","","","","","","","","","","A value with no bits set.","","","","","","","","","","","The type holding bits for masks.","Describes the ability to convert itself from a [<code>BitChunk</code>].","Number of lanes","Type used for masking.","The [<code>NativeType</code>] of this struct. E.g. <code>f32</code> for a …","A struct that lends itself well to be compiled leveraging …","Trait implemented by some [<code>NativeType</code>] that have a SIMD …","The SIMD type associated with this trait. This type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert itself from a slice.","Convert itself from a slice.","","","","","","","","","","","creates a new Self from <code>v</code> by populating items from <code>v</code> up …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets values to <code>default</code> based on <code>mask</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,2,3,5,7,9,11,13,16,20,2,3,5,7,9,11,13,16,20,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,20,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,20,21,23,4,6,8,10,12,14,15,17,18,19,21,23,23,12,14,18,19,0,4,6,8,10,12,14,15,17,18,19,22,21,4,6,8,10,12,14,15,17,18,19,22,21,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,5,7,13,16,20,4,21,12,14,1,4,4,5,6,6,8,8,9,10,10,12,12,14,14,15,15,16,17,17,18,18,19,19,21,21,0,3,5,16,20,16,16,18,19,1,3,4,4,5,6,6,7,8,8,9,10,10,11,12,12,13,14,14,15,15,16,17,17,18,18,19,19,22,20,21,21,3,4,4,4,4,5,5,6,6,6,6,7,7,7,8,8,8,9,10,10,10,11,12,12,13,14,14,14,15,15,16,16,16,17,17,17,17,18,18,18,19,22,20,21,21,21,21,3,4,5,6,8,9,10,12,14,15,16,17,18,19,20,21,20,21,24,3,4,5,6,10,16,17,20,21,3,4,20,21,4,5,6,16,17,21,3,4,5,6,16,17,20,21,3,4,5,6,16,17,20,21,3,4,5,6,16,17,20,21,16,17,17,14,14,0,18,19,0,19,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,20,21,3,5,7,13,16,20,16,18,22,1,2,24,1,19,1,2,4,5,6,8,9,10,12,14,16,17,19,21,8,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,7,11,13,3,5,7,9,11,13,16,22,20,4,6,8,10,12,14,15,17,18,19,21,0,13,4,6,8,10,12,14,15,17,18,19,21,0,13,13,22,22,1,23,4,6,8,10,12,14,15,17,18,19,21,25,4,4,14,19,20,21,21,0,3,5,9,16,20,2,3,5,7,7,9,11,13,16,20,3,5,16,20,5,16,16,16,10,22,1,4,4,6,6,8,8,10,10,12,12,14,14,15,15,17,17,18,18,19,19,21,21,16,17,24,4,6,8,10,12,14,15,17,18,19,22,21,4,6,8,10,12,14,15,17,18,19,21,26,3,5,7,13,16,20,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,20,21,27,4,6,8,14,17,18,19,21,9,10,11,11,11,3,4,5,6,16,20,21,3,4,5,6,16,20,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,20,21,28,3,5,9,13,16,20,7,13,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,20,21,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,29,4,6,8,9,10,12,12,14,14,17,19,21,4,6,9,10,14,17,21,25,4,4,5,6,7,8,9,10,11,12,13,14,16,17,18,20,21,21,4,5,6,8,12,14,16,21,9,16,20,3,5,9,13,16,20,16,0,0,0,0,0,0,0,0,0,0,30,31,32,33,34,35,36,37,38,39,38,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,33,38,30,31,32,33,34,35,36,37,39,38,30,31,32,33,34,35,36,37,39,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,0,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,0,0,0,0,0,0,0,40,41,0,40,41,40,41,40,41,40,41,41,40,41,40,41,40,40,40,40,40,40,41,40,40,41,41,41,40,40,41,40,40,41,40,41,41,41,40,41,41,41,40,41,40,41,40,41,40,41,40,41,41,40,41,41,40,40,0,40,40,41,0,41,40,41,40,41,40,41,40,41,40,41,0,0,40,0,0,0,0,0,42,0,0,43,44,45,46,47,43,44,45,46,47,0,43,46,47,43,46,47,0,0,44,45,46,47,43,44,45,46,47,42,0,0,43,44,45,46,47,43,44,45,46,47,44,0,44,45,43,44,45,46,47,43,44,45,46,47,43,46,42,48,44,44,45,45,45,45,0,0,43,44,45,46,47,42,43,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,42,0,0,0,49,49,49,50,49,50,49,50,49,50,49,49,50,50,49,50,49,50,49,49,49,50,49,49,49,49,49,49,50,49,49,49,50,50,50,50,49,49,49,50,49,49,50,49,50,49,50,49,50,49,50,50,49,50,50,49,49,49,49,49,50,50,49,49,50,49,50,49,50,49,50,49,50,49,51,52,51,52,0,52,52,53,54,52,51,52,0,52,52,0,51,52,51,52,52,54,52,54,52,54,55,54,52,55,54,52,55,54,52,55,54,52,52,0,51,52,51,52,51,52,51,52,56,56,54,53,56,51,52,0,51,0,0,0,56,51,52,52,52,0,52,55,54,52,55,54,52,55,54,52,55,54,52,51,52,51,52,53,57,55,54,51,58,52,56,53,57,55,54,51,58,52,56,53,57,55,54,51,58,52,56,53,57,55,54,51,58,52,56,53,58,57,57,57,57,57,57,58,57,55,54,51,58,52,56,53,58,58,58,58,57,57,55,54,51,58,58,52,52,56,53,57,55,54,51,58,52,56,53,57,55,54,51,52,56,53,58,57,55,54,51,58,52,56,53,57,57,58,57,57,57,57,51,58,52,57,58,57,58,57,57,57,55,54,51,58,52,56,53,52,57,58,52,57,55,54,51,58,52,56,53,57,55,54,51,58,52,56,53,57,58,57,55,54,51,58,52,56,53,57,58,59,0,59,59,59,59,59,59,59,59,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,60,61,60,61,60,60,60,61,60,61,0,0,60,61,60,61,0,0,60,61,60,60,61,60,61,60,61,0,0,0,62,63,62,63,62,62,62,62,63,62,62,63,62,62,63,62,63,63,62,62,64,62,62,64,62,62,62,63,62,62,62,63,62,62,62,63,0,0,0,0,0,0,0,0,65,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,67,68,69,70,71,72,65,66,67,68,69,70,71,72,71,65,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,66,67,67,68,68,69,69,70,71,72,66,67,68,69,70,71,72,65,66,67,68,69,70,71,72,66,67,68,69,70,71,72,0,66,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,67,68,69,70,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,73,74,0,0,0,0,0,75,76,77,78,75,76,77,78,77,78,77,78,77,78,0,77,78,77,78,77,77,78,78,75,76,77,78,73,77,78,42,79,77,78,75,76,77,78,75,76,80,77,78,77,78,0,77,78,75,76,77,78,75,76,78,42,79,79,0,75,76,73,77,78,73,77,78,42,77,78,77,78,79,75,76,77,78,75,76,77,78,75,76,77,78,42,81,82,83,84,85,86,87,88,89,90,91,0,91,91,91,0,0,92,81,82,83,84,85,86,87,88,89,90,81,82,83,84,85,86,87,88,89,90,81,82,83,84,85,86,87,88,89,90,0,0,81,82,83,84,85,86,87,88,89,90,93,91,81,82,83,84,85,86,87,88,89,90,91,81,82,83,84,85,86,87,88,89,90,0,0,0,0,81,82,83,84,85,86,87,88,89,90,81,82,83,84,85,86,87,88,89,90,81,82,83,84,85,86,87,88,89,90,91,81,82,83,84,85,86,87,88,89,90,81,82,83,84,85,86,87,88,89,90,81,82,83,84,85,86,87,88,89,90,81,82,83,84,85,86,87,88,89,90,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["nonnull",3],["nativetype",8]]],[[["usize",15]],[["nonnull",3],["nativetype",8]]],[[],[["nonnull",3],["nativetype",8]]],[[["usize",15],["nonnull",3],["nativetype",8]]],[[["nonnull",3],["nativetype",8],["usize",15]],[["nonnull",3],["nativetype",8]]],[[],["isize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["vec",3]]],[[],[["arc",3],["vec",3]]],[[],[["arc",3],["vec",3]]],[[],[["arc",3],["vec",3]]],[[],[["arc",3],["vec",3]]],[[],[["arc",3],["vec",3]]],[[],[["arc",3],["vec",3]]],[[["array",8]],[["box",3],["array",8]]],[[],["binaryarray",3]],[[],["booleanarray",3]],[[],["dictionaryarray",3]],[[],["fixedsizebinaryarray",3]],[[],["fixedsizelistarray",3]],[[],["listarray",3]],[[],["nullarray",3]],[[],["primitivearray",3]],[[],["structarray",3]],[[],["unionarray",3]],[[],["utf8valuesiter",3]],[[],["utf8array",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[["datatype",4],["usize",15]],["datatype",4]],[[["datatype",4]],["datatype",4]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[["array",8]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["vec",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["mutablebinaryarray",3]]],[[["growablebinary",3]]],[[["asref",8]]],[[]],[[]],[[]],[[]],[[["mutablebooleanarray",3]]],[[]],[[["growableboolean",3]]],[[]],[[]],[[]],[[["mutabledictionaryarray",3]]],[[]],[[["growabledictionary",3]]],[[]],[[["mutablefixedsizebinaryarray",3]]],[[["growablefixedsizebinary",3]]],[[]],[[]],[[]],[[["mutablefixedsizelistarray",3]]],[[]],[[]],[[["mutablelistarray",3]]],[[["growablelist",3]]],[[]],[[["growablenull",3]]],[[]],[[["datatype",4]]],[[]],[[]],[[]],[[["mutableprimitivearray",3]]],[[["growableprimitive",3]]],[[["recordbatch",3]]],[[]],[[["growablestruct",3]]],[[]],[[]],[[]],[[["growableutf8",3]]],[[]],[[["asref",8]]],[[["mutableutf8array",3]]],[[["mutablebuffer",3],["option",4],["datatype",4],["mutablebuffer",3],["u8",15],["mutablebitmap",3]]],[[["bitmap",3],["buffer",3],["datatype",4],["option",4],["buffer",3],["u8",15]]],[[["datatype",4],["mutablebitmap",3],["option",4]]],[[["datatype",4],["bitmap",3],["option",4]]],[[["primitivearray",3],["arc",3],["array",8]]],[[["option",4],["datatype",4],["mutablebuffer",3],["u8",15],["mutablebitmap",3]]],[[["bitmap",3],["datatype",4],["option",4],["buffer",3],["u8",15]]],[[["array",8],["bitmap",3],["datatype",4],["option",4],["arc",3]]],[[["arc",3],["buffer",3],["bitmap",3],["datatype",4],["option",4],["array",8]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["mutablebuffer",3],["mutablebitmap",3],["option",4]]],[[["bitmap",3],["datatype",4],["buffer",3],["option",4]]],[[["bitmap",3],["vec",3],["datatype",4],["option",4],["arc",3]]],[[["option",4],["buffer",3],["i8",15],["vec",3],["datatype",4],["buffer",3],["arc",3]]],[[["mutablebuffer",3],["option",4],["datatype",4],["mutablebuffer",3],["u8",15],["mutablebitmap",3]]],[[["bitmap",3],["buffer",3],["datatype",4],["option",4],["buffer",3],["u8",15]]],[[["mutablebuffer",3],["option",4],["datatype",4],["mutablebuffer",3],["u8",15],["mutablebitmap",3]]],[[["bitmap",3],["buffer",3],["datatype",4],["option",4],["buffer",3],["u8",15]]],[[["isize",15]],["option",4]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8],["usize",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[]],[[]],[[]],[[]],[[]],[[["trustedlen",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["iterator",8]]],[[]],[[]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["intoiterator",8]]],[[["datatype",4]],["field",3]],[[["datatype",4]],["datatype",4]],[[["array",8]],[["box",3],["fn",8]]],[[["datatype",4]]],[[["datatype",4]]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[["datatype",4]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],[["zipvalidity",3],["binaryvalueiter",3]]],[[],[["bitmapiter",3],["zipvalidity",3],["bool",15]]],[[],[["bitmapiter",3],["zipvalidity",3],["bool",15]]],[[],[["dictionaryvaluesiter",3],["box",3],["zipvalidity",3]]],[[],[["zipvalidity",3],["fixedsizebinaryvaluesiter",3]]],[[],[["zipvalidity",3],["fixedsizebinaryvaluesiter",3]]],[[],[["listvaluesiter",3],["box",3],["zipvalidity",3]]],[[],[["zipvalidity",3],["box",3],["listvaluesiter",3]]],[[],[["zipvalidity",3],["iter",3]]],[[],[["zipvalidity",3],["iter",3]]],[[],["unioniter",3]],[[],[["str",15],["utf8valuesiter",3],["zipvalidity",3]]],[[],["primitivearray",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["utf8array",3]]],[[]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]],[["box",3],["array",8]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]]],[[["datatype",4],["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["bool",15],["str",15]]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["buffer",3]],[[]],[[],["buffer",3]],[[],["option",4]],[[],["mutablebuffer",3]],[[],["buffer",3]],[[]],null,[[["option",4],["asref",8]]],[[["bool",15],["option",4]]],[[["asref",8],["option",4]]],[[["option",4]]],[[["option",4],["asref",8],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["bool",15],["option",4]]],[[["usize",15],["option",4]]],[[["mutablebitmap",3],["option",4]]],[[["mutablebuffer",3]]],[[],["usize",15]],[[]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["datatype",4]]],[[["datatype",4]]],[[],["isize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["intoiterator",8],["usize",15]],["result",6]],[[["intoiterator",8],["usize",15]],["result",6]],[[["datatype",4],["intoiterator",8],["usize",15]],["result",6]],[[["intoiterator",8],["usize",15]],["result",6]],[[["intoiterator",8],["usize",15]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[["option",4]],["result",6]],[[["bool",15],["option",4]],["result",6]],[[["asref",8],["option",4]],["result",6]],[[["option",4]],["result",6]],[[["option",4]],["result",6]],[[["option",4]],["result",6]],[[],[["bool",15],["result",6]]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["buffer",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],[["box",3],["scalar",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3],["scalar",8]]],[[["usize",15]],["str",15]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3],["array",8]]],[[["usize",15]]],[[["usize",15]],["str",15]],[[]],[[]],[[],["buffer",3]],[[],["mutablebitmap",3]],[[],["bitmap",3]],[[]],[[],["arc",3]],[[],["mutablebuffer",3]],[[],["buffer",3]],[[]],[[],["arc",3]],[[]],[[],["arc",3]],[[],["mutablebuffer",3]],[[],["buffer",3]],[[]],[[],["mutablebuffer",3]],[[]],[[],["buffer",3]],[[],["binaryvalueiter",3]],[[],["bitmapiter",3]],[[],["bitmapiter",3]],[[],["dictionaryvaluesiter",3]],[[],[["listvaluesiter",3],["fixedsizelistarray",3]]],[[],[["listarray",3],["listvaluesiter",3]]],[[],["iter",3]],[[],["utf8valuesiter",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datatype",4],["usize",15]]],null,null,null,null,null,null,null,null,null,null,[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["arc",3],["array",8]]],[[],[["array",8],["arc",3]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[],[["box",3],["array",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15],["usize",15]],[["growable",8],["box",3]]],[[["binaryarray",3],["bool",15],["usize",15],["vec",3]]],[[["bool",15],["vec",3],["booleanarray",3],["usize",15]]],[[["bool",15],["vec",3],["usize",15],["fixedsizebinaryarray",3]]],[[["datatype",4]]],[[["primitivearray",3],["bool",15],["vec",3],["usize",15]]],[[["vec",3],["listarray",3],["bool",15],["usize",15]]],[[["vec",3],["bool",15],["structarray",3],["usize",15]]],[[["bool",15],["utf8array",3],["vec",3],["usize",15]]],[[["bool",15],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["array",8]],[["dyncomparator",6],["result",6]]],[[],["ordering",4]],[[["f32",15]],["ordering",4]],[[["f64",15]],["ordering",4]],null,null,[[]],[[]],[[["bitmap",3]],["bitmap",3]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],[["bitchunks",3],["bitchunk",8]]],[[]],[[],["bitmap",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["bool",15]]],[[["bitmap",3]]],[[["usize",15]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["mutablebitmap",3]]],[[["mutablebuffer",3],["usize",15],["u8",15]]],[[]],[[]],[[["usize",15]]],[[]],[[["trustedlen",8]]],[[]],[[["iterator",8]]],[[["mutablebuffer",3],["usize",15],["u8",15]]],[[["asref",8],["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],[["bool",15],["option",4]]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bitmapiter",3]],[[],["bitmapiter",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["bool",15]]],[[["bool",15]]],[[["bitmap",3]],["bitmap",3]],[[["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["bitmap",3]],["bitmap",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["trustedlen",8]],["result",4]],[[],["result",4]],[[["iterator",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["bitmap",3]],["bitmap",3]],null,[[["usize",15]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[],["bitmapiter",3]],[[],["slicesiterator",3]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15],["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["usize",15],["u8",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["bitmapiter",3],["option",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["bitmap",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["bool",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bitchunkiter",3]],[[],["usize",15]],[[["usize",15],["u8",15],["bool",15]],["u8",15]],[[["usize",15],["bool",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["bitmapiter",3],["option",4],["iterator",8]],[["zipvalidity",3],["iterator",8]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["buffer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["buffer",3]],["bool",15]],[[["intoiterator",8]]],[[["usize",15]]],[[]],[[["trustedlen",8]]],[[["iterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["mutablebuffer",3],["u64",15]]],[[]],[[]],[[]],[[["mutablebuffer",3]]],[[]],[[["bytes",3]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["usize",15]]],[[["trustedlen",8],["iterator",8]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["iterator",8]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["buffer",3]],["bool",15]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["trustedlen",8]],["result",4]],[[["trustedlen",8]],["result",4]],[[["iterator",8]],["result",4]],[[["iterator",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["field",3]],[[],["dictionaryindextype",4]],[[],["primitivetype",4]],[[],["physicaltype",4]],[[],["schema",3]],[[],["datatype",4]],[[],["timeunit",4]],[[],["intervalunit",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["option",4]],[[],["datatype",4]],null,[[],[["i64",15],["option",4]]],null,[[],[["bool",15],["option",4]]],null,[[]],[[["field",3]],["bool",15]],[[["dictionaryindextype",4]],["bool",15]],[[["primitivetype",4]],["bool",15]],[[["physicaltype",4]],["bool",15]],[[["schema",3]],["bool",15]],[[["datatype",4]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["intervalunit",4]],["bool",15]],[[["usize",15]],["field",3]],[[["str",15]],[["field",3],["result",6]]],[[],["vec",3]],[[["i64",15]],[["vec",3],["field",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",6],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4]],[[],["hashmap",3]],null,[[],["string",3]],null,[[["field",3]],["bool",15]],[[["physicaltype",4]],["bool",15]],[[["schema",3]],["bool",15]],[[["datatype",4]],["bool",15]],[[["datatype",4],["bool",15],["str",15]]],[[["vec",3],["field",3]]],[[["bool",15],["str",15],["i64",15],["datatype",4]]],[[["string",3],["field",3],["hashmap",3],["vec",3]]],null,[[["option",4],["btreemap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["physicaltype",4]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["field",3]],["result",6]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["string",3],["btreemap",3]]],[[["string",3],["hashmap",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]]],[[["utf8error",3]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["ffi_arrowarray",3]],[[]],[[]],[[]],[[]],[[]],[[["arc",3],["array",8]]],[[["field",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["ffi_arrowarray",3],["box",3],["field",3]],[["result",6],["box",3]]],[[["ffi_arrowschema",3]],[["field",3],["result",6]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["recordbatch",3]],[[]],[[["usize",15]],["arc",3]],[[]],[[]],[[["recordbatch",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["structarray",3]]],[[]],[[]],[[]],[[]],null,[[["recordbatch",3]],["bool",15]],[[["arc",3],["schema",3]]],[[],[["result",6],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[],["schema",3]],[[],["arc",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[["arc",3],["schema",3],["vec",3],["arc",3]],["result",6]],[[["arc",3],["recordbatchoptions",3],["schema",3],["vec",3],["arc",3]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["primitivescalar",3]],[[],["utf8scalar",3]],[[],["binaryscalar",3]],[[],["booleanscalar",3]],[[],["listscalar",3]],[[],["nullscalar",3]],[[],["structscalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["nullscalar",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["option",4]]],[[]],[[["option",4]]],[[]],[[["option",4]]],[[]],[[["bool",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["datatype",4],["option",4]]],[[["option",4],["asref",8],["str",15]]],[[["asref",8],["option",4]]],[[["bool",15],["option",4]]],[[["datatype",4],["option",4],["arc",3]]],[[]],[[["datatype",4],["option",4],["vec",3]]],[[["array",8],["usize",15]],[["box",3],["scalar",8]]],[[["datatype",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["str",15]],[[]],[[],["bool",15]],[[],["arc",3]],[[]],null,null,null,null,null,null,[[["i32",15]],["naivedate",3]],[[["i32",15]],["naivedatetime",3]],[[["i64",15]],["naivedate",3]],[[["i64",15]],["naivedatetime",3]],[[["i32",15]],["naivetime",3]],[[["i32",15]],["naivetime",3]],[[["i64",15]],["naivetime",3]],[[["i64",15]],["naivetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["timeunit",4]],["f64",15]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["days_ms",3]],[[],["months_days_ns",3]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],null,[[],["days_ms",3]],[[],["months_days_ns",3]],[[["days_ms",3]],["bool",15]],[[["months_days_ns",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["datatype",4]],["bool",15]],[[["datatype",4]],["bool",15]],[[["datatype",4]],["bool",15]],[[],["i32",15]],[[],["i32",15]],null,[[["days_ms",3]],["bool",15]],[[["months_days_ns",3]],["bool",15]],[[["usize",15]]],[[]],[[["i32",15]]],[[["i64",15],["i32",15]]],[[],["option",4]],[[],["option",4]],[[],["i64",15]],[[]],[[["usize",15]],[["indexrange",3],["option",4]]],[[["usize",15]],[["indexrange",3],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["f32",15]]],[[["f64",15]]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["u8",15]]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["u8",15]]],[[["u16",15]]],[[["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null],"p":[[8,"Array"],[8,"MutableArray"],[3,"MutableBinaryArray"],[3,"BinaryArray"],[3,"MutableBooleanArray"],[3,"BooleanArray"],[3,"MutableDictionaryArray"],[3,"DictionaryArray"],[3,"MutableFixedSizeBinaryArray"],[3,"FixedSizeBinaryArray"],[3,"MutableFixedSizeListArray"],[3,"FixedSizeListArray"],[3,"MutableListArray"],[3,"ListArray"],[3,"NullArray"],[3,"MutablePrimitiveArray"],[3,"PrimitiveArray"],[3,"StructArray"],[3,"UnionArray"],[3,"MutableUtf8Array"],[3,"Utf8Array"],[3,"Utf8ValuesIter"],[8,"ToFfi"],[8,"Offset"],[8,"GenericBinaryArray"],[8,"TryExtend"],[8,"FromFfi"],[8,"TryPush"],[8,"IterableListArray"],[3,"GrowableBinary"],[3,"GrowableBoolean"],[3,"GrowableFixedSizeBinary"],[3,"GrowableNull"],[3,"GrowablePrimitive"],[3,"GrowableList"],[3,"GrowableStruct"],[3,"GrowableUtf8"],[8,"Growable"],[3,"GrowableDictionary"],[3,"MutableBitmap"],[3,"Bitmap"],[8,"BitChunk"],[3,"ZipValidity"],[3,"BitChunksExact"],[3,"BitChunks"],[3,"BitmapIter"],[3,"SlicesIterator"],[8,"BitChunkIterExact"],[3,"MutableBuffer"],[3,"Buffer"],[4,"PhysicalType"],[4,"DataType"],[4,"IntervalUnit"],[4,"PrimitiveType"],[4,"DictionaryIndexType"],[4,"TimeUnit"],[3,"Field"],[3,"Schema"],[4,"ArrowError"],[3,"Ffi_ArrowArray"],[3,"Ffi_ArrowSchema"],[3,"RecordBatch"],[3,"RecordBatchOptions"],[8,"RecordBatchReader"],[8,"Scalar"],[3,"PrimitiveScalar"],[3,"Utf8Scalar"],[3,"BinaryScalar"],[3,"BooleanScalar"],[3,"ListScalar"],[3,"NullScalar"],[3,"StructScalar"],[8,"NativeType"],[8,"NaturalDataType"],[3,"BitChunkIter"],[3,"IndexRange"],[3,"days_ms"],[3,"months_days_ns"],[8,"Index"],[8,"Relation"],[3,"u8x64"],[3,"u16x32"],[3,"u32x16"],[3,"u64x8"],[3,"i8x64"],[3,"i16x32"],[3,"i32x16"],[3,"i64x8"],[3,"f32x16"],[3,"f64x8"],[8,"NativeSimd"],[8,"Simd"],[8,"FromMaskChunk"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};