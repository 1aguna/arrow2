var searchIndex = JSON.parse('{\
"arrow2":{"doc":"","t":[0,0,3,3,3,3,3,3,3,3,3,8,10,10,11,10,5,0,6,5,5,5,5,8,10,10,11,10,10,11,11,11,10,5,5,5,5,3,3,3,3,8,3,3,3,3,3,3,3,3,3,3,8,10,10,10,3,3,3,8,10,6,6,6,6,6,6,6,6,6,6,6,8,10,8,10,8,10,8,10,10,11,8,10,8,10,10,0,0,3,3,5,3,5,5,5,5,5,5,5,8,16,10,10,10,10,3,3,3,5,5,5,5,0,3,3,0,4,13,13,13,13,13,13,13,13,13,13,13,11,6,0,8,0,0,8,10,8,18,16,16,16,10,10,10,8,16,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,8,16,10,10,10,10,3,8,18,8,10,8,16,10,10,10,3,11,11,11,0,0,8,10,5,8,18,18,10,10,10,10,10,10,5,5,5,5,5,5,0,0,0,5,5,5,5,5,5,5,5,0,5,5,5,5,0,5,5,5,5,5,5,5,5,0,5,5,0,5,5,5,5,0,5,5,5,5,5,5,5,5,0,0,5,5,5,5,0,5,5,5,5,0,5,5,5,5,0,5,5,5,5,0,5,5,5,5,5,4,13,13,13,13,13,5,5,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,0,5,5,5,5,5,5,5,5,0,5,5,5,5,5,0,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,4,13,13,13,13,13,13,5,5,5,5,0,5,0,5,0,6,5,5,5,0,5,5,5,5,5,5,0,5,0,5,5,0,5,0,5,5,5,0,5,5,3,12,12,5,5,5,3,12,12,0,5,5,0,5,5,0,5,5,5,5,0,5,0,5,5,5,5,0,5,5,0,5,5,5,0,0,0,3,3,3,5,5,5,5,5,5,0,3,3,3,3,12,12,12,5,5,5,5,3,0,5,5,5,3,3,8,10,5,6,6,3,0,0,0,3,12,11,11,11,11,11,11,11,4,3,12,11,11,18,18,18,18,18,11,11,11,11,11,3,12,12,12,12,12,3,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,0,17,17,17,3,12,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,18,18,18,18,11,3,3,12,11,11,11,11,11,4,3,12,11,11,18,18,11,11,3,12,12,3,11,11,11,11,4,3,12,11,11,18,18,18,18,11,11,11,11,3,12,12,12,12,3,11,11,11,11,11,11,4,3,12,11,11,18,18,18,11,11,11,3,12,12,12,3,11,11,11,11,11,4,3,12,11,11,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,12,3,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,0,17,17,17,3,12,18,18,18,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,3,17,17,17,3,12,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,11,3,12,11,11,11,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,18,11,3,12,3,11,11,11,4,3,12,11,11,18,11,3,12,3,11,11,11,4,3,12,11,11,18,18,11,11,3,12,12,3,11,11,11,11,4,3,12,11,11,18,18,11,11,3,12,12,3,11,11,11,11,4,3,12,11,11,18,11,3,12,3,11,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,18,11,3,12,3,11,11,11,4,3,12,11,11,3,3,11,11,4,3,12,11,11,18,18,18,11,11,11,3,12,12,12,3,11,11,11,11,11,4,3,12,11,11,18,11,3,12,3,11,11,11,4,3,12,11,11,18,18,11,11,3,12,12,3,11,11,11,11,4,3,12,11,11,18,18,11,11,3,12,12,3,11,11,11,11,4,3,12,11,11,18,11,3,12,3,11,11,11,4,3,12,11,11,18,11,3,12,3,11,11,11,4,3,12,11,11,18,18,11,11,3,12,12,3,11,11,11,11,4,3,12,11,11,18,18,18,18,11,11,11,11,3,12,12,12,12,3,11,11,11,11,11,11,4,3,12,11,11,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,4,3,12,11,11,18,18,18,18,11,11,11,11,3,12,12,12,12,3,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,0,17,17,17,3,12,18,18,18,18,18,11,17,17,17,3,12,18,18,18,18,18,18,18,11,3,4,3,12,11,11,18,18,18,18,11,11,11,11,3,12,12,12,12,3,11,11,11,11,11,11,4,3,12,11,11,18,18,18,18,18,11,11,11,11,11,3,12,12,12,12,12,3,11,11,11,11,11,11,11,4,3,12,11,11,18,18,18,18,18,11,11,11,11,11,3,12,12,12,12,12,3,11,11,11,11,11,11,11,4,3,12,11,11,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,0,4,3,12,11,11,18,18,11,11,3,12,12,3,11,11,11,11,4,3,12,11,11,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,12,3,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,0,5,5,5,3,3,5,3,3,0,0,3,11,11,5,3,11,11,3,12,12,5,5,5,5,5,3,3,5,0,5,5,3,12,12,12,3,12,12,3,12,12,12,12,12,12,3,12,12,12,3,12,12,12,3,12,3,12,12,3,12,12,12,12,12,0,0,0,5,5,3,12,12,12,12,12,12,12,6,3,4,13,12,12,12,12,13,12,12,12,12,5,5,0,3,12,12,12,12,12,3,12,12,12,12,3,12,12,12,12,3,12,12,12,12,8,10,5,3,3,12,12,12,12,12,12,12,4,13,13,13,3,3,3,5,3,3,3,4,13,13,8,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,12,12,12,12,13,12,12,12,12,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,3,12,12,5,5,5,0,4,13,13,13,13,13,13,13,3,4,13,12,12,12,12,13,12,12,12,12,3,12,12,5,5,5,5,0,5,5,0,3,11,11,11,11,11,11,11,11,3,12,8,10,11,0,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,0,3,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,4,13,13,0,5,5,5,3,8,11,11,11,11,11,10,10,10,10,0,0,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["array","growable","GrowableBinary","GrowableBoolean","GrowableFixedSizeBinary","GrowableNull","GrowablePrimitive","GrowableList","GrowableStruct","GrowableUtf8","GrowableDictionary","Growable","extend","extend_validity","as_arc","as_box","make_growable","ord","DynComparator","total_cmp_f32","total_cmp_f64","total_cmp","build_compare","Array","as_any","len","is_empty","data_type","validity","null_count","is_null","is_valid","slice","new_empty_array","new_null_array","clone","get_display","BinaryArray","BinaryPrimitive","BooleanArray","DictionaryArray","DictionaryKey","DictionaryPrimitive","FixedSizeBinaryArray","FixedSizeBinaryPrimitive","FixedSizeListArray","FixedSizeListPrimitive","ListArray","ListPrimitive","NullArray","Primitive","PrimitiveArray","Offset","is_large","to_usize","from_usize","StructArray","Utf8Array","Utf8Primitive","FromFfi","try_from_ffi","Int8Array","Int16Array","Int32Array","Int64Array","Int128Array","Float32Array","Float64Array","UInt8Array","UInt16Array","UInt32Array","UInt64Array","ToArray","to_arc","IntoArray","into_arc","TryFromIterator","try_from_iter","Builder","with_capacity","push","try_push","IterableListArray","value","GenericBinaryArray","values","offsets","bitmap","utils","BitmapIter","SlicesIterator","zip_validity","ZipValidity","is_set","set","set_bit","get_bit","get_bit_unchecked","bytes_for","null_count","BitChunk","Bytes","one","zero","to_ne_bytes","from_ne_bytes","BitChunks","Bitmap","MutableBitmap","quaternary","ternary","binary","unary","buffer","Buffer","MutableBuffer","error","ArrowError","NotYetImplemented","External","Schema","Io","InvalidArgumentError","Ffi","Ipc","ExternalFormat","DictionaryKeyOverflowError","ArithmeticError","Other","from_external_error","Result","trusted_len","TrustedLen","types","simd","FromMaskChunk","from_chunk","NativeSimd","LANES","Native","Chunk","Mask","select","from_chunk","from_incomplete_chunk","Simd","Simd","u8x64","0","u16x32","0","u32x16","0","u64x8","0","i8x64","0","i16x32","0","i32x16","0","i64x8","0","f32x16","0","f64x8","0","BitChunk","Bytes","one","zero","to_ne_bytes","from_ne_bytes","BitChunkIter","NaturalDataType","DATA_TYPE","Relation","is_valid","NativeType","Bytes","to_le_bytes","to_be_bytes","from_be_bytes","days_ms","new","days","milliseconds","compute","aggregate","Sum","simd_sum","sum","SimdOrd","MIN","MAX","max_element","min_element","max","min","new_min","new_max","min_primitive","max_primitive","max_string","min_string","min_boolean","max_boolean","arithmetics","basic","add","add","checked_add","saturating_add","overflowing_add","add_scalar","checked_add_scalar","saturating_add_scalar","overflowing_add_scalar","div","div","checked_div","div_scalar","checked_div_scalar","mul","mul","checked_mul","saturating_mul","overflowing_mul","mul_scalar","checked_mul_scalar","saturating_mul_scalar","overflowing_mul_scalar","pow","powf_scalar","checked_powf_scalar","rem","rem","checked_rem","rem_scalar","checked_rem_scalar","sub","sub","checked_sub","saturating_sub","overflowing_sub","sub_scalar","checked_sub_scalar","saturating_sub_scalar","overflowing_sub_scalar","decimal","add","add","saturating_add","checked_add","adaptive_add","div","div","saturating_div","checked_div","adaptive_div","mul","mul","saturating_mul","checked_mul","adaptive_mul","sub","sub","saturating_sub","checked_sub","adaptive_sub","time","add_duration","subtract_duration","subtract_timestamps","arithmetic","can_arithmetic","Operator","Add","Subtract","Multiply","Divide","Remainder","arithmetic_primitive_scalar","negate","ArrayAdd","Output","add","ArrayCheckedAdd","Output","checked_add","ArraySaturatingAdd","Output","saturating_add","ArrayOverflowingAdd","Output","overflowing_add","ArraySub","Output","sub","ArrayCheckedSub","Output","checked_sub","ArraySaturatingSub","Output","saturating_sub","ArrayOverflowingSub","Output","overflowing_sub","ArrayMul","Output","mul","ArrayCheckedMul","Output","checked_mul","ArraySaturatingMul","Output","saturating_mul","ArrayOverflowingMul","Output","overflowing_mul","ArrayDiv","Output","div","ArrayCheckedDiv","Output","checked_div","ArrayRem","Output","rem","ArrayCheckedRem","Output","checked_rem","NotI128","arity","unary","try_unary","unary_with_bitmap","unary_checked","binary","try_binary","binary_with_bitmap","binary_checked","boolean","and","or","not","is_null","is_not_null","boolean_kleene","or","and","cast","boolean_to_primitive","boolean_to_utf8","dictionary_to_dictionary_values","dictionary_to_dictionary_keys","dictionary_to_values","primitive_to_boolean","primitive_to_utf8","primitive_to_primitive","primitive_to_same_primitive","primitive_to_dictionary","date32_to_date64","date64_to_date32","time32s_to_time32ms","time32ms_to_time32s","time64us_to_time64ns","time64ns_to_time64us","timestamp_to_date64","timestamp_to_date32","time32_to_time64","time64_to_time32","timestamp_to_timestamp","utf8_to_timestamp_ns_scalar","utf8_to_primitive","utf8_to_date32","utf8_to_date64","utf8_to_dictionary","utf8_to_timestamp_ns","can_cast_types","cast","comparison","Operator","Lt","LtEq","Gt","GtEq","Eq","Neq","compare","primitive_compare_scalar","utf8_compare_scalar","can_compare","concat","concatenate","contains","contains","filter","Filter","build_filter","filter","filter_record_batch","hash","hash_primitive","hash_boolean","hash_utf8","hash_binary","hash","can_hash","if_then_else","if_then_else","length","length","can_length","limit","limit","nullif","nullif_primitive","can_nullif","nullif","sort","lexsort","lexsort_to_indices","SortColumn","values","options","sort","sort_to_indices","can_sort","SortOptions","descending","nulls_first","substring","substring","can_substring","take","take","can_take","temporal","hour","can_hour","year","can_year","window","shift","like","like_utf8","nlike_utf8","like_utf8_scalar","nlike_utf8_scalar","regex_match","regex_match","regex_match_scalar","merge_sort","take_arrays","merge_sort","slices","io","csv","read","ByteRecord","Reader","ReaderBuilder","deserialize_batch","deserialize_column","infer_schema","projected_schema","read_rows","infer","write","ByteRecord","Writer","WriterBuilder","SerializeOptions","date_format","time_format","timestamp_format","new_serializer","serialize","write_batch","write_header","CSVError","json","infer_json_schema","infer_json_schema_from_iterator","infer_json_schema_from_seekable","Reader","ReaderBuilder","ToJson","to_json","write_record_batches","ArrayWriter","LineDelimitedWriter","Writer","ipc","gen","File","Block","0","new","offset","set_offset","metaDataLength","set_metaDataLength","bodyLength","set_bodyLength","FooterOffset","Footer","_tab","init_from_table","create","VT_VERSION","VT_SCHEMA","VT_DICTIONARIES","VT_RECORDBATCHES","VT_CUSTOM_METADATA","version","schema","dictionaries","recordBatches","custom_metadata","FooterArgs","version","schema","dictionaries","recordBatches","custom_metadata","FooterBuilder","add_version","add_schema","add_dictionaries","add_recordBatches","add_custom_metadata","new","finish","get_root_as_footer","get_size_prefixed_root_as_footer","root_as_footer","size_prefixed_root_as_footer","root_as_footer_with_opts","size_prefixed_root_as_footer_with_opts","root_as_footer_unchecked","size_prefixed_root_as_footer_unchecked","finish_footer_buffer","finish_size_prefixed_footer_buffer","Message","ENUM_MIN_COMPRESSION_TYPE","ENUM_MAX_COMPRESSION_TYPE","ENUM_VALUES_COMPRESSION_TYPE","CompressionType","0","LZ4_FRAME","ZSTD","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_BODY_COMPRESSION_METHOD","ENUM_MAX_BODY_COMPRESSION_METHOD","ENUM_VALUES_BODY_COMPRESSION_METHOD","BodyCompressionMethod","0","BUFFER","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_MESSAGE_HEADER","ENUM_MAX_MESSAGE_HEADER","ENUM_VALUES_MESSAGE_HEADER","MessageHeader","0","NONE","Schema","DictionaryBatch","RecordBatch","Tensor","SparseTensor","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","MessageHeaderUnionTableOffset","FieldNode","0","new","length","set_length","null_count","set_null_count","BodyCompressionOffset","BodyCompression","_tab","init_from_table","create","VT_CODEC","VT_METHOD","codec","method","BodyCompressionArgs","codec","method","BodyCompressionBuilder","add_codec","add_method","new","finish","RecordBatchOffset","RecordBatch","_tab","init_from_table","create","VT_LENGTH","VT_NODES","VT_BUFFERS","VT_COMPRESSION","length","nodes","buffers","compression","RecordBatchArgs","length","nodes","buffers","compression","RecordBatchBuilder","add_length","add_nodes","add_buffers","add_compression","new","finish","DictionaryBatchOffset","DictionaryBatch","_tab","init_from_table","create","VT_ID","VT_DATA","VT_ISDELTA","id","data","isDelta","DictionaryBatchArgs","id","data","isDelta","DictionaryBatchBuilder","add_id","add_data","add_isDelta","new","finish","MessageOffset","Message","_tab","init_from_table","create","VT_VERSION","VT_HEADER_TYPE","VT_HEADER","VT_BODYLENGTH","VT_CUSTOM_METADATA","version","header_type","header","bodyLength","custom_metadata","header_as_schema","header_as_dictionary_batch","header_as_record_batch","header_as_tensor","header_as_sparse_tensor","MessageArgs","version","header_type","header","bodyLength","custom_metadata","MessageBuilder","add_version","add_header_type","add_header","add_bodyLength","add_custom_metadata","new","finish","get_root_as_message","get_size_prefixed_root_as_message","root_as_message","size_prefixed_root_as_message","root_as_message_with_opts","size_prefixed_root_as_message_with_opts","root_as_message_unchecked","size_prefixed_root_as_message_unchecked","finish_message_buffer","finish_size_prefixed_message_buffer","Schema","ENUM_MIN_METADATA_VERSION","ENUM_MAX_METADATA_VERSION","ENUM_VALUES_METADATA_VERSION","MetadataVersion","0","V1","V2","V3","V4","V5","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_FEATURE","ENUM_MAX_FEATURE","ENUM_VALUES_FEATURE","Feature","0","UNUSED","DICTIONARY_REPLACEMENT","COMPRESSED_BODY","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_UNION_MODE","ENUM_MAX_UNION_MODE","ENUM_VALUES_UNION_MODE","UnionMode","0","Sparse","Dense","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_PRECISION","ENUM_MAX_PRECISION","ENUM_VALUES_PRECISION","Precision","0","HALF","SINGLE","DOUBLE","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_DATE_UNIT","ENUM_MAX_DATE_UNIT","ENUM_VALUES_DATE_UNIT","DateUnit","0","DAY","MILLISECOND","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_TIME_UNIT","ENUM_MAX_TIME_UNIT","ENUM_VALUES_TIME_UNIT","TimeUnit","0","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_INTERVAL_UNIT","ENUM_MAX_INTERVAL_UNIT","ENUM_VALUES_INTERVAL_UNIT","IntervalUnit","0","YEAR_MONTH","DAY_TIME","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_TYPE","ENUM_MAX_TYPE","ENUM_VALUES_TYPE","Type","0","NONE","Null","Int","FloatingPoint","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct_","Union","FixedSizeBinary","FixedSizeList","Map","Duration","LargeBinary","LargeUtf8","LargeList","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","TypeUnionTableOffset","ENUM_MIN_DICTIONARY_KIND","ENUM_MAX_DICTIONARY_KIND","ENUM_VALUES_DICTIONARY_KIND","DictionaryKind","0","DenseArray","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_ENDIANNESS","ENUM_MAX_ENDIANNESS","ENUM_VALUES_ENDIANNESS","Endianness","0","Little","Big","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","Buffer","0","new","offset","set_offset","length","set_length","NullOffset","Null","_tab","init_from_table","create","NullArgs","NullBuilder","new","finish","Struct_Offset","Struct_","_tab","init_from_table","create","Struct_Args","Struct_Builder","new","finish","ListOffset","List","_tab","init_from_table","create","ListArgs","ListBuilder","new","finish","LargeListOffset","LargeList","_tab","init_from_table","create","LargeListArgs","LargeListBuilder","new","finish","FixedSizeListOffset","FixedSizeList","_tab","init_from_table","create","VT_LISTSIZE","listSize","FixedSizeListArgs","listSize","FixedSizeListBuilder","add_listSize","new","finish","MapOffset","Map","_tab","init_from_table","create","VT_KEYSSORTED","keysSorted","MapArgs","keysSorted","MapBuilder","add_keysSorted","new","finish","UnionOffset","Union","_tab","init_from_table","create","VT_MODE","VT_TYPEIDS","mode","typeIds","UnionArgs","mode","typeIds","UnionBuilder","add_mode","add_typeIds","new","finish","IntOffset","Int","_tab","init_from_table","create","VT_BITWIDTH","VT_IS_SIGNED","bitWidth","is_signed","IntArgs","bitWidth","is_signed","IntBuilder","add_bitWidth","add_is_signed","new","finish","FloatingPointOffset","FloatingPoint","_tab","init_from_table","create","VT_PRECISION","precision","FloatingPointArgs","precision","FloatingPointBuilder","add_precision","new","finish","Utf8Offset","Utf8","_tab","init_from_table","create","Utf8Args","Utf8Builder","new","finish","BinaryOffset","Binary","_tab","init_from_table","create","BinaryArgs","BinaryBuilder","new","finish","LargeUtf8Offset","LargeUtf8","_tab","init_from_table","create","LargeUtf8Args","LargeUtf8Builder","new","finish","LargeBinaryOffset","LargeBinary","_tab","init_from_table","create","LargeBinaryArgs","LargeBinaryBuilder","new","finish","FixedSizeBinaryOffset","FixedSizeBinary","_tab","init_from_table","create","VT_BYTEWIDTH","byteWidth","FixedSizeBinaryArgs","byteWidth","FixedSizeBinaryBuilder","add_byteWidth","new","finish","BoolOffset","Bool","_tab","init_from_table","create","BoolArgs","BoolBuilder","new","finish","DecimalOffset","Decimal","_tab","init_from_table","create","VT_PRECISION","VT_SCALE","VT_BITWIDTH","precision","scale","bitWidth","DecimalArgs","precision","scale","bitWidth","DecimalBuilder","add_precision","add_scale","add_bitWidth","new","finish","DateOffset","Date","_tab","init_from_table","create","VT_UNIT","unit","DateArgs","unit","DateBuilder","add_unit","new","finish","TimeOffset","Time","_tab","init_from_table","create","VT_UNIT","VT_BITWIDTH","unit","bitWidth","TimeArgs","unit","bitWidth","TimeBuilder","add_unit","add_bitWidth","new","finish","TimestampOffset","Timestamp","_tab","init_from_table","create","VT_UNIT","VT_TIMEZONE","unit","timezone","TimestampArgs","unit","timezone","TimestampBuilder","add_unit","add_timezone","new","finish","IntervalOffset","Interval","_tab","init_from_table","create","VT_UNIT","unit","IntervalArgs","unit","IntervalBuilder","add_unit","new","finish","DurationOffset","Duration","_tab","init_from_table","create","VT_UNIT","unit","DurationArgs","unit","DurationBuilder","add_unit","new","finish","KeyValueOffset","KeyValue","_tab","init_from_table","create","VT_KEY","VT_VALUE","key","value","KeyValueArgs","key","value","KeyValueBuilder","add_key","add_value","new","finish","DictionaryEncodingOffset","DictionaryEncoding","_tab","init_from_table","create","VT_ID","VT_INDEXTYPE","VT_ISORDERED","VT_DICTIONARYKIND","id","indexType","isOrdered","dictionaryKind","DictionaryEncodingArgs","id","indexType","isOrdered","dictionaryKind","DictionaryEncodingBuilder","add_id","add_indexType","add_isOrdered","add_dictionaryKind","new","finish","FieldOffset","Field","_tab","init_from_table","create","VT_NAME","VT_NULLABLE","VT_TYPE_TYPE","VT_TYPE_","VT_DICTIONARY","VT_CHILDREN","VT_CUSTOM_METADATA","name","nullable","type_type","type_","dictionary","children","custom_metadata","type_as_null","type_as_int","type_as_floating_point","type_as_binary","type_as_utf_8","type_as_bool","type_as_decimal","type_as_date","type_as_time","type_as_timestamp","type_as_interval","type_as_list","type_as_struct_","type_as_union","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_map","type_as_duration","type_as_large_binary","type_as_large_utf_8","type_as_large_list","FieldArgs","name","nullable","type_type","type_","dictionary","children","custom_metadata","FieldBuilder","add_name","add_nullable","add_type_type","add_type_","add_dictionary","add_children","add_custom_metadata","new","finish","SchemaOffset","Schema","_tab","init_from_table","create","VT_ENDIANNESS","VT_FIELDS","VT_CUSTOM_METADATA","VT_FEATURES","endianness","fields","custom_metadata","features","SchemaArgs","endianness","fields","custom_metadata","features","SchemaBuilder","add_endianness","add_fields","add_custom_metadata","add_features","new","finish","get_root_as_schema","get_size_prefixed_root_as_schema","root_as_schema","size_prefixed_root_as_schema","root_as_schema_with_opts","size_prefixed_root_as_schema_with_opts","root_as_schema_unchecked","size_prefixed_root_as_schema_unchecked","finish_schema_buffer","finish_size_prefixed_schema_buffer","SparseTensor","ENUM_MIN_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_MAX_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_VALUES_SPARSE_MATRIX_COMPRESSED_AXIS","SparseMatrixCompressedAxis","0","Row","Column","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","ENUM_MIN_SPARSE_TENSOR_INDEX","ENUM_MAX_SPARSE_TENSOR_INDEX","ENUM_VALUES_SPARSE_TENSOR_INDEX","SparseTensorIndex","0","NONE","SparseTensorIndexCOO","SparseMatrixIndexCSX","SparseTensorIndexCSF","ENUM_MIN","ENUM_MAX","ENUM_VALUES","variant_name","SparseTensorIndexUnionTableOffset","SparseTensorIndexCOOOffset","SparseTensorIndexCOO","_tab","init_from_table","create","VT_INDICESTYPE","VT_INDICESSTRIDES","VT_INDICESBUFFER","VT_ISCANONICAL","indicesType","indicesStrides","indicesBuffer","isCanonical","SparseTensorIndexCOOArgs","indicesType","indicesStrides","indicesBuffer","isCanonical","SparseTensorIndexCOOBuilder","add_indicesType","add_indicesStrides","add_indicesBuffer","add_isCanonical","new","finish","SparseMatrixIndexCSXOffset","SparseMatrixIndexCSX","_tab","init_from_table","create","VT_COMPRESSEDAXIS","VT_INDPTRTYPE","VT_INDPTRBUFFER","VT_INDICESTYPE","VT_INDICESBUFFER","compressedAxis","indptrType","indptrBuffer","indicesType","indicesBuffer","SparseMatrixIndexCSXArgs","compressedAxis","indptrType","indptrBuffer","indicesType","indicesBuffer","SparseMatrixIndexCSXBuilder","add_compressedAxis","add_indptrType","add_indptrBuffer","add_indicesType","add_indicesBuffer","new","finish","SparseTensorIndexCSFOffset","SparseTensorIndexCSF","_tab","init_from_table","create","VT_INDPTRTYPE","VT_INDPTRBUFFERS","VT_INDICESTYPE","VT_INDICESBUFFERS","VT_AXISORDER","indptrType","indptrBuffers","indicesType","indicesBuffers","axisOrder","SparseTensorIndexCSFArgs","indptrType","indptrBuffers","indicesType","indicesBuffers","axisOrder","SparseTensorIndexCSFBuilder","add_indptrType","add_indptrBuffers","add_indicesType","add_indicesBuffers","add_axisOrder","new","finish","SparseTensorOffset","SparseTensor","_tab","init_from_table","create","VT_TYPE_TYPE","VT_TYPE_","VT_SHAPE","VT_NON_ZERO_LENGTH","VT_SPARSEINDEX_TYPE","VT_SPARSEINDEX","VT_DATA","type_type","type_","shape","non_zero_length","sparseIndex_type","sparseIndex","data","type_as_null","type_as_int","type_as_floating_point","type_as_binary","type_as_utf_8","type_as_bool","type_as_decimal","type_as_date","type_as_time","type_as_timestamp","type_as_interval","type_as_list","type_as_struct_","type_as_union","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_map","type_as_duration","type_as_large_binary","type_as_large_utf_8","type_as_large_list","sparseIndex_as_sparse_tensor_index_coo","sparseIndex_as_sparse_matrix_index_csx","sparseIndex_as_sparse_tensor_index_csf","SparseTensorArgs","type_type","type_","shape","non_zero_length","sparseIndex_type","sparseIndex","data","SparseTensorBuilder","add_type_type","add_type_","add_shape","add_non_zero_length","add_sparseIndex_type","add_sparseIndex","add_data","new","finish","get_root_as_sparse_tensor","get_size_prefixed_root_as_sparse_tensor","root_as_sparse_tensor","size_prefixed_root_as_sparse_tensor","root_as_sparse_tensor_with_opts","size_prefixed_root_as_sparse_tensor_with_opts","root_as_sparse_tensor_unchecked","size_prefixed_root_as_sparse_tensor_unchecked","finish_sparse_tensor_buffer","finish_size_prefixed_sparse_tensor_buffer","Tensor","TensorDimOffset","TensorDim","_tab","init_from_table","create","VT_SIZE_","VT_NAME","size_","name","TensorDimArgs","size_","name","TensorDimBuilder","add_size_","add_name","new","finish","TensorOffset","Tensor","_tab","init_from_table","create","VT_TYPE_TYPE","VT_TYPE_","VT_SHAPE","VT_STRIDES","VT_DATA","type_type","type_","shape","strides","data","type_as_null","type_as_int","type_as_floating_point","type_as_binary","type_as_utf_8","type_as_bool","type_as_decimal","type_as_date","type_as_time","type_as_timestamp","type_as_interval","type_as_list","type_as_struct_","type_as_union","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_map","type_as_duration","type_as_large_binary","type_as_large_utf_8","type_as_large_list","TensorArgs","type_type","type_","shape","strides","data","TensorBuilder","add_type_type","add_type_","add_shape","add_strides","add_data","new","finish","get_root_as_tensor","get_size_prefixed_root_as_tensor","root_as_tensor","size_prefixed_root_as_tensor","root_as_tensor_with_opts","size_prefixed_root_as_tensor_with_opts","root_as_tensor_unchecked","size_prefixed_root_as_tensor_unchecked","finish_tensor_buffer","finish_size_prefixed_tensor_buffer","read","read_dictionary","read_record_batch","read_file_metadata","FileMetadata","FileReader","read_stream_metadata","StreamMetadata","StreamReader","write","common","IpcWriteOptions","try_new","metadata_version","encoded_batch","DictionaryTracker","new","insert","EncodedData","ipc_message","arrow_data","write_message","write_continuation","schema_to_bytes","write","write_dictionary","StreamWriter","FileWriter","fb_to_schema","json_integration","to_record_batch","from_record_batch","ArrowJson","schema","batches","dictionaries","ArrowJsonSchema","fields","metadata","ArrowJsonField","name","field_type","nullable","children","dictionary","metadata","ArrowJsonFieldDictionary","id","index_type","is_ordered","DictionaryIndexType","name","is_signed","bit_width","ArrowJsonBatch","columns","ArrowJsonDictionaryBatch","id","data","ArrowJsonColumn","count","validity","data","offset","children","parquet","read","schema","parquet_to_arrow_schema","read_schema_from_metadata","FileMetaData","version","num_rows","created_by","row_groups","key_value_metadata","schema_descr","column_orders","KeyValue","SchemaDescriptor","ParquetType","PrimitiveType","basic_info","logical_type","converted_type","physical_type","GroupType","basic_info","logical_type","converted_type","fields","get_schema","is_type_nullable","statistics","PrimitiveStatistics","data_type","null_count","distinct_count","min_value","max_value","BinaryStatistics","null_count","distinct_count","min_value","max_value","Utf8Statistics","null_count","distinct_count","min_value","max_value","BooleanStatistics","null_count","distinct_count","min_value","max_value","Statistics","data_type","deserialize_statistics","RecordReader","FileMetaData","version","num_rows","created_by","row_groups","key_value_metadata","schema_descr","column_orders","ParquetError","General","OutOfSpec","External","ColumnChunkMetaData","ColumnDescriptor","RowGroupMetaData","decompress","CompressedPage","Decompressor","Page","PageHeader","V1","V2","StreamingIterator","Item","advance","get","next","size_hint","all","any","by_ref","chain","cloned","count","filter","filter_map","flat_map","filter_map_deref","find","fuse","inspect","map","map_deref","map_ref","nth","position","skip","skip_while","take","take_while","rev","fold","for_each","LogicalType","STRING","MAP","LIST","ENUM","DECIMAL","DATE","TIME","TIMESTAMP","INTEGER","UNKNOWN","JSON","BSON","UUID","ParquetType","PrimitiveType","basic_info","logical_type","converted_type","physical_type","GroupType","basic_info","logical_type","converted_type","fields","PhysicalType","Boolean","Int32","Int64","Int96","Float","Double","ByteArray","FixedLenByteArray","PrimitiveConvertedType","Utf8","Enum","Decimal","Date","TimeMillis","TimeMicros","TimestampMillis","TimestampMicros","Uint8","Uint16","Uint32","Uint64","Int8","Int16","Int32","Int64","Json","Bson","Interval","ParquetTimeUnit","MILLIS","MICROS","NANOS","TimestampType","is_adjusted_to_u_t_c","unit","get_page_iterator","read_metadata","page_iter_to_array","write","CompressionCodec","Uncompressed","Snappy","Gzip","Lzo","Brotli","Lz4","Zstd","CompressedPage","ParquetType","PrimitiveType","basic_info","logical_type","converted_type","physical_type","GroupType","basic_info","logical_type","converted_type","fields","WriteOptions","write_statistics","compression","to_parquet_type","to_parquet_schema","write_file","array_to_page","print","write","print","record_batch","RecordBatch","try_new","try_new_with_options","new_empty","schema","num_columns","num_rows","column","columns","RecordBatchOptions","match_field_names","RecordBatchReader","schema","next_batch","temporal_conversions","SECONDS_IN_DAY","MILLISECONDS","MICROSECONDS","NANOSECONDS","MILLISECONDS_IN_DAY","EPOCH_DAYS_FROM_CE","date32_to_datetime","date32_to_date","date64_to_datetime","date64_to_date","time32s_to_time","time32ms_to_time","time64us_to_time","time64ns_to_time","timestamp_s_to_datetime","timestamp_ms_to_datetime","timestamp_us_to_datetime","timestamp_ns_to_datetime","timeunit_scale","datatypes","Field","Schema","DataType","Null","Boolean","Int8","Int16","Int32","Int64","UInt8","UInt16","UInt32","UInt64","Float16","Float32","Float64","Timestamp","Date32","Date64","Time32","Time64","Duration","Interval","Binary","FixedSizeBinary","LargeBinary","Utf8","LargeUtf8","List","FixedSizeList","LargeList","Struct","Union","Dictionary","Decimal","TimeUnit","Second","Millisecond","Microsecond","Nanosecond","IntervalUnit","YearMonth","DayTime","ffi","try_from","create_empty","export_to_c","ArrowArray","ArrowArrayRef","deallocation","validity","buffer","bitmap","child","parent","array","schema","data_type","util","bench_util","seedable_rng","create_primitive_array","create_primitive_array_with_seed","create_boolean_array","create_string_array","lexical_to_bytes","lexical_to_string","total_allocated_bytes","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","equivalent","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_bytes","to_units","to_utf8chars","to_utf16chars","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","equivalent","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","equivalent","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","custom","fmt","source","drop","fmt","fmt","fmt","fmt","fmt","fmt","extend","from","from","from","from","eq","eq","eq","index","default","default","default","clone","from_iter","from","from","from","eq","ne","eq","ne","eq","ne","eq","ne","fmt","advance","get","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","cmp","cmp","cmp","cmp","clone","clone","clone","clone","try_from","hash","hash","hash","hash","partial_cmp","partial_cmp","partial_cmp","partial_cmp","eq","ne","eq","ne","eq","ne","eq","fmt","fmt","fmt","fmt","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","as_any","len","data_type","validity","slice","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","extend","extend_validity","as_arc","as_box","to_arc","to_arc","to_arc","to_arc","to_arc","to_arc","to_arc","into_arc","into_arc","into_arc","into_arc","into_arc","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_iter","with_capacity","try_push","push","with_capacity","try_push","push","with_capacity","try_push","push","with_capacity","try_push","push","with_capacity","try_push","push","with_capacity","push","with_capacity","try_push","push","value","value","values","offsets","values","offsets","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","select","from_chunk","from_incomplete_chunk","is_valid","to_le_bytes","to_be_bytes","from_be_bytes","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","max_element","min_element","max","min","new_min","new_max","add","add","add","checked_add","checked_add","checked_add","saturating_add","saturating_add","saturating_add","overflowing_add","overflowing_add","sub","sub","sub","checked_sub","checked_sub","checked_sub","saturating_sub","saturating_sub","saturating_sub","overflowing_sub","overflowing_sub","mul","mul","mul","checked_mul","checked_mul","checked_mul","saturating_mul","saturating_mul","saturating_mul","overflowing_mul","overflowing_mul","div","div","div","checked_div","checked_div","checked_div","rem","rem","checked_rem","checked_rem","to_json","to_json","to_json","data_type","data_type","data_type","data_type","schema","schema","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","len","extend","next","size_hint","next","size_hint","nth","next","next","size_hint","next","size_hint","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","try_from","try_from","try_from","try_from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","to_little_endian","from_little_endian","push","push","push","push","push","push","push","push","push","push","push","push","push","push","push","push","push","push","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","iter","values_iter","from_slice","from","from_trusted_len_iter","to","new_empty","new_null","from_data","slice","value","value_unchecked","offsets","offsets_buffer","values","values_buffer","iter","values_iter","from_trusted_len_values_iter","from_slice","from_trusted_len_iter_unchecked","from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter","new_empty","new_null","from_data","slice","value","values","to","into","new_empty","new_null","from_data","slice","keys","values","with_capacity","to","iter","new_empty","new_null","from_data","slice","values","value","value_unchecked","size","with_capacity","to","iter","new_empty","new_null","from_data","slice","values","value","default_datatype","with_capacity","to","iter","new_empty","new_null","from_data","value","value_unchecked","slice","offsets_buffer","offsets","values","default_datatype","get_child_field","get_child_type","new_empty","new_null","from_data","slice","from_slice","from_vec","with_capacity","from_trusted_len_iter_unchecked","from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter","new","to","from_values","from_slice","from_trusted_len_values_iter","iter","new_empty","new_null","from_data","slice","values_buffer","values","value","new_empty","new_null","from_data","slice","values","fields","get_fields","from_slice","from","from_trusted_len_values_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter","try_from_trusted_len_iter","to","iter","values_iter","new_empty","new_null","from_data","from_data_unchecked","value_unchecked","slice","value","offsets","offsets_buffer","values","values_buffer","new","new","new","new","new","new","new","new","new","new","new_zeroed","len","is_empty","from_u8_buffer","from_u8_slice","null_count_range","null_count","slice","get_bit","get","get_bit_unchecked","chunks","from_trusted_len_iter_unchecked","from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","iter","new","from_len_zeroed","with_capacity","reserve","push","capacity","push_unchecked","null_count","len","is_empty","extend_constant","get","set","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","new","remainder","remainder_len","remainder_iter","new","new","slots","new","new","new_zeroed","from_bytes","len","is_empty","as_slice","slice","as_ptr","from_trusted_len_iter","try_from_trusted_len_iter","from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","new","with_capacity","from_len_zeroed","reserve","resize","is_empty","len","capacity","clear","as_slice","as_mut_slice","as_ptr","as_mut_ptr","extend_from_slice","push","extend_constant","shrink_to_fit","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","from_trusted_len_iter","from_trusted_len_iter_unchecked","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","from_chunk_iter","from_chunk_iter_unchecked","new","MIN","MAX","new","with_capacity","deserialize","iter","get","is_empty","len","truncate","clear","trim","push_field","position","set_position","range","as_slice","from_path","from_reader","deserialize","into_deserialize","records","into_records","byte_records","into_byte_records","headers","byte_headers","set_headers","set_byte_headers","read_record","read_byte_record","position","is_done","has_headers","get_ref","get_mut","into_inner","seek","seek_raw","new","from_path","from_reader","delimiter","has_headers","flexible","trim","terminator","quote","escape","double_quote","quoting","comment","ascii","buffer_capacity","from_path","from_writer","serialize","write_record","write_byte_record","write_field","flush","into_inner","new","from_path","from_writer","delimiter","has_headers","flexible","terminator","quote_style","quote","double_quote","escape","buffer_capacity","kind","into_kind","is_io_error","position","new","from_buf_reader","schema","next","new","with_schema","infer_schema","with_batch_size","with_projection","build","new","write_row","write_batches","finish","into_inner","schema","new","schema","new","schema","is_finished","try_new","try_new_with_options","write","finish","try_new","try_new_with_options","write","finish","try_new","schema","new","schema","key_value_metadata","column_order","into_thrift","new","column","columns","num_columns","name","fields","try_from_message","try_from_thrift","to_thrift","get_basic_info","name","is_root","check_contains","new_root","from_converted","try_from_primitive","from_physical","try_from_group","from_external_error","file_path","file_offset","type_","descriptor","physical_type","statistics","num_values","compression","compressed_size","uncompressed_size","data_page_offset","has_index_page","index_page_offset","dictionary_page_offset","column_encoding","byte_range","try_from_thrift","into_thrift","new","max_def_level","max_rep_level","path_in_schema","type_","physical_type","name","num_columns","column","columns","num_rows","total_byte_size","compressed_size","try_from_thrift","into_thrift","new","header","uncompressed_size","compressed_size","compression","num_values","statistics","descriptor","new","into_buffers","new","header","dictionary_page","buffer","num_values","encoding","statistics","descriptor","read_from_in_protocol","write_to_out_protocol","read_from_in_protocol","write_to_out_protocol","new","read_from_in_protocol","write_to_out_protocol","write_to_out_protocol","read_from_in_protocol","new","new_dict","set_metadata","metadata","name","data_type","is_nullable","dict_id","dict_is_ordered","try_merge","empty","new","new_from","try_merge","fields","field","field_with_name","fields_with_dict_id","index_of","metadata","column_with_name","deallocation","validity","buffer","bitmap","child","references"],"q":["arrow2","arrow2::array","arrow2::array::growable","","","","","","","","","","","","","","","arrow2::array","arrow2::array::ord","","","","","arrow2::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2","arrow2::bitmap","arrow2::bitmap::utils","","","","","","","","","","","","","","","","","","arrow2::bitmap","","","","","","arrow2","arrow2::buffer","","arrow2","arrow2::error","","","","","","","","","","","","","","arrow2","arrow2::trusted_len","arrow2","arrow2::types","arrow2::types::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types","","","","","","","","","","","","","","","","","","","","arrow2","arrow2::compute","arrow2::compute::aggregate","","","","","","","","","","","","","","","","","","arrow2::compute","arrow2::compute::arithmetics","arrow2::compute::arithmetics::basic","arrow2::compute::arithmetics::basic::add","","","","","","","","arrow2::compute::arithmetics::basic","arrow2::compute::arithmetics::basic::div","","","","arrow2::compute::arithmetics::basic","arrow2::compute::arithmetics::basic::mul","","","","","","","","arrow2::compute::arithmetics::basic","arrow2::compute::arithmetics::basic::pow","","arrow2::compute::arithmetics::basic","arrow2::compute::arithmetics::basic::rem","","","","arrow2::compute::arithmetics::basic","arrow2::compute::arithmetics::basic::sub","","","","","","","","arrow2::compute::arithmetics","arrow2::compute::arithmetics::decimal","arrow2::compute::arithmetics::decimal::add","","","","arrow2::compute::arithmetics::decimal","arrow2::compute::arithmetics::decimal::div","","","","arrow2::compute::arithmetics::decimal","arrow2::compute::arithmetics::decimal::mul","","","","arrow2::compute::arithmetics::decimal","arrow2::compute::arithmetics::decimal::sub","","","","arrow2::compute::arithmetics","arrow2::compute::arithmetics::time","","","arrow2::compute::arithmetics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute","arrow2::compute::arity","","","","","","","","arrow2::compute","arrow2::compute::boolean","","","","","arrow2::compute","arrow2::compute::boolean_kleene","","arrow2::compute","arrow2::compute::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute","arrow2::compute::comparison","","","","","","","","","","","arrow2::compute","arrow2::compute::concat","arrow2::compute","arrow2::compute::contains","arrow2::compute","arrow2::compute::filter","","","","arrow2::compute","arrow2::compute::hash","","","","","","arrow2::compute","arrow2::compute::if_then_else","arrow2::compute","arrow2::compute::length","","arrow2::compute","arrow2::compute::limit","arrow2::compute","arrow2::compute::nullif","","","arrow2::compute","arrow2::compute::sort","","","","","","","","","","","arrow2::compute","arrow2::compute::substring","","arrow2::compute","arrow2::compute::take","","arrow2::compute","arrow2::compute::temporal","","","","arrow2::compute","arrow2::compute::window","arrow2::compute","arrow2::compute::like","","","","arrow2::compute","arrow2::compute::regex_match","","arrow2::compute","arrow2::compute::merge_sort","","","arrow2","arrow2::io","arrow2::io::csv","arrow2::io::csv::read","","","","","","","","","arrow2::io::csv","arrow2::io::csv::write","","","","","","","","","","","arrow2::io::csv","arrow2::io","arrow2::io::json","","","","","","","","","","","arrow2::io","arrow2::io::ipc","arrow2::io::ipc::gen","arrow2::io::ipc::gen::File","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen","arrow2::io::ipc::gen::Message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen","arrow2::io::ipc::gen::Schemaarrow2::io::ipc::gen","arrow2::io::ipc::gen::SparseTensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen","arrow2::io::ipc::gen::Tensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc","arrow2::io::ipc::read","","","","","","","","arrow2::io::ipc","arrow2::io::ipc::write","arrow2::io::ipc::write::common","","","","","","","","","","","","arrow2::io::ipc::write","","","","","arrow2::io::ipc","arrow2::io","arrow2::io::json_integration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io","arrow2::io::parquet","arrow2::io::parquet::read","arrow2::io::parquet::read::schema","","","","","","","","","","","","","","arrow2::io::parquet::read::schema::ParquetType","","","","arrow2::io::parquet::read::schema","arrow2::io::parquet::read::schema::ParquetType","","","","arrow2::io::parquet::read::schema","","arrow2::io::parquet::read","arrow2::io::parquet::read::statistics","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read::ParquetType","","","","arrow2::io::parquet::read","arrow2::io::parquet::read::ParquetType","","","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet","arrow2::io::parquet::write","","","","","","","","","","","arrow2::io::parquet::write::ParquetType","","","","arrow2::io::parquet::write","arrow2::io::parquet::write::ParquetType","","","","arrow2::io::parquet::write","","","","","","","arrow2::io","arrow2::io::print","","arrow2","arrow2::record_batch","","","","","","","","","","","","","","arrow2","arrow2::temporal_conversions","","","","","","","","","","","","","","","","","","","arrow2","arrow2::datatypes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2","arrow2::ffi","","","","","","","","","","","","","","arrow2","arrow2::util","arrow2::util::bench_util","","","","","arrow2::util","","arrow2","arrow2::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array::growable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::bitmap","","","","","","","","","","","","","","","","","","arrow2::bitmap::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::buffer","","","","","","","","","","","","","","","","","","arrow2::error","","","","","","","","","arrow2::types","","","","","","","","","","","","","arrow2::types::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types","","","","","","","","","","","","","arrow2::compute::arithmetics","","","","","","","","","","","","arrow2::compute::comparison","","","","","","","","","","","","arrow2::compute::sort","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::write","","","","","","","","","","","arrow2::io::csv::read","","","","","","","","","","","","","","","","arrow2::io::csv::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::csv","","","","","","","","","arrow2::io::json","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::File","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::Messagearrow2::io::ipc::gen::Schemaarrow2::io::ipc::gen::SparseTensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::Tensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::write::common","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::write","","","","","","","","","","","","","","","","arrow2::io::json_integration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read::schema","","","","","","","","","","arrow2::io::parquet::write","","","","","","","","","","arrow2::io::parquet::read::statistics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::write","","","","","","","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::write","","","","","","","","","","","","","","","","","","","","","","arrow2::record_batch","","","","","","","","","","","","","","","","","","arrow2::datatypes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::ffi","","","","","","","","arrow2::io::csv","","","arrow2::io::csv::write","arrow2::io::csv::read","arrow2::io::csv::write","arrow2::io::csv","arrow2::io::csv::write","arrow2::io::csv::read","arrow2::io::csv::write","","","arrow2::io::csv","arrow2::io::csv::write","","","","","","","arrow2::io::csv::read","arrow2::io::csv::write","","","arrow2::io::parquet::read","","","","","arrow2::io::parquet::write","","arrow2::io::parquet::read","","","","","","","","","arrow2::io::parquet::write","arrow2::io::parquet::read::schema","arrow2::io::parquet::read","","arrow2::io::parquet::write","arrow2::io::parquet::read","","","","","arrow2::io::parquet::write","arrow2::io::parquet::read","","","arrow2::io::parquet::read::schema","arrow2::io::parquet::read","arrow2::io::parquet::write","arrow2::io::parquet::read","arrow2::io::parquet::write","arrow2::io::parquet::read","","","","arrow2::io::parquet::write","arrow2::io::parquet::read","","","arrow2::io::parquet::write","arrow2::io::parquet::read","","","arrow2::io::parquet::write","","arrow2::io::parquet::read","","","arrow2::io::parquet::write","arrow2::io::parquet::read","","","","","","","","","arrow2::io::parquet::write","","arrow2::io::parquet::read","","","arrow2::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array::growable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types","","","","arrow2::types::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::datatypes","","","arrow2::io::parquet::read::statistics","","","","arrow2::io::ipc::read","","arrow2::buffer","arrow2::io::ipc::write","","arrow2::array","","","","","","","","","","","","","","arrow2::bitmap","","","arrow2::buffer","","","","arrow2::error","","","","","arrow2::datatypes","arrow2::io::json_integration","arrow2::io::parquet::read::statistics","","","arrow2::error","arrow2::record_batch","arrow2::array","arrow2::bitmap::utils","arrow2::buffer","arrow2::bitmap::utils","","","","","","","","arrow2::types","","arrow2::io::ipc::read","","arrow2::io::parquet::read","arrow2::array","","","","","","","","","","arrow2::bitmap","arrow2::bitmap::utils","arrow2::buffer","arrow2::types","arrow2::compute::arithmetics","arrow2::compute::comparison","arrow2::compute::sort","","arrow2::io::csv::write","arrow2::io::ipc::gen::File","","arrow2::io::ipc::gen::Message","","","","","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","","","","","arrow2::io::ipc::gen::Tensor","","arrow2::io::ipc::read","arrow2::io::json_integration","arrow2::io::parquet::read::statistics","","","","arrow2::record_batch","arrow2::datatypes","","","","","arrow2::array","arrow2::array::growable","arrow2::bitmap","","arrow2::buffer","","arrow2::types::simd","","","","","","","","","","arrow2::types","arrow2::compute::sort","arrow2::io::csv::write","arrow2::io::json","arrow2::io::ipc::gen::File","arrow2::io::ipc::gen::Message","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","","","arrow2::io::ipc::gen::Tensor","","arrow2::io::ipc::write::common","arrow2::record_batch","arrow2::types","arrow2::io::ipc::gen::Message","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","arrow2::datatypes","","","","arrow2::array","","","","","","","","","","","","","","","","","","","arrow2::bitmap","arrow2::buffer","","arrow2::types","","arrow2::compute::arithmetics","arrow2::compute::comparison","arrow2::io::csv::write","","arrow2::io::ipc::gen::File","","","","arrow2::io::ipc::gen::Message","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","","","","","","","","","","","arrow2::io::ipc::gen::Tensor","","","","arrow2::io::parquet::read::statistics","","","","","","","","arrow2::record_batch","","arrow2::datatypes","","","","","","","","arrow2::types","arrow2::io::ipc::gen::Message","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","arrow2::datatypes","","","","arrow2::buffer","","arrow2::array","","","","","","","","","","","","","","","","","arrow2::array::growable","arrow2::bitmap","","arrow2::bitmap::utils","","arrow2::buffer","","arrow2::error","arrow2::types","arrow2::compute::arithmetics","arrow2::compute::comparison","arrow2::compute::sort","","arrow2::io::csv::write","arrow2::io::json","","","arrow2::io::ipc::gen::File","","arrow2::io::ipc::gen::Message","","","","","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","","","","","arrow2::io::ipc::gen::Tensor","","arrow2::io::ipc::read","","","arrow2::io::ipc::write::common","arrow2::io::json_integration","","","","","","","","arrow2::io::parquet::read::statistics","","","","arrow2::record_batch","","arrow2::datatypes","","","","","arrow2::ffi","arrow2::array","","","","","","","","","","","","","","","","","","","","","","arrow2::error","arrow2::types","arrow2::datatypes","","","arrow2::types::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types","arrow2::compute::arithmetics","arrow2::compute::comparison","arrow2::io::csv::write","arrow2::io::ipc::gen::Message","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","arrow2::datatypes","","","","","","","arrow2::io::parquet::read::statistics","arrow2::array","","","","","","","","","","arrow2::bitmap","","arrow2::buffer","","arrow2::io::json_integration","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::File","","arrow2::io::ipc::gen::Message","","","","","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","","","","","arrow2::io::ipc::gen::Tensor","","arrow2::io::ipc::gen::Message","","","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","","","arrow2::io::ipc::gen::File","arrow2::io::ipc::gen::Message","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","arrow2::io::ipc::gen::File","","arrow2::io::ipc::gen::Message","","","","","","","","arrow2::io::ipc::gen::Schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::SparseTensor","","","","","","arrow2::io::ipc::gen::Tensor","","arrow2::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array::growable","","","","","","","","","arrow2::bitmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::bitmap::utils","","","","","","","","arrow2::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types","arrow2::compute::aggregate","","arrow2::io::csv::write","","","","","","","","","","","","","","","arrow2::io::csv::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::write","","","","","","","","","","","","","","","","","","","","arrow2::io::csv","","","","arrow2::io::json","","","","","","","","","","","","","","","arrow2::io::ipc::read","","","","","","arrow2::io::ipc::write","","","","","","","","arrow2::io::parquet::read","","","","","","","arrow2::io::parquet::read::schema","","","","","","","arrow2::io::parquet::write","","","","","","","","","","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::write","","","","","","","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","arrow2::io::parquet::write","","arrow2::datatypes","","","","","","","","","","","","","","","","","","","","","arrow2::ffi","","","","",""],"d":["This module contains arrays: fixed-length and immutable …","Contains the trait [<code>Growable</code>] and corresponding concreate …","Concrete [<code>Growable</code>] for the [<code>BinaryArray</code>].","Concrete [<code>Growable</code>] for the [<code>BooleanArray</code>].","Concrete [<code>Growable</code>] for the [<code>FixedSizeBinaryArray</code>].","Concrete [<code>Growable</code>] for the [<code>NullArray</code>].","Concrete [<code>Growable</code>] for the [<code>PrimitiveArray</code>].","Concrete [<code>Growable</code>] for the [<code>ListArray</code>].","Concrete [<code>Growable</code>] for the [<code>StructArray</code>].","Concrete [<code>Growable</code>] for the [<code>Utf8Array</code>].","Concrete [<code>Growable</code>] for the [<code>DictionaryArray</code>].","A trait describing a struct that can be extended from …","Extends this [<code>Growable</code>] with elements from the bounded […","Extends this [<code>GrowableArray</code>] with null elements, …","Converts itself to an <code>Arc<dyn Array></code>, thereby finishing …","Converts itself to an <code>Box<dyn Array></code>, thereby finishing …","Creates a new [<code>Growable</code>] from an arbitrary number of …","Contains functions and function factories to order values …","Compare the values at two arbitrary indices in two arrays.","implements comparison using IEEE 754 total ordering for …","implements comparison using IEEE 754 total ordering for …","Total order of all native types whose Rust implementation …","returns a comparison function that compares values at two …","A trait representing an Arrow array. Arrow arrays are …","","The length of the [<code>Array</code>]. Every array has a length …","whether the array is empty","The [<code>DataType</code>] of the [<code>Array</code>]. In combination with […","The validity of the [<code>Array</code>]: every array has an optional […","The number of null slots on this [<code>Array</code>]. This is usually …","Returns whether slot <code>i</code> is null.","Returns whether slot <code>i</code> is valid.","Slices the [<code>Array</code>], returning a new <code>Box<dyn Array></code>.","Creates a new [<code>Array</code>] with a [<code>Array::len</code>] of 0.","Creates a new [<code>Array</code>] of [<code>DataType</code>] <code>data_type</code> and <code>length</code>. …","Clones a dynamic [<code>Array</code>].","","","auxiliary struct used to create a [<code>BinaryArray</code>] out of an …","A [<code>BooleanArray</code>] is arrow’s equivalent to …","An [<code>Array</code>] whose values are encoded by keys. This [<code>Array</code>] …","Trait denoting [<code>NativeType</code>]s that can be used as keys of …","","","auxiliary struct used to create a [<code>BinaryArray</code>] out of an …","","","","","The concrete [<code>Array</code>] of [<code>DataType::Null</code>].","Auxiliary struct used to create a [<code>PrimitiveArray</code>] out of …","A [<code>PrimitiveArray</code>] is arrow’s equivalent to …","Trait describing types that can be used as offsets as per …","","","","","A [<code>Utf8Array</code>] is arrow’s equivalent of …","auxiliary struct used to create a [<code>PrimitiveArray</code>] out of …","Trait describing how a struct imports into itself from the…","","A type definition [<code>PrimitiveArray</code>] for <code>i8</code>","A type definition [<code>PrimitiveArray</code>] for <code>i16</code>","A type definition [<code>PrimitiveArray</code>] for <code>i32</code>","A type definition [<code>PrimitiveArray</code>] for <code>i64</code>","A type definition [<code>PrimitiveArray</code>] for <code>i128</code>","A type definition [<code>PrimitiveArray</code>] for <code>f32</code>","A type definition [<code>PrimitiveArray</code>] for <code>f64</code>","A type definition [<code>PrimitiveArray</code>] for <code>u8</code>","A type definition [<code>PrimitiveArray</code>] for <code>u16</code>","A type definition [<code>PrimitiveArray</code>] for <code>u32</code>","A type definition [<code>PrimitiveArray</code>] for <code>u64</code>","A trait describing the ability of a struct to convert …","","A trait describing the ability of a struct to convert …","","A trait describing the ability of a struct to create …","","A trait describing the ability of a struct to build …","Create the builder with a capacity","Push a new item to the builder. This operation may panic …","Fallible version of <code>push</code>, on which the operation errors …","Trait that list arrays implement for the purposes of DRY.","","Trait that [<code>BinaryArray</code>] and [<code>Utf8Array</code>] implement for …","","","Contains efficient containers of booleans: [<code>Bitmap</code>] and […","","An iterator over bits according to the LSB, i.e. the …","Iterator over a bitmap that returns slices of set regions …","Returns an iterator adapter that returns Option according …","Iterator of Option from an iterator and validity.","Returns whether bit at position <code>i</code> in <code>byte</code> is set or not","Sets bit at position <code>i</code> in <code>byte</code>","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","Returns the number of bytes required to hold <code>bits</code> bits.","","Something that can be use as a chunk of bits. This is …","","","","","","This struct is used to efficiently iterate over bit masks …","An immutable container whose API is optimized to handle …","A mutable container to store boolean values. This …","Apply a bitwise operation <code>op</code> to four inputs and return …","Apply a bitwise operation <code>op</code> to three inputs and return …","Apply a bitwise operation <code>op</code> to two inputs and return the …","Apply a bitwise operation <code>op</code> to one input and return the …","This module contains the core functionality to handle …","Buffer represents a contiguous memory region that can be …","A [<code>MutableBuffer</code>] is Arrow’s interface to build a […","Defines [<code>ArrowError</code>], representing all errors returned by …","Enum with all errors in this crate.","Returned when functionality is not yet available.","Triggered by an external error, such as CSV, serde, …","","","","Error during import or export to/from C Data Interface","Error during import or export to/from IPC","Error during import or export to/from a format","","Error during arithmetic operation. Normally returned …","","Wraps an external error in an <code>ArrowError</code>.","","","An iterator of known, fixed size. A trait denoting Rusts…","This module contains traits to handle all <em>physical</em> types …","","","Convert itself from a slice.","A struct lends itself well to be compiled leveraging SIMD","","The [<code>NativeType</code>] of this struct. E.g. <code>f32</code> for a …","The type holding bits for masks.","","","Convert itself from a slice.","creates a new Self from remaining by populating items …","Trait NativeTypes that have a representation for SIMD …","The SIMD type associated with this trait. This type …","","","","","","","","","","","","","","","","","","","","","Something that can be use as a chunk of bits. This is …","","","","","","An iterator of <code>bool</code> over a [<code>BitChunk</code>]. This iterator is …","Trait denoting anything that has a natural logical […","","","","Trait declaring any type that can be allocated, …","","","","","The in-memory representation of the DayMillisecond …","","","","Contains operators over arrays. This module’s general …","","Object that can reduce itself to a number. This is used …","","Returns the sum of values in the array.","","","","","","","","","","Returns the minimum value in the array, according to the …","Returns the maximum value in the array, according to the …","Returns the maximum value in the string array, according …","Returns the minimum value in the string array, according …","Returns the minimum value in the boolean array.","Returns the maximum value in the boolean array","Defines basic arithmetic kernels for [<code>PrimitiveArray</code>]s.","Defines the arithmetic kernels for <code>PrimitiveArrays</code>.","Definition of basic add operations with primitive arrays","Adds two primitive arrays with the same type. Panics if …","Checked addition of two primitive arrays. If the result …","Saturating addition of two primitive arrays. If the …","Overflowing addition of two primitive arrays. If the …","Adds a scalar T to a primitive array of type T. Panics if …","Checked addition of a scalar T to a primitive array of …","Saturated addition of a scalar T to a primitive array of …","Overflowing addition of a scalar T to a primitive array …","Definition of basic div operations with primitive arrays","Divides two primitive arrays with the same type. Panics …","Checked division of two primitive arrays. If the result …","Divide a primitive array of type T by a scalar T. Panics …","Checked division of a primitive array of type T by a …","Definition of basic mul operations with primitive arrays","Multiplies two primitive arrays with the same type. …","Checked multiplication of two primitive arrays. If the …","Saturating multiplication of two primitive arrays. If the …","Overflowing multiplication of two primitive arrays. If …","Multiply a scalar T to a primitive array of type T. …","Checked multiplication of a scalar T to a primitive array …","Saturated multiplication of a scalar T to a primitive …","Overflowing multiplication of a scalar T to a primitive …","Definition of basic pow operations with primitive arrays","Raises an array of primitives to the power of exponent. …","Checked operation of raising an array of primitives to …","","Remainder of two primitive arrays with the same type. …","Checked remainder of two primitive arrays. If the result …","Remainder a primitive array of type T by a scalar T. …","Checked remainder of a primitive array of type T by a …","Definition of basic sub operations with primitive arrays","Subtracts two primitive arrays with the same type. Panics …","Checked subtraction of two primitive arrays. If the …","Saturating subtraction of two primitive arrays. If the …","Overflowing subtraction of two primitive arrays. If the …","Subtract a scalar T to a primitive array of type T. …","Checked subtraction of a scalar T to a primitive array of …","Saturated subtraction of a scalar T to a primitive array …","Overflowing subtraction of a scalar T to a primitive …","Defines the arithmetic kernels for Decimal <code>PrimitiveArrays</code>…","Defines the addition arithmetic kernels for Decimal …","Adds two decimal primitive arrays with the same precision …","Saturated addition of two decimal primitive arrays with …","Checked addition of two decimal primitive arrays with the …","Adaptive addition of two decimal primitive arrays with …","Defines the division arithmetic kernels for Decimal …","Divide two decimal primitive arrays with the same …","Saturated division of two decimal primitive arrays with …","Checked division of two decimal primitive arrays with the …","Adaptive division of two decimal primitive arrays with …","Defines the multiplication arithmetic kernels for Decimal …","Multiply two decimal primitive arrays with the same …","Saturated multiplication of two decimal primitive arrays …","Checked multiplication of two decimal primitive arrays …","Adaptive multiplication of two decimal primitive arrays …","Defines the subtract arithmetic kernels for Decimal …","Subtract two decimal primitive arrays with the same …","Saturated subtraction of two decimal primitive arrays …","Checked subtract of two decimal primitive arrays with the …","Adaptive subtract of two decimal primitive arrays with …","Defines the arithmetic kernels for adding a Duration to a …","Adds a duration to a time array (Timestamp, Time and …","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps …","Execute an arithmetic operation with two arrays. It uses …","Checks if an array of type <code>datatype</code> can perform basic …","","","","","","","Performs primitive operation on an array and and scalar","Negates values from array.","Defines basic addition operation for primitive arrays","","","Defines checked addition operation for primitive arrays","","","Defines saturating addition operation for primitive arrays","","","Defines Overflowing addition operation for primitive …","","","Defines basic subtraction operation for primitive arrays","","","Defines checked subtraction operation for primitive arrays","","","Defines saturating subtraction operation for primitive …","","","Defines Overflowing subtraction operation for primitive …","","","Defines basic multiplication operation for primitive …","","","Defines checked multiplication operation for primitive …","","","Defines saturating multiplication operation for primitive …","","","Defines Overflowing multiplication operation for …","","","Defines basic division operation for primitive arrays","","","Defines checked division operation for primitive arrays","","","Defines basic reminder operation for primitive arrays","","","Defines checked reminder operation for primitive arrays","","","","Defines kernels suitable to perform operations to …","Applies an unary and infallible function to a primitive …","Version of unary that checks for errors in the closure …","Version of unary that returns an array and bitmap. Used …","Version of unary that creates a mutable bitmap that is …","Applies a binary operations to two primitive arrays. This …","Version of binary that checks for errors in the closure …","Version of binary that returns an array and bitmap. Used …","Version of binary that creates a mutable bitmap that is …","","Performs <code>AND</code> operation on two arrays. If either left or …","Performs <code>OR</code> operation on two arrays. If either left or …","Performs unary <code>NOT</code> operation on an arrays. If value is …","Returns a non-null [BooleanArray] with whether each value …","Returns a non-null [BooleanArray] with whether each value …","","Logical ‘or’ with Kleene logic","Logical ‘and’ with Kleene logic","","Casts the [<code>BooleanArray</code>] to a [<code>PrimitiveArray</code>].","Casts the [<code>BooleanArray</code>] to a [<code>Utf8Array</code>], casting trues …","Casts a [<code>DictionaryArray</code>] to a new [<code>DictionaryArray</code>] by …","Casts a [<code>DictionaryArray</code>] to a new [<code>DictionaryArray</code>] …","Casts a [<code>DictionaryArray</code>] to its values’ [<code>DataType</code>], …","Returns a [<code>BooleanArray</code>] where every element is different …","Returns a [<code>Utf8Array</code>] where every element is the utf8 …","Cast [<code>PrimitiveArray</code>] to a [<code>PrimitiveArray</code>] of another …","Cast [<code>PrimitiveArray</code>] to a [<code>PrimitiveArray</code>] of the same …","Cast [<code>PrimitiveArray</code>] to [<code>DictionaryArray</code>]. Also known as …","","","","","","","","","","","","Accepts a string in RFC3339 / ISO8601 standard format and …","Casts a [<code>Utf8Array</code>] to a [<code>PrimitiveArray</code>], making any …","Casts a [<code>Utf8Array</code>] to a Date32 primitive, making any …","Casts a [<code>Utf8Array</code>] to a Date64 primitive, making any …","Cast [<code>Utf8Array</code>] to [<code>DictionaryArray</code>], also known as …","The array version of [<code>utf8_to_timestamp_ns_scalar</code>].","Return true if a value of type <code>from_type</code> can be cast into …","Cast <code>array</code> to the provided data type and return a new […","Defines basic comparison kernels for [<code>PrimitiveArray</code>]s.","","","","","","","","","","","Checks if an array of type <code>datatype</code> can be compared with …","Defines concat kernel for <code>ArrayRef</code>","Concatenate multiple [Array] of the same type into a …","","","","Function that can filter arbitrary arrays","Returns a prepared function optimized to filter multiple …","Filters an [Array], returning elements matching the …","Returns a new [RecordBatch] with arrays containing only …","","Element-wise hash of a [<code>PrimitiveArray</code>]. Validity is …","Element-wise hash of a [<code>BooleanArray</code>]. Validity is …","Element-wise hash of a [<code>Utf8Array</code>]. Validity is preserved.","Element-wise hash of a [<code>BinaryArray</code>]. Validity is …","Returns the element-wise hash of an [<code>Array</code>]. Validity is …","Checks if an array of type <code>datatype</code> can perform hash …","","Returns the values from <code>lhs</code> if the predicate is <code>true</code> or …","Defines kernel for length of composite arrays","Returns an array of integers with the number of bytes on …","Checks if an array of type <code>datatype</code> can perform length …","","Returns the array, taking only the number of elements …","","Returns an array whose validity is null iff <code>lhs == rhs</code> or …","Returns whether [<code>nulliff</code>] is implemented for the …","Returns an array whose validity is null iff <code>lhs == rhs</code> or …","Defines sort kernel for <code>ArrayRef</code>","Sort a list of [<code>Array</code>] using [<code>SortOptions</code>] provided for …","Sort elements lexicographically from a list of <code>ArrayRef</code> …","One column to be used in lexicographical sort","","","Sort the <code>ArrayRef</code> using <code>SortOptions</code>.","Sort elements from <code>ArrayRef</code> into an unsigned integer (…","Checks if an array of type <code>datatype</code> can be sorted","Options that define how sort kernels should behave","Whether to sort in descending order","Whether to sort nulls first","Defines kernel to extract a substring of a [Large…","Returns an ArrayRef with a substring starting from <code>start</code> …","Checks if an array of type <code>datatype</code> can perform substring …","Defines take kernel for [<code>Array</code>]","","Checks if an array of type <code>datatype</code> can perform take …","Defines temporal kernels for time and date related …","Extracts the hours of a given temporal array as an array …","Checks if an array of type <code>datatype</code> can perform hour …","Extracts the hours of a given temporal array as an array …","Checks if an array of type <code>datatype</code> can perform year …","Defines windowing functions, like <code>shift</code>ing","Shifts array by defined number of items (to left or right)…","","Returns <code>lhs LIKE rhs</code> operation on two [<code>Utf8Array</code>].","","Returns <code>lhs LIKE rhs</code> operation.","","","","Regex matches","This module exposes functions to perform merge-sorts.","Takes N arrays together through <code>slices</code> under the …","Combines two sorted [Array]s of the same [DataType] into …","Returns a vector of slices from different sorted arrays …","","Transfer data between the Arrow memory format and CSV …","","A single CSV record stored as raw bytes.","A already configured CSV reader.","Builds a CSV reader with various configuration knobs.","Deserializes rows [<code>ByteRecord</code>] into a [<code>RecordBatch</code>]. Note …","","Infer the schema of a CSV file by reading through the …","","Reads <code>len</code> rows from the CSV into Bytes, skiping <code>skip</code> This …","Infer the data type of a record","","A single CSV record stored as raw bytes.","A already configured CSV writer.","Builds a CSV writer with various configuration knobs.","","","","","Returns an Iterator that returns items of <code>Array</code> as <code>Vec<u8></code>…","Serializes a [<code>RecordBatch</code>] as vector of <code>ByteRecord</code>. The …","Writes the data in a <code>RecordBatch</code> to <code>writer</code> according to …","Writes a header to <code>writer</code> according to <code>schema</code>","An error that can occur when processing CSV data.","Convert data between the Arrow memory format and JSON …","Infer the fields of a JSON file by reading the first n …","Infer the fields of a JSON file by reading all items from …","Infer the fields of a JSON file by reading the first n …","JSON Reader","JSON file reader builder","","Generate a JSON representation","Serializes a [<code>RecordBatch</code>] into Json","A JSON writer which serializes [<code>RecordBatch</code>]es to JSON …","A JSON writer which serializes [<code>RecordBatch</code>]es to newline …","A JSON writer which serializes [<code>RecordBatch</code>]es to a …","","Generated code","","","","","Index to the start of the RecordBlock (note this is past …","","Length of the metadata","","Length of the data (this is aligned so there can be a gap …","","","Arrow File metadata","","","","","","","","","","","","","User-defined metadata","","","","","","","","","","","","","","","","","Verifies that a buffer of bytes contains a <code>Footer</code> and …","Verifies that a buffer of bytes contains a size prefixed …","Verifies, with the given options, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer …","Assumes, without verification, that a buffer of bytes …","Assumes, without verification, that a buffer of bytes …","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","Provided for forward compatibility in case we need to …","","Each constituent buffer is first compressed with the …","","","","Returns the variant’s name or “” if unknown.","","","","The root Message type This union enables us to easily …","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","Data structures for describing a table row batch (a …","","","The number of value slots in the Arrow array at this …","","The number of observed nulls. Fields with null_count == 0 …","","","Optional compression for the memory buffers constituting …","","","","","","Compressor library","Indicates the way the record batch body was compressed","","","","","","","","","","A data header describing the shared memory layout of a “…","","","","","","","","number of records / rows. The arrays in the batch should …","Nodes correspond to the pre-ordered flattened logical …","Buffers correspond to the pre-ordered flattened buffer …","Optional compression of the message body","","","","","","","","","","","","","","For sending dictionary encoding information. Any Field …","","","","","","","","","If isDelta is true the values in the dictionary are to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that a buffer of bytes contains a <code>Message</code> and …","Verifies that a buffer of bytes contains a size prefixed …","Verifies, with the given options, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer …","Assumes, without verification, that a buffer of bytes …","Assumes, without verification, that a buffer of bytes …","","","","","","","","","0.1.0 (October 2016).","0.2.0 (February 2017). Non-backwards compatible with V1.","0.3.0 -> 0.7.1 (May - December 2017). Non-backwards …","= 0.8.0 (December 2017). Non-backwards compatible with V3.","= 1.0.0 (July 2020. Backwards compatible with V4 (V5 …","","","","Returns the variant’s name or “” if unknown.","","","","Represents Arrow Features that might not have full support…","","Needed to make flatbuffers happy.","The stream makes use of multiple full dictionaries with …","The stream makes use of compressed bodies as described in …","","","","Returns the variant’s name or “” if unknown.","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","Top-level Type value, enabling extensible type-specific …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","","Dictionary encoding metadata Maintained for forwards …","","","","","","Returns the variant’s name or “” if unknown.","","","","Endianness of the platform producing the data","","","","","","","Returns the variant’s name or “” if unknown.","A Buffer represents a single contiguous memory segment","","","The relative offset into the shared memory page where the …","","The absolute length (in bytes) of the memory buffer. The …","","","These are stored in the flatbuffer in the Type union below","","","","","","","","","A Struct_ in the flatbuffer metadata is the same as an …","","","","","","","","","","","","","","","","","","Same as List, but with 64-bit offsets, allowing to …","","","","","","","","","","","","","","Number of list items per value","","","","","","","","A Map is a logical nested type that is represented as","","","","","Set to true if the keys within each value are sorted","","","","","","","","A union is a complex type with children in Field By …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unicode with UTF-8 encoding","","","","","","","","","Opaque binary data","","","","","","","","","Same as Utf8, but with 64-bit offsets, allowing to …","","","","","","","","","Same as Binary, but with 64-bit offsets, allowing to …","","","","","","","","","","","","","","Number of bytes per value","","","","","","","","","","","","","","","","","Exact decimal value represented as an integer value in two…","","","","","","","Total number of decimal digits","Number of digits after the decimal point “.”","Number of bits per value. The only accepted widths are …","","","","","","","","","","","","Date is either a 32-bit or 64-bit type representing …","","","","","","","","","","","","","Time type. The physical storage type depends on the unit","","","","","","","","","","","","","","","","","Time elapsed from the Unix epoch, 00:00:00.000 on 1 …","","","","","","","The time zone is a string indicating the name of a time …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","user defined key value pairs to add custom metadata to …","","","","","","","","","","","","","","","","","","","","","","","","","The known dictionary id in the application where this …","The dictionary indices are constrained to be non-negative …","By default, dictionaries are not ordered, or the order …","","","","","","","","","","","","","","","A field represents a named column in a record / row batch …","","","","","","","","","","","Name is not required, in i.e. a List","Whether or not this field can contain nulls. Should be …","","This is the type of the decoded value if the field is …","Present only if the field is dictionary encoded.","children apply only to nested data types like Struct, …","User-defined metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Schema describes the columns in a row batch","","","","","","","","endianness of the buffer it is Little Endian by default …","","","Features used in the stream/file.","","","","","","","","","","","","","","","Verifies that a buffer of bytes contains a <code>Schema</code> and …","Verifies that a buffer of bytes contains a size prefixed …","Verifies, with the given options, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer …","Assumes, without verification, that a buffer of bytes …","Assumes, without verification, that a buffer of bytes …","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","","","EXPERIMENTAL: Data structures for sparse tensors …","","","","","","","","The type of values in indicesBuffer","Non-negative byte offsets to advance one value cell along …","The location and size of the indices matrix’s data","This flag is true if and only if the indices matrix is …","","","","","","","","","","","","","","Compressed Sparse format, that is matrix-specific.","","","","","","","","","Which axis, row or column, is compressed","The type of values in indptrBuffer","indptrBuffer stores the location and size of indptr array …","The type of values in indicesBuffer","indicesBuffer stores the location and size of the array …","","","","","","","","","","","","","","","","Compressed Sparse Fiber (CSF) sparse tensor index.","","","","","","","","","CSF is a generalization of compressed sparse row (CSR) …","indptrBuffers stores the sparsity structure. Each two …","The type of values in indicesBuffers","indicesBuffers stores values of nodes. Each tensor …","axisOrder stores the sequence in which dimensions were …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of data contained in a value cell. Currently …","The dimensions of the tensor, optionally named.","The number of non-zero values in a sparse tensor.","","Sparse tensor index","The location and size of the tensor’s data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that a buffer of bytes contains a <code>SparseTensor</code> …","Verifies that a buffer of bytes contains a size prefixed …","Verifies, with the given options, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer …","Assumes, without verification, that a buffer of bytes …","Assumes, without verification, that a buffer of bytes …","","","","","Data structures for dense tensors Shape data for a single …","","","","","","Length of dimension","Name of the dimension, optional","","","","","","","","","","","","","","","","","","","","The type of data contained in a value cell. Currently …","The dimensions of the tensor, optionally named","Non-negative byte offsets to advance one value cell along …","The location and size of the tensor’s data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that a buffer of bytes contains a <code>Tensor</code> and …","Verifies that a buffer of bytes contains a size prefixed …","Verifies, with the given options, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer …","Assumes, without verification, that a buffer of bytes …","Assumes, without verification, that a buffer of bytes …","","","","Read the dictionary from the buffer and provided metadata,…","Creates a record batch from binary data using the …","Read the IPC file’s metadata","","Arrow File reader","Reads the metadata of the stream","","Arrow Stream reader","","","IPC write options used to control the behaviour of the …","Try create IpcWriteOptions, checking for incompatible …","","","Keeps track of dictionaries that have been written, to …","","Keep track of the dictionary with the given ID and …","Stores the encoded data, which is an …","An encoded gen::Schema::Message","Arrow buffers to be written, should be an empty vec for …","Write a message’s IPC data and buffers, returning …","Write a record batch to the writer, writing the message …","Converts","","","","","Deserialize a Schema table from IPC format to Schema data …","Utils for JSON integration testing","","","A struct that represents an Arrow file with a schema and …","","","","A struct that partially reads the Arrow JSON schema.","","","Fields are left as JSON <code>Value</code> as they vary by <code>DataType</code>","","","","","","","","","","","","","","","A struct that partially reads the Arrow JSON record batch","","A struct that partially reads the Arrow JSON dictionary …","","","A struct that partially reads the Arrow JSON column/array","","","","","","","","","Convert parquet schema to arrow schema","Reads an arrow schema from Parquet’s file metadata. …","Metadata for a Parquet file.","version of this file.","number of rows in the file.","String message for application that wrote this file.","The row groups of this file","key_value_metadata of this file.","schema descriptor.","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","","A schema descriptor. This encapsulates the top-level …","Representation of a Parquet type. Used to describe …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait denoting a deserialized parquet statistics (into …","","","Single threaded iterator of [<code>RecordBatch</code>] from a parquet …","Metadata for a Parquet file.","version of this file.","number of rows in the file.","String message for application that wrote this file.","The row groups of this file","key_value_metadata of this file.","schema descriptor.","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","","General Parquet error.","When the parquet file is known to be out of spec.","","Metadata for a column chunk.","A descriptor for leaf-level primitive columns. This …","Metadata for a row group.","Decompresses the page, using <code>buffer</code> for decompression.","A [<code>CompressedPage</code>] is compressed, encoded representation …","Decompressor that allows re-using the page buffer of […","A [<code>Page</code>] is an uncompressed, encoded representation of a …","","","","An interface for dealing with streaming iterators.","The type of the elements being iterated over.","Advances the iterator to the next element.","Returns a reference to the current element of the …","Advances the iterator and returns the next value.","Returns the bounds on the remaining length of the …","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","Borrows an iterator, rather than consuming it.","Consumes two iterators and returns a new iterator that …","Produces a normal, non-streaming, iterator by cloning the …","Consumes the iterator, counting the number of remaining …","Creates an iterator which uses a closure to determine if …","Creates an iterator which both filters and maps by …","Creates an iterator which flattens iterators obtained by …","Creates a regular, non-streaming iterator which both …","Returns the first element of the iterator that satisfies …","Creates an iterator which is “well behaved” at the …","Call a closure on each element, passing the element on. …","Creates an iterator which transforms elements of this …","Creates a regular, non-streaming iterator which …","Creates an iterator which transforms elements of this …","Consumes the first <code>n</code> elements of the iterator, returning …","Returns the index of the first element of the iterator …","Creates an iterator which skips the first <code>n</code> elements.","Creates an iterator that skips initial elements matching …","Creates an iterator which only returns the first <code>n</code> …","Creates an iterator which only returns initial elements …","Creates an iterator which returns elemens in the opposite …","Reduces the iterator’s elements to a single, final …","Calls a closure on each element of an iterator.","","","","","","","","","","","","","","","Representation of a Parquet type. Used to describe …","","","","","","","","","","","","","","","","","","","","","","an enum is converted into a binary field","A decimal value.","A Date","A time","A time.","A date/time combination","A date/time combination","An unsigned integer value.","","","","A signed integer value.","","","","An embedded JSON document","An embedded BSON document","An interval of time","","","","","Timestamp logical type annotation","","","Creates a new iterator of compressed pages.","Reads parquets’ metadata.","","","Supported compression algorithms.","","","","","","","","A [<code>CompressedPage</code>] is compressed, encoded representation …","Representation of a Parquet type. Used to describe …","","","","","","","","","","","","","","","Creates a parquet [<code>SchemaDescriptor</code>] from a [<code>Schema</code>].","Writes","","","Returns a visual representation of multiple [<code>RecordBatch</code>]…","Prints a visual representation of record batches to stdout","A two-dimensional batch of column-oriented data with a …","A two-dimensional batch of column-oriented data with a …","Creates a <code>RecordBatch</code> from a schema and columns.","Creates a <code>RecordBatch</code> from a schema and columns, with …","Creates a new empty [<code>RecordBatch</code>].","Returns the <code>Schema</code> of the record batch.","Returns the number of columns in the record batch.","Returns the number of rows in each column.","Get a reference to a column’s array by index.","Get a reference to all columns in the record batch.","Options that control the behaviour used when creating a […","Match field names of structs and lists. If set to <code>true</code>, …","Trait for types that can read <code>RecordBatch</code>’s.","Returns the schema of this <code>RecordBatchReader</code>.","Reads the next <code>RecordBatch</code>.","Conversion methods for dates and times.","Number of seconds in a day","Number of milliseconds in a second","Number of microseconds in a second","Number of nanoseconds in a second","Number of milliseconds in a day","Number of days between 0001-01-01 and 1970-01-01","converts a <code>i32</code> representing a <code>date32</code> to [<code>NaiveDateTime</code>]","converts a <code>i32</code> representing a <code>date32</code> to [<code>NaiveDate</code>]","converts a <code>i64</code> representing a <code>date64</code> to [<code>NaiveDateTime</code>]","converts a <code>i64</code> representing a <code>date64</code> to [<code>NaiveDate</code>]","converts a <code>i32</code> representing a <code>time32(s)</code> to [<code>NaiveDateTime</code>]","converts a <code>i32</code> representing a <code>time32(ms)</code> to [<code>NaiveDateTime</code>…","converts a <code>i64</code> representing a <code>time64(us)</code> to [<code>NaiveDateTime</code>…","converts a <code>i64</code> representing a <code>time64(ns)</code> to [<code>NaiveDateTime</code>…","converts a <code>i64</code> representing a <code>timestamp(s)</code> to […","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to […","converts a <code>i64</code> representing a <code>timestamp(us)</code> to […","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to […","Calculates the scale factor between two TimeUnits. The …","This module contains logical types defined in the Arrow …","A logical [<code>DataType</code>] and its associated metadata per …","An ordered sequence of [<code>Field</code>] with optional metadata.","The set of datatypes that are supported by this …","Null type, representing an array without values or …","A boolean datatype representing the values <code>true</code> and <code>false</code>.","A signed 8-bit integer.","A signed 16-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","An unsigned 8-bit integer.","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","A 16-bit floating point number.","A 32-bit floating point number.","A 64-bit floating point number.","A timestamp with an optional timezone.","A 32-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","A 32-bit time representing the elapsed time since …","A 64-bit time representing the elapsed time since …","Measure of elapsed time in either seconds, milliseconds, …","A “calendar” interval which models types that don’t …","Opaque binary data of variable length.","Opaque binary data of fixed size. Enum parameter …","Opaque binary data of variable length and 64-bit offsets.","A variable-length string in Unicode with UTF-8 encoding.","A variable-length string in Unicode with UFT-8 encoding …","A list of some logical data type with variable length.","A list of some logical data type with fixed length.","A list of some logical data type with variable length and …","A nested datatype that contains a number of sub-fields.","A nested datatype that can represent slots of differing …","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","Decimal value with precision and scale precision is the …","An absolute length of time in seconds, milliseconds, …","Time in seconds.","Time in milliseconds.","Time in microseconds.","Time in nanoseconds.","YEAR_MONTH or DAY_TIME interval in SQL style.","Indicates the number of elapsed whole months, stored as …","Indicates the number of elapsed days and milliseconds, …","Contains interfaces to use the C Data Interface.","Reads a valid <code>ffi</code> interface into a <code>Box<dyn Array></code>","","Exports an <code>Array</code> to the C data interface.","Struct used to move an Array from and to the C Data …","","","returns the null bit buffer. Rust implementation uses a …","Safety","Safety","","","","","","","Utils to make benchmarking easier","Returns fixed seedable RNG","Creates an random (but fixed-seeded) array of a given …","","Creates an random (but fixed-seeded) array of a given …","Creates an random (but fixed-seeded) array of a given …","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>","Returns the total number of bytes allocated to buffers by …nitializes itself with a capacity.","Pushes a new item to this structreates a new [<code>BooleanArray</code>] out of a slice of Optional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a record batch from struct arrayeturns an iterator of <code>Option<&[u8]></code>","Returns an iterator of <code>&[u8]</code>","","Creates a new [<code>BinaryArray</code>] from a slice of <code>&[u8]</code>.","Creates a [<code>BinaryArray</code>] from an iterator of trusted …","","","","","","Returns the element at index <code>i</code> as &str","Returns the element at index <code>i</code> as &str","","","","","constructs a new iterator","Returns an iterator of <code>bool</code>","Creates a new [<code>BooleanArray</code>] from an [<code>TrustedLen</code>] of <code>bool</code>.","Creates a new [<code>BooleanArray</code>] from a slice of <code>bool</code>.","Creates a [<code>BooleanArray</code>] from an iterator of trusted …","Creates a [<code>BooleanArray</code>] from a [<code>TrustedLen</code>].","Creates a [<code>BooleanArray</code>] from an falible iterator of …","Creates a [<code>BooleanArray</code>] from a [<code>TrustedLen</code>].","Returns a new empty [<code>BooleanArray</code>].","Returns a new [<code>BooleanArray</code>] whose all slots are null / …","The canonical method to create a [<code>BooleanArray</code>] out of …","Returns a slice of this [<code>BooleanArray</code>].","Returns the element at index <code>i</code> as &str","Returns the values bitmap of this [<code>BooleanArray</code>].","","","Returns a new empty [<code>DictionaryArray</code>].","Returns an [<code>DictionaryArray</code>] whose all elements are null","The canonical method to create a new [<code>DictionaryArray</code>].","Creates a new [<code>DictionaryArray</code>] by slicing the existing […","Returns the keys of the [<code>DictionaryArray</code>]. These keys can …","Returns the values of the [<code>DictionaryArray</code>].","","","constructs a new iterator","","","","","","","Returns the element at index <code>i</code> as &str","","","","constructs a new iterator","","","","","","","","Initializes a new [<code>ListPrimitive</code>] with a pre-allocated …","","constructs a new iterator","","","","Returns the element at index <code>i</code>","Returns the element at index <code>i</code> as &str","","","","","","","","","Returns a new null array","","","","","Initializes a new [<code>Primitive</code>] with a pre-allocated number …","Creates a [<code>Primitive</code>] from an iterator of trusted length.","Creates a [<code>Primitive</code>] from a [<code>TrustedLen</code>].","Creates a [<code>PrimitiveArray</code>] from an fallible iterator of …","Creates a [<code>PrimitiveArray</code>] from an fallible iterator of …","Initializes itself with a capacity.","Converts itself to a [<code>PrimitiveArray</code>].","Creates a new array out an iterator over values","Creates a new array out an iterator over values","Creates a new array out an iterator over values","constructs a new iterator","Returns a new empty [<code>PrimitiveArray</code>].","Returns a new [<code>PrimitiveArray</code>] whose all slots are null / …","The canonical method to create a [<code>PrimitiveArray</code>] out of …","Returns a slice of this [<code>PrimitiveArray</code>].","The values [<code>Buffer</code>]. Often used to clone the buffer.","The values as a slice.","Safe method to retrieve the value at slot <code>i</code>. Equivalent …","","","","","","","","Creates a new [<code>Utf8Array</code>] from a slice of <code>&str</code>. This is a …","Creates a new [<code>Utf8Array</code>] from a slice of <code>&str</code>.","Creates a new [<code>Utf8Array</code>] from a [<code>TrustedLen</code>] of <code>&str</code>.","Creates a [<code>Utf8Array</code>] from an iterator of trusted length.","Creates a [<code>Utf8Array</code>] from an iterator of trusted length.","Creates a [<code>PrimitiveArray</code>] from an falible iterator of …","","Returns an iterator of <code>Option<&str></code>","Returns an iterator of <code>&str</code>","Returns a new empty [<code>Utf8Array</code>].","Returns a new [<code>Utf8Array</code>] whose all slots are null / <code>None</code>.","The canonical method to create a [<code>Utf8Array</code>] out of …","The same as [<code>Utf8Array::from_data</code>] but does not check for …","Returns the element at index <code>i</code> as &str","Returns a slice of this [<code>Utf8Array</code>].","Returns the element at index <code>i</code> as &str","Returns the offsets of this [<code>Utf8Array</code>].","Returns the offset [<code>Buffer</code>] of this [<code>Utf8Array</code>].","Returns the values of this [<code>Utf8Array</code>] as a slice of <code>u8</code>","Returns the values [<code>Buffer</code>] of this [<code>Utf8Array</code>]","Panics","Panics","Panics","","","Panics","Panics","","","Initializes an empty [<code>Bitmap</code>].","Initializes an new [<code>Bitmap</code>] filled with unset values.","Returns the length of the [<code>Bitmap</code>].","Returns whether [<code>Bitmap</code>] is empty","Creates a new [<code>Bitmap</code>] from [<code>MutableBuffer</code>] and a length.","Creates a new [<code>Bitmap</code>] from [<code>Bytes</code>] and a length.","Counts the nulls (unset bits) starting from <code>offset</code> bits …","Returns the number of unset bits on this [<code>Bitmap</code>].","Slices <code>self</code>, offseting by <code>offset</code> and truncating up to …","Returns whether the bit at position <code>i</code> is set.","Returns whether the bit at position <code>i</code> is set.","Unsafely returns whether the bit at position <code>i</code> is set.","Returns an iterator over bits in chunks of <code>T</code>, which is …","Creates a new [<code>Bitmap</code>] from an iterator of booleans.","Creates a new [<code>Bitmap</code>] from an iterator of booleans.","Creates a new [<code>Bitmap</code>] from a fallible iterator of …","Creates a new [<code>Bitmap</code>] from a fallible iterator of …","constructs a new iterator","Initializes an empty [<code>MutableBitmap</code>].","Initializes a zeroed [<code>MutableBitmap</code>].","Initializes an a pre-allocated [<code>MutableBitmap</code>] with …","Initializes an a pre-allocated [<code>MutableBitmap</code>] with …","Pushes a new bit to the [<code>MutableBitmap</code>], re-sizing it if …","","Pushes a new bit to the [<code>MutableBitmap</code>]","Returns the number of unset bits on this [<code>MutableBitmap</code>].","Returns the length of the [<code>MutableBitmap</code>].","Returns whether [<code>MutableBitmap</code>] is empty.","Extends [<code>MutableBitmap</code>] by <code>additional</code> values of constant …","Returns whether the position <code>index</code> is set.","Sets the position <code>index</code> to <code>value</code>","Extends <code>self</code> from a [<code>TrustedLen</code>] iterator.","Extends <code>self</code> from an iterator of trusted len.","Creates a new [<code>Bitmap</code>] from an iterator of booleans.","Creates a new [<code>Bitmap</code>] from an iterator of booleans.","Creates a new [<code>Bitmap</code>] from an iterator of booleans.","Creates a new [<code>Bitmap</code>] from an falible iterator of …","","","","","","","Returns the total number of slots. It corresponds to the …","","","","Auxiliary method to create a new Buffer","Returns the number of bytes in the buffer","Returns whether the buffer is empty.","Returns the byte slice stored in this buffer","Returns a new [Buffer] that is a slice of this buffer …","Returns a pointer to the start of this buffer.","Creates a [<code>Buffer</code>] from an [<code>Iterator</code>] with a trusted …","Safety","Creates a [<code>Buffer</code>] from an [<code>Iterator</code>] with a trusted …","Safety","Creates an empty [<code>MutableBuffer</code>]. This does not allocate …","Allocate a new [<code>MutableBuffer</code>] with initial capacity to …","Allocates a new [MutableBuffer] with <code>len</code> and capacity to …","Ensures that this buffer has at least …","Resizes the buffer, either truncating its contents (with …","Returns whether this buffer is empty or not.","Returns the length (the number of bytes written) in this …","Returns the total capacity in this buffer. The invariant …","Clear all existing data from this buffer.","Returns the data stored in this buffer as a slice.","Returns the data stored in this buffer as a mutable slice.","Returns a raw pointer to this buffer’s internal memory …","Returns a mutable raw pointer to this buffer’s internal …","Extends this buffer from a slice of items that can be …","Extends the buffer with a new item, increasing its …","","Shrinks the capacity of the [<code>MutableBuffer</code>] to fit its …","Extends <code>self</code> from a [<code>TrustedLen</code>] iterator.","Extends <code>self</code> from an iterator.","Creates a [<code>MutableBuffer</code>] from an [<code>Iterator</code>] with a …","Creates a [<code>MutableBuffer</code>] from an [<code>Iterator</code>] with a …","Creates a [<code>MutableBuffer</code>] from an [<code>Iterator</code>] with a […","Creates a [<code>MutableBuffer</code>] from an [<code>Iterator</code>] with a …","","Safety","","","","Create a new empty <code>ByteRecord</code>.","Create a new empty <code>ByteRecord</code> with the given capacity …","Deserialize this record.","Returns an iterator over all fields in this record.","Return the field at index <code>i</code>.","Returns true if and only if this record is empty.","Returns the number of fields in this record.","Truncate this record to <code>n</code> fields.","Clear this record so that it has zero fields.","Trim the fields of this record so that leading and …","Add a new field to this record.","Return the position of this record, if available.","Set the position of this record.","Return the start and end position of a field in this …","Return the entire row as a single byte slice. The slice …","Create a new CSV parser with a default configuration for …","Create a new CSV parser with a default configuration for …","Returns a borrowed iterator over deserialized records.","Returns an owned iterator over deserialized records.","Returns a borrowed iterator over all records as strings.","Returns an owned iterator over all records as strings.","Returns a borrowed iterator over all records as raw bytes.","Returns an owned iterator over all records as raw bytes.","Returns a reference to the first row read by this parser.","Returns a reference to the first row read by this parser …","Set the headers of this CSV parser manually.","Set the headers of this CSV parser manually as raw bytes.","Read a single row into the given record. Returns false …","Read a single row into the given byte record. Returns …","Return the current position of this CSV reader.","Returns true if and only if this reader has been …","Returns true if and only if this reader has been …","Returns a reference to the underlying reader.","Returns a mutable reference to the underlying reader.","Unwraps this CSV reader, returning the underlying reader.","Seeks the underlying reader to the position given.","This is like <code>seek</code>, but provides direct control over how …","Create a new builder for configuring CSV parsing.","Build a CSV parser from this configuration that reads …","Build a CSV parser from this configuration that reads …","The field delimiter to use when parsing CSV.","Whether to treat the first row as a special header row.","Whether the number of fields in records is allowed to …","Whether fields are trimmed of leading and trailing …","The record terminator to use when parsing CSV.","The quote character to use when parsing CSV.","The escape character to use when parsing CSV.","Enable double quote escapes.","Enable or disable quoting.","The comment character to use when parsing CSV.","A convenience method for specifying a configuration to …","Set the capacity (in bytes) of the buffer used in the CSV …","Build a CSV writer with a default configuration that …","Build a CSV writer with a default configuration that …","Serialize a single record using Serde.","Write a single record.","Write a single <code>ByteRecord</code>.","Write a single field.","Flush the contents of the internal buffer to the …","Flush the contents of the internal buffer and return the …","Create a new builder for configuring CSV writing.","Build a CSV writer from this configuration that writes …","Build a CSV writer from this configuration that writes …","The field delimiter to use when writing CSV.","Whether to write a header row before writing any other …","Whether the number of fields in records is allowed to …","The record terminator to use when writing CSV.","The quoting style to use when writing CSV.","The quote character to use when writing CSV.","Enable double quote escapes.","The escape character to use when writing CSV.","Set the capacity (in bytes) of the internal buffer used …","Return the specific type of this error.","Unwrap this error into its underlying type.","Returns true if this is an I/O error.","Return the position for this error, if one exists.","Create a new JSON Reader from any value that implements …","Create a new JSON Reader from a <code>BufReader<R: Read></code>","Returns the schema of the reader, useful for getting the …","Read the next batch of records","","Set the JSON file’s schema","Set the JSON reader to infer the schema of the file","Set the batch size (number of records to load at one time)","Set the reader’s column projection","Create a new <code>Reader</code> from the <code>ReaderBuilder</code>","Construct a new writer","Write a single JSON row to the output writer","Convert the [<code>RecordBatch</code>] into JSON rows, and write them …","Finishes the output stream. This function must be called …","Unwraps this <code>Writer<W></code>, returning the underlying writer","Returns the schema.","Creates a new reader","Return the schema of the file","Try to create a new stream reader","Return the schema of the stream","Check if the stream is finished","Try create a new writer, with the schema written as part …","","Write a record batch to the stream","Write continuation bytes, and mark the stream as done","Try create a new writer, with the schema written as part …","Try create a new writer with IpcWriteOptions","Write a record batch to the file","Write footer and closing tag, then mark the writer as done","","","Creates new file metadata.","Returns the [’SchemaDescriptor`] that describes schema …","returns the metadata","Returns column order for <code>i</code>th column in this file. If …","","Creates new schema descriptor from Parquet schema.","Returns [<code>ColumnDescriptor</code>] for a field position.","Returns slice of [<code>ColumnDescriptor</code>].","Returns number of leaf-level columns.","Returns schema name.","","","Method to convert from Thrift.","Method to convert to Thrift.","Returns [<code>BasicTypeInfo</code>] information about the type.","Returns this type’s field name.","","Checks if <code>sub_type</code> schema is part of current schema. This …","","","","","","Wraps an external error in an <code>ParquetError</code>.","File where the column chunk is stored.","Byte offset in <code>file_path()</code>.","Type of this column. Must be primitive.","The [<code>ColumnDescriptor</code>] for this column. This descriptor …","The [<code>ColumnDescriptor</code>] for this column. This descriptor …","Decodes the raw statistics into a statistics","Total number of values in this column chunk.","CompressionCodec for this column.","Returns the total compressed data size of this column …","Returns the total uncompressed data size of this column …","Returns the offset for the column data.","Returns <code>true</code> if this column chunk contains a index page, …","Returns the offset for the index page.","Returns the offset for the dictionary page, if any.","Returns the encoding for this column","Returns the offset and length in bytes of the column …","Method to convert from Thrift.","Method to convert to Thrift.","Creates new descriptor for leaf-level column.","Returns maximum definition level for this column.","Returns maximum repetition level for this column.","","Returns self type [<code>ParquetType</code>] for this leaf column.","Returns self type [<code>PhysicalType</code>] for this leaf column.","Returns column name.","Number of columns in this row group.","Returns column chunk metadata for <code>i</code>th column.","Returns slice of column chunk metadata.","Number of rows in this row group.","Total byte size of all uncompressed column data in this …","Total size of all compressed column data in this row …","Method to convert from Thrift.","Method to convert to Thrift.","","","","","","","Decodes the raw statistics into a statistics","","","","","","","","","","Decodes the raw statistics into a statistics","","","","","","","","","","","Creates a new field","Creates a new field","Sets the [<code>Field</code>]’s optional metadata. The metadata is …","Returns the [<code>Field</code>]’s optional custom metadata.","Returns the [<code>Field</code>]’s name.","Returns the [<code>Field</code>]’s [<code>DataType</code>].","Returns the [<code>Field</code>] nullability.","Returns the dictionary ID, if this is a dictionary type.","Returns whether this [<code>Field</code>]’s dictionary is ordered, …","Merge field into self if it is compatible. Struct will be …","Creates an empty [<code>Schema</code>].","Creates a new [<code>Schema</code>] from a sequence of [<code>Field</code>] values.","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values and …","Merge schema into self if it is compatible. Struct fields …","Returns all [<code>Field</code>]s in this schema.","Returns the [<code>Field</code>] at position <code>i</code>.","Returns the first [<code>Field</code>] named <code>name</code>.","Returns all [<code>Field</code>]s with dictionary id <code>dict_id</code>.","Find the index of the column with the given name.","Returns an immutable reference to the Map of custom …","Look up a column by name and return a immutable reference …","","returns the null bit buffer. Rust implementation uses a …","Safety","Safety","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,8,8,0,9,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,13,0,14,14,14,14,14,14,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,11,11,11,11,11,0,0,26,0,27,0,28,28,28,28,0,29,29,29,0,0,0,30,0,0,31,31,31,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,0,0,0,33,33,0,34,34,0,35,35,0,36,36,0,37,37,0,38,38,0,39,39,0,40,40,0,41,41,0,42,42,0,43,43,0,44,44,0,45,45,0,46,46,0,47,47,0,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,0,0,0,0,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,52,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,54,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,0,56,56,56,56,56,0,57,57,57,57,57,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,0,0,0,0,59,59,59,59,59,59,0,0,0,0,60,60,60,60,60,60,60,60,60,60,60,0,0,61,61,61,61,61,61,0,0,62,62,62,62,62,62,62,0,63,63,0,64,64,64,64,0,0,65,65,65,65,65,65,65,65,65,65,65,0,66,66,66,66,0,67,67,67,67,67,67,0,0,68,68,68,68,68,68,68,68,68,0,69,69,69,0,70,70,70,70,70,0,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,0,73,73,73,73,73,73,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,74,74,74,74,74,74,74,74,74,0,0,0,0,75,75,75,75,75,75,75,75,0,0,0,0,76,76,76,76,76,76,76,0,0,0,0,77,77,77,77,77,77,77,77,0,0,0,0,78,78,78,78,78,78,78,0,0,0,0,79,79,79,79,79,79,79,79,79,0,0,0,0,80,80,80,80,80,80,80,0,0,0,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,0,0,0,0,82,82,82,82,82,82,0,0,0,0,83,83,83,83,83,83,83,0,84,84,84,84,84,84,0,0,85,85,85,0,0,86,86,0,0,87,87,87,0,0,88,88,0,0,89,89,89,0,0,90,90,0,0,91,91,91,0,0,92,92,0,0,93,93,93,93,93,0,94,0,95,95,95,0,0,96,96,96,96,96,0,97,0,98,98,98,0,0,99,99,99,99,99,99,99,0,100,100,0,101,101,101,101,0,0,102,102,102,102,102,102,102,0,103,103,0,104,104,104,104,0,0,105,105,105,105,105,0,106,0,107,107,107,0,0,108,108,108,0,0,109,109,0,0,110,110,110,0,0,111,111,0,0,112,112,112,0,0,113,113,0,0,114,114,114,0,0,115,115,0,0,116,116,116,116,116,0,117,0,118,118,118,0,0,119,119,119,0,0,120,120,0,0,121,121,121,121,121,121,121,121,121,0,122,122,122,0,123,123,123,123,123,0,0,124,124,124,124,124,0,125,0,126,126,126,0,0,127,127,127,127,127,127,127,0,128,128,0,129,129,129,129,0,0,130,130,130,130,130,130,130,0,131,131,0,132,132,132,132,0,0,133,133,133,133,133,0,134,0,135,135,135,0,0,136,136,136,136,136,0,137,0,138,138,138,0,0,139,139,139,139,139,139,139,0,140,140,0,141,141,141,141,0,0,142,142,142,142,142,142,142,142,142,142,142,0,143,143,143,143,0,144,144,144,144,144,144,0,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,146,146,146,146,146,146,146,0,147,147,147,147,147,147,147,147,147,0,0,148,148,148,148,148,148,148,148,148,148,148,0,149,149,149,149,0,150,150,150,150,150,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,151,151,151,151,151,151,0,0,0,0,152,152,152,152,152,152,152,152,152,0,0,0,153,153,153,153,153,153,153,153,153,153,153,0,154,154,154,154,0,155,155,155,155,155,155,0,0,156,156,156,156,156,156,156,156,156,156,156,156,156,0,157,157,157,157,157,0,158,158,158,158,158,158,158,0,0,159,159,159,159,159,159,159,159,159,159,159,159,159,0,160,160,160,160,160,0,161,161,161,161,161,161,161,0,0,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,0,163,163,163,163,163,163,163,0,164,164,164,164,164,164,164,164,164,0,0,0,0,0,0,0,0,0,0,0,0,0,165,165,165,165,165,165,165,0,166,166,0,167,167,167,167,0,0,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,0,169,169,169,169,169,0,170,170,170,170,170,170,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,171,0,0,172,172,0,173,173,0,0,0,0,0,0,0,0,0,0,0,0,174,174,174,0,175,175,0,176,176,176,176,176,176,0,177,177,177,0,178,178,178,0,179,0,180,180,0,181,181,181,181,181,0,0,0,0,0,0,182,182,182,182,182,182,182,0,0,0,183,184,184,184,184,183,185,185,185,185,0,0,0,0,186,186,186,186,186,0,187,187,187,187,0,188,188,188,188,0,189,189,189,189,0,190,0,0,0,182,182,182,182,182,182,182,0,191,191,191,0,0,0,0,0,0,0,0,192,192,0,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,0,194,194,194,194,194,194,194,194,194,194,194,194,194,0,183,184,184,184,184,183,185,185,185,185,0,195,195,195,195,195,195,195,195,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,0,197,197,197,0,198,198,0,0,0,0,0,199,199,199,199,199,199,199,0,0,183,184,184,184,184,183,185,185,185,185,0,200,200,0,0,0,0,0,0,0,0,0,201,201,201,201,201,201,201,201,0,202,0,203,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,0,205,205,205,205,0,206,206,0,0,0,0,0,0,207,207,207,207,207,207,207,207,207,0,0,0,0,0,0,0,0,0,0,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,212,212,212,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,214,214,214,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,216,216,216,217,217,217,217,217,217,217,217,218,218,218,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,221,222,222,222,222,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,224,224,224,224,224,224,224,224,224,224,224,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,229,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,233,233,233,233,233,233,233,233,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,237,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,239,239,239,239,239,240,240,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,12,12,12,12,12,12,12,12,12,242,242,242,242,242,242,242,242,242,242,242,242,242,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,29,29,29,29,29,29,29,29,29,29,29,29,29,32,32,32,32,32,32,32,32,32,32,32,32,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,243,243,243,243,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,52,52,52,52,52,52,52,52,52,52,52,52,246,246,246,246,246,246,246,246,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,249,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,54,54,54,54,54,54,54,54,54,54,252,252,252,252,252,252,252,252,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,253,253,253,253,253,253,253,253,61,61,61,61,61,61,61,61,61,61,254,254,254,254,254,254,254,254,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,255,255,255,255,255,255,255,255,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,256,256,256,256,256,256,256,256,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,257,257,257,257,257,257,257,257,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,258,258,258,258,258,258,258,258,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,259,259,259,259,259,259,259,259,85,85,85,85,85,85,85,85,85,85,260,260,260,260,260,260,260,260,86,86,86,86,86,86,86,86,261,261,261,261,261,261,261,261,87,87,87,87,87,87,87,87,87,87,262,262,262,262,262,262,262,262,88,88,88,88,88,88,88,88,263,263,263,263,263,263,263,263,89,89,89,89,89,89,89,89,89,89,264,264,264,264,264,264,264,264,90,90,90,90,90,90,90,90,265,265,265,265,265,265,265,265,91,91,91,91,91,91,91,91,91,91,266,266,266,266,266,266,266,266,92,92,92,92,92,92,92,92,267,267,267,267,267,267,267,267,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,268,268,268,268,268,268,268,268,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,269,269,269,269,269,269,269,269,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,270,270,270,270,270,270,270,270,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,271,271,271,271,271,271,271,271,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,272,272,272,272,272,272,272,272,108,108,108,108,108,108,108,108,108,108,273,273,273,273,273,273,273,273,109,109,109,109,109,109,109,109,274,274,274,274,274,274,274,274,110,110,110,110,110,110,110,110,110,110,275,275,275,275,275,275,275,275,111,111,111,111,111,111,111,111,276,276,276,276,276,276,276,276,112,112,112,112,112,112,112,112,112,112,277,277,277,277,277,277,277,277,113,113,113,113,113,113,113,113,278,278,278,278,278,278,278,278,114,114,114,114,114,114,114,114,114,114,279,279,279,279,279,279,279,279,115,115,115,115,115,115,115,115,280,280,280,280,280,280,280,280,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,281,281,281,281,281,281,281,281,119,119,119,119,119,119,119,119,119,119,282,282,282,282,282,282,282,282,120,120,120,120,120,120,120,120,283,283,283,283,283,283,283,283,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,284,284,284,284,284,284,284,284,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,285,285,285,285,285,285,285,285,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,286,286,286,286,286,286,286,286,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,287,287,287,287,287,287,287,287,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,288,288,288,288,288,288,288,288,136,136,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,289,289,289,289,289,289,289,289,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,290,290,290,290,290,290,290,290,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,291,291,291,291,291,291,291,291,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,292,292,292,292,292,292,292,292,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,152,152,293,293,293,293,293,293,293,293,294,294,294,294,294,294,294,294,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,295,295,295,295,295,295,295,295,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,296,296,296,296,296,296,296,296,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,297,297,297,297,297,297,297,297,162,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,298,298,298,298,298,298,298,298,165,165,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,299,299,299,299,299,299,299,299,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,300,300,300,300,300,300,300,300,300,300,301,301,301,301,301,301,301,301,301,301,301,301,301,302,302,302,302,302,302,302,302,303,303,303,303,303,303,303,303,303,303,303,303,303,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,304,304,304,304,304,304,304,304,305,305,305,305,305,305,305,305,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,306,306,306,306,306,306,306,306,306,306,306,306,306,182,182,182,182,182,182,182,182,182,182,307,307,307,307,307,307,307,307,307,307,183,183,183,183,183,183,183,183,183,183,186,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,191,191,191,191,191,191,191,191,191,191,191,308,308,308,308,308,308,308,308,308,308,309,309,309,309,309,309,309,309,309,309,310,310,310,310,310,310,310,310,310,310,311,311,311,311,311,311,311,311,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,313,313,192,192,192,192,192,192,192,192,192,192,194,194,194,194,194,194,194,194,194,194,194,194,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196,196,197,197,197,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,314,314,314,314,314,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,315,315,315,204,204,204,204,204,204,204,204,204,204,204,204,204,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,316,316,316,316,316,316,316,316,248,248,248,246,244,243,248,247,245,246,243,243,248,243,243,243,243,243,243,243,245,247,243,243,191,191,191,195,195,183,183,309,309,196,196,191,312,312,195,313,200,307,182,310,183,309,196,308,192,191,311,192,196,182,307,310,200,191,183,313,195,309,308,199,194,198,197,199,198,194,197,199,199,197,194,198,199,198,194,197,197,197,194,194,198,198,199,199,197,198,194,209,209,209,209,209,210,210,210,210,210,212,212,212,212,212,214,214,214,214,214,216,216,216,216,216,218,218,218,218,218,219,219,219,219,219,221,221,221,221,221,222,222,222,222,222,224,224,224,224,224,209,210,218,221,222,224,225,225,225,225,226,226,226,226,227,227,227,227,228,228,228,228,229,229,229,229,230,230,230,230,231,231,231,231,232,232,232,232,233,233,233,233,208,211,213,215,217,220,223,208,211,217,220,223,208,210,211,213,215,217,220,223,208,208,208,211,211,211,213,213,213,215,215,215,217,217,217,220,220,223,223,223,216,218,209,209,224,224,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,29,29,29,29,16,17,18,19,20,21,22,23,24,25,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,204,314,315,186,187,188,189,301,303,241,304,305,210,218,221,220,221,209,210,214,219,221,218,222,224,212,234,235,234,240,241,240,241,12,12,12,12,12,314,176,186,187,189,12,201,222,236,241,236,236,237,237,237,238,239,239,242,242,301,303,306,209,210,212,214,216,218,219,221,222,224,234,238,240,29,32,49,50,51,52,54,55,58,59,60,61,62,65,68,71,74,75,76,77,78,79,80,81,82,83,84,85,87,89,91,93,96,99,102,105,108,110,112,114,116,119,121,124,127,130,133,136,139,142,145,148,151,152,153,156,159,162,165,168,300,181,186,187,188,189,201,314,315,204,205,206,220,228,234,235,240,241,16,17,18,19,20,21,22,23,24,25,29,51,52,250,56,63,66,69,72,260,262,264,266,94,97,100,103,106,273,275,277,279,117,282,122,125,128,131,134,137,140,143,146,149,154,157,160,163,166,169,171,202,29,58,59,60,74,75,76,77,78,79,80,81,82,83,151,152,314,204,205,206,2,219,219,221,221,210,210,224,224,209,209,214,214,218,218,222,222,212,212,234,240,240,29,29,32,49,52,52,54,54,55,55,58,58,59,59,60,60,61,61,62,62,65,65,68,68,71,71,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,87,87,89,89,91,91,93,93,96,96,99,99,102,102,105,105,108,108,110,110,112,112,114,114,116,116,119,119,121,121,124,124,127,127,130,130,133,133,136,136,139,139,142,142,145,145,148,148,151,151,152,152,153,153,156,156,159,159,162,162,165,165,168,168,186,186,187,187,188,188,189,189,201,201,314,314,315,315,204,204,205,206,29,58,59,60,74,75,76,77,78,79,80,81,82,83,151,152,314,204,205,206,241,241,209,208,210,211,212,213,214,216,215,218,217,219,221,220,222,224,223,233,234,235,236,238,240,241,12,29,32,49,50,51,52,249,250,251,54,55,58,59,60,61,62,65,68,71,74,75,76,77,78,79,80,81,82,83,84,85,87,89,91,93,96,99,102,105,108,110,112,114,116,119,121,124,127,130,133,136,139,142,145,148,151,152,153,156,159,162,165,168,300,301,302,171,174,175,176,177,178,179,180,181,186,187,188,189,201,202,314,315,204,205,206,316,2,209,210,212,214,216,218,219,221,221,221,221,221,221,221,221,221,221,221,221,222,224,12,29,314,315,204,16,17,18,19,20,21,22,23,24,25,16,17,18,19,20,21,22,23,24,25,16,17,18,19,20,21,22,23,24,25,16,17,18,19,20,21,22,23,24,25,29,32,49,52,58,59,60,74,75,76,77,78,79,80,81,82,83,151,152,314,204,205,206,204,314,315,188,208,209,210,213,215,217,220,221,223,224,234,235,240,241,174,175,176,177,178,179,180,181,174,175,176,177,178,179,180,181,54,55,58,59,60,61,62,65,68,71,74,75,76,77,78,79,80,81,82,83,84,85,87,89,91,93,96,99,102,105,108,110,112,114,116,119,121,124,127,130,133,136,139,142,145,148,151,152,153,156,159,162,165,168,58,58,59,59,60,60,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,151,151,152,152,54,58,59,60,61,74,75,76,77,78,79,80,81,82,83,84,151,152,54,55,58,59,60,61,62,65,68,71,74,75,76,77,78,79,80,81,82,83,84,85,87,89,91,93,96,99,102,105,108,110,112,114,116,119,121,124,127,130,133,136,139,142,145,148,151,152,153,156,159,162,165,168,209,209,209,209,209,208,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,210,210,210,210,210,210,211,211,212,212,212,212,212,212,213,213,214,214,214,214,214,214,214,214,214,215,215,216,216,216,216,216,216,216,216,217,217,218,218,218,218,218,218,218,218,218,218,218,218,218,219,219,219,219,220,220,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,221,222,222,222,222,222,222,222,224,224,224,224,224,224,223,224,224,224,224,224,224,224,224,224,224,224,224,224,225,226,227,228,229,230,231,232,233,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,236,236,236,236,237,238,238,239,240,240,240,240,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,242,31,31,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,246,246,246,246,246,246,246,246,247,247,247,247,247,247,247,247,247,247,247,247,248,248,248,248,249,249,249,249,250,250,250,250,250,250,251,251,251,251,251,300,301,301,303,303,303,304,304,304,304,305,305,305,305,306,306,182,182,182,182,182,307,307,307,307,307,307,307,183,183,183,183,183,183,183,183,183,183,183,191,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,309,309,309,309,309,309,309,310,310,310,310,310,310,310,310,311,311,311,311,311,311,311,311,312,312,313,313,313,313,313,313,313,313,194,194,197,197,198,198,198,199,199,314,314,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,315,315,207,207,207,207,207,316],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[],[["arc",3],["array",8]]],[[],[["array",8],["box",3]]],[[["bool",15],["usize",15]],[["growable",8],["box",3]]],null,null,[[["f32",15]],["ordering",4]],[[["f64",15]],["ordering",4]],[[],["ordering",4]],[[["array",8]],[["dyncomparator",6],["result",6]]],null,[[],["any",8]],[[],["usize",15]],[[],["bool",15]],[[],["datatype",4]],[[],["option",4]],[[],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],[["array",8],["box",3]]],[[["datatype",4]],[["array",8],["box",3]]],[[["usize",15],["datatype",4]],[["array",8],["box",3]]],[[["array",8]],[["array",8],["box",3]]],[[["array",8]],[["result",6],["box",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],[["usize",15],["option",4]]],[[["usize",15]],["option",4]],null,null,null,null,[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[["datatype",4]],[["arc",3],["array",8]]],null,[[],[["arc",3],["array",8]]],null,[[["intoiterator",8]],["result",6]],null,[[["usize",15]]],[[["option",4]]],[[["option",4]],["result",6]],null,[[["usize",15]],[["array",8],["box",3]]],null,[[]],[[]],null,null,null,null,[[["iterator",8],["option",4]],[["zipvalidity",3],["iterator",8]]],null,[[["usize",15],["u8",15]],["bool",15]],[[["usize",15],["bool",15],["u8",15]],["u8",15]],[[["usize",15],["bool",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],null,null,[[]],[[]],[[]],[[]],null,null,null,[[["bitmap",3]],["bitmap",3]],[[["bitmap",3]],["bitmap",3]],[[["bitmap",3]],["bitmap",3]],[[["bitmap",3]],["bitmap",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,[[]],null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,[[["datatype",4]],["bool",15]],null,null,[[]],[[]],[[]],null,[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],null,null,null,[[]],[[["primitivearray",3]],["option",4]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["primitivearray",3]],["option",4]],[[["primitivearray",3]],["option",4]],[[["utf8array",3]],[["option",4],["str",15]]],[[["utf8array",3]],[["option",4],["str",15]]],[[["booleanarray",3]],[["bool",15],["option",4]]],[[["booleanarray",3]],[["bool",15],["option",4]]],null,null,null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]]],null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]]],null,[[["primitivearray",3]],["primitivearray",3]],[[["usize",15],["primitivearray",3]],["primitivearray",3]],null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]]],null,null,[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],null,[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],null,[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],null,[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],[[["primitivearray",3]],[["result",6],["primitivearray",3]]],null,[[["primitivearray",3],["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3],["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["operator",4],["array",8]],[["result",6],["box",3]]],[[["datatype",4],["operator",4]],["bool",15]],null,null,null,null,null,null,[[["operator",4],["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["primitivearray",3]],["primitivearray",3]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[],["result",6]],null,null,[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3],["datatype",4]],[["primitivearray",3],["result",6]]],[[["primitivearray",3],["datatype",4]]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["datatype",4],["primitivearray",3],["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["datatype",4],["primitivearray",3],["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["datatype",4],["primitivearray",3],["primitivearray",3]],["result",6]],[[["datatype",4],["primitivearray",3],["primitivearray",3]],[["primitivearray",3],["result",6]]],null,[[["booleanarray",3]],[["result",6],["booleanarray",3]]],[[["booleanarray",3]],[["result",6],["booleanarray",3]]],[[["booleanarray",3]],["booleanarray",3]],[[["array",8]],["booleanarray",3]],[[["array",8]],["booleanarray",3]],null,[[["booleanarray",3]],[["result",6],["booleanarray",3]]],[[["booleanarray",3]],[["result",6],["booleanarray",3]]],null,[[["booleanarray",3]],["primitivearray",3]],[[["booleanarray",3]],[["utf8array",3],["offset",8]]],[[["datatype",4],["dictionaryarray",3]],[["dictionaryarray",3],["result",6]]],[[["dictionaryarray",3]],[["result",6],["dictionaryarray",3]]],[[["dictionaryarray",3]],[["array",8],["box",3]]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],[["utf8array",3],["offset",8]]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["datatype",4],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["dictionaryarray",3],["result",6]]],[[["primitivearray",3]],[["i64",15],["primitivearray",3]]],[[["primitivearray",3]],[["primitivearray",3],["i32",15]]],[[["primitivearray",3]],[["primitivearray",3],["i32",15]]],[[["primitivearray",3]],[["primitivearray",3],["i32",15]]],[[["primitivearray",3]],[["i64",15],["primitivearray",3]]],[[["primitivearray",3]],[["i64",15],["primitivearray",3]]],[[["primitivearray",3],["timeunit",4]],[["i64",15],["primitivearray",3]]],[[["primitivearray",3],["timeunit",4]],[["primitivearray",3],["i32",15]]],[[["primitivearray",3],["timeunit",4]],[["i64",15],["primitivearray",3]]],[[["primitivearray",3],["timeunit",4]],[["primitivearray",3],["i32",15]]],[[["option",4],["primitivearray",3],["timeunit",4]],[["i64",15],["primitivearray",3]]],[[["str",15]],[["i64",15],["result",6]]],[[["datatype",4],["utf8array",3]],["primitivearray",3]],[[["utf8array",3]],[["primitivearray",3],["i32",15]]],[[["utf8array",3]],[["i64",15],["primitivearray",3]]],[[["utf8array",3]],[["dictionaryarray",3],["result",6]]],[[["utf8array",3]],[["i64",15],["primitivearray",3]]],[[["datatype",4]],["bool",15]],[[["datatype",4],["array",8]],[["result",6],["box",3]]],null,null,null,null,null,null,null,null,[[["array",8],["operator",4]],[["result",6],["booleanarray",3]]],[[["nativetype",8],["primitivearray",3],["partialord",8],["operator",4]],[["result",6],["booleanarray",3]]],[[["str",15],["operator",4],["utf8array",3]],["booleanarray",3]],[[["datatype",4]],["bool",15]],null,[[],[["result",6],["box",3]]],null,[[["array",8]],[["result",6],["booleanarray",3]]],null,null,[[["booleanarray",3]],[["filter",6],["result",6]]],[[["array",8],["booleanarray",3]],[["result",6],["box",3]]],[[["recordbatch",3],["booleanarray",3]],[["result",6],["recordbatch",3]]],null,[[["primitivearray",3]],[["primitivearray",3],["u64",15]]],[[["booleanarray",3]],[["primitivearray",3],["u64",15]]],[[["utf8array",3]],[["primitivearray",3],["u64",15]]],[[["binaryarray",3]],[["primitivearray",3],["u64",15]]],[[["array",8]],[["primitivearray",3],["result",6]]],[[["datatype",4]],["bool",15]],null,[[["booleanarray",3],["array",8]],[["result",6],["box",3]]],null,[[["array",8]],[["result",6],["box",3]]],[[["datatype",4]],["bool",15]],null,[[["usize",15],["array",8]],[["array",8],["box",3]]],null,[[["primitivearray",3]],[["primitivearray",3],["result",6]]],[[["datatype",4]],["bool",15]],[[["array",8]],[["result",6],["box",3]]],null,[[],[["result",6],["vec",3]]],[[],[["result",6],["primitivearray",3]]],null,null,null,[[["array",8],["sortoptions",3]],[["result",6],["box",3]]],[[["array",8],["sortoptions",3]],[["int32array",6],["result",6]]],[[["datatype",4]],["bool",15]],null,null,null,null,[[["i64",15],["option",4],["array",8]],[["result",6],["box",3]]],[[["datatype",4]],["bool",15]],null,[[["array",8],["primitivearray",3]],[["result",6],["box",3]]],[[["datatype",4]],["bool",15]],null,[[["array",8]],[["result",6],["primitivearray",3]]],[[["datatype",4]],["bool",15]],[[["array",8]],[["result",6],["primitivearray",3]]],[[["datatype",4]],["bool",15]],null,[[["i64",15],["array",8]],[["result",6],["box",3]]],null,[[["utf8array",3]],[["result",6],["booleanarray",3]]],[[["utf8array",3]],[["result",6],["booleanarray",3]]],[[["str",15],["utf8array",3]],[["result",6],["booleanarray",3]]],[[["str",15],["utf8array",3]],[["result",6],["booleanarray",3]]],null,[[["utf8array",3]],[["result",6],["booleanarray",3]]],[[["str",15],["utf8array",3]],[["result",6],["booleanarray",3]]],null,[[["intoiterator",8]],[["array",8],["box",3]]],[[["array",8],["sortoptions",3]],[["result",6],["box",3]]],[[],[["result",6],["vec",3]]],null,null,null,null,null,null,[[["usize",15],["option",4]],[["result",6],["recordbatch",3]]],[[["usize",15],["datatype",4]],[["result",6],["arc",3]]],[[["reader",3],["usize",15],["option",4],["bool",15]],[["result",6],["schema",3]]],[[["option",4],["schema",3]],["schema",3]],[[["reader",3],["usize",15]],[["usize",15],["result",6]]],[[["str",15]],["datatype",4]],null,null,null,null,null,null,null,null,[[["array",8],["serializeoptions",3]],[["box",3],["result",6]]],[[["serializeoptions",3],["recordbatch",3]],[["vec",3],["result",6]]],[[["writer",3],["recordbatch",3],["serializeoptions",3]],["result",6]],[[["writer",3],["schema",3]],["result",6]],null,null,[[["usize",15],["option",4],["bufreader",3]],[["result",6],["schema",3]]],[[],[["result",6],["schema",3]]],[[["usize",15],["option",4],["bufreader",3]],[["result",6],["schema",3]]],null,null,null,[[],["value",4]],[[],[["map",3],["vec",3]]],null,null,null,null,null,null,null,null,[[["i64",15],["i32",15]]],[[],["i64",15]],[[["i64",15]]],[[],["i32",15]],[[["i32",15]]],[[],["i64",15]],[[["i64",15]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["footerargs",3]],[["wipoffset",3],["footer",3]]],null,null,null,null,null,[[],["metadataversion",3]],[[],[["option",4],["schema",3]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["vector",3]]],null,null,null,null,null,null,null,[[["metadataversion",3]]],[[["wipoffset",3],["schema",3]]],[[["wipoffset",3],["vector",3]]],[[["wipoffset",3],["vector",3]]],[[["wipoffset",3],["vector",3]]],[[["flatbufferbuilder",3]],["footerbuilder",3]],[[],[["wipoffset",3],["footer",3]]],[[],["footer",3]],[[],["footer",3]],[[],[["footer",3],["invalidflatbuffer",4],["result",4]]],[[],[["footer",3],["invalidflatbuffer",4],["result",4]]],[[["verifieroptions",3]],[["invalidflatbuffer",4],["footer",3],["result",4]]],[[["verifieroptions",3]],[["invalidflatbuffer",4],["footer",3],["result",4]]],[[],["footer",3]],[[],["footer",3]],[[["wipoffset",3],["footer",3],["flatbufferbuilder",3]]],[[["wipoffset",3],["footer",3],["flatbufferbuilder",3]]],null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,[[["i64",15]]],[[],["i64",15]],[[["i64",15]]],[[],["i64",15]],[[["i64",15]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["bodycompressionargs",3]],[["wipoffset",3],["bodycompression",3]]],null,null,[[],["compressiontype",3]],[[],["bodycompressionmethod",3]],null,null,null,null,[[["compressiontype",3]]],[[["bodycompressionmethod",3]]],[[["flatbufferbuilder",3]],["bodycompressionbuilder",3]],[[],[["bodycompression",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["recordbatchargs",3]],[["wipoffset",3],["recordbatch",3]]],null,null,null,null,[[],["i64",15]],[[],["option",4]],[[],["option",4]],[[],[["bodycompression",3],["option",4]]],null,null,null,null,null,null,[[["i64",15]]],[[["vector",3],["wipoffset",3]]],[[["wipoffset",3],["vector",3]]],[[["bodycompression",3],["wipoffset",3]]],[[["flatbufferbuilder",3]],["recordbatchbuilder",3]],[[],[["recordbatch",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["dictionarybatchargs",3]],[["dictionarybatch",3],["wipoffset",3]]],null,null,null,[[],["i64",15]],[[],[["recordbatch",3],["option",4]]],[[],["bool",15]],null,null,null,null,null,[[["i64",15]]],[[["recordbatch",3],["wipoffset",3]]],[[["bool",15]]],[[["flatbufferbuilder",3]],["dictionarybatchbuilder",3]],[[],[["dictionarybatch",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["messageargs",3]],[["wipoffset",3],["message",3]]],null,null,null,null,null,[[],["metadataversion",3]],[[],["messageheader",3]],[[],[["option",4],["table",3]]],[[],["i64",15]],[[],[["option",4],["vector",3]]],[[],[["option",4],["schema",3]]],[[],[["dictionarybatch",3],["option",4]]],[[],[["recordbatch",3],["option",4]]],[[],[["option",4],["tensor",3]]],[[],[["option",4],["sparsetensor",3]]],null,null,null,null,null,null,null,[[["metadataversion",3]]],[[["messageheader",3]]],[[["wipoffset",3],["unionwipoffset",3]]],[[["i64",15]]],[[["wipoffset",3],["vector",3]]],[[["flatbufferbuilder",3]],["messagebuilder",3]],[[],[["wipoffset",3],["message",3]]],[[],["message",3]],[[],["message",3]],[[],[["message",3],["invalidflatbuffer",4],["result",4]]],[[],[["message",3],["invalidflatbuffer",4],["result",4]]],[[["verifieroptions",3]],[["result",4],["invalidflatbuffer",4],["message",3]]],[[["verifieroptions",3]],[["result",4],["invalidflatbuffer",4],["message",3]]],[[],["message",3]],[[],["message",3]],[[["wipoffset",3],["message",3],["flatbufferbuilder",3]]],[[["wipoffset",3],["message",3],["flatbufferbuilder",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,[[["i64",15]]],[[],["i64",15]],[[["i64",15]]],[[],["i64",15]],[[["i64",15]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["nullargs",3]],[["null",3],["wipoffset",3]]],null,null,[[["flatbufferbuilder",3]],["nullbuilder",3]],[[],[["wipoffset",3],["null",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["struct_args",3]],[["struct_",3],["wipoffset",3]]],null,null,[[["flatbufferbuilder",3]],["struct_builder",3]],[[],[["wipoffset",3],["struct_",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["listargs",3]],[["wipoffset",3],["list",3]]],null,null,[[["flatbufferbuilder",3]],["listbuilder",3]],[[],[["wipoffset",3],["list",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["largelistargs",3]],[["wipoffset",3],["largelist",3]]],null,null,[[["flatbufferbuilder",3]],["largelistbuilder",3]],[[],[["largelist",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["fixedsizelistargs",3]],[["wipoffset",3],["fixedsizelist",3]]],null,[[],["i32",15]],null,null,null,[[["i32",15]]],[[["flatbufferbuilder",3]],["fixedsizelistbuilder",3]],[[],[["wipoffset",3],["fixedsizelist",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["mapargs",3]],[["map",3],["wipoffset",3]]],null,[[],["bool",15]],null,null,null,[[["bool",15]]],[[["flatbufferbuilder",3]],["mapbuilder",3]],[[],[["map",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["unionargs",3]],[["wipoffset",3],["union",3]]],null,null,[[],["unionmode",3]],[[],[["option",4],["vector",3]]],null,null,null,null,[[["unionmode",3]]],[[["wipoffset",3],["vector",3]]],[[["flatbufferbuilder",3]],["unionbuilder",3]],[[],[["wipoffset",3],["union",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["intargs",3]],[["wipoffset",3],["int",3]]],null,null,[[],["i32",15]],[[],["bool",15]],null,null,null,null,[[["i32",15]]],[[["bool",15]]],[[["flatbufferbuilder",3]],["intbuilder",3]],[[],[["wipoffset",3],["int",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["floatingpointargs",3]],[["wipoffset",3],["floatingpoint",3]]],null,[[],["precision",3]],null,null,null,[[["precision",3]]],[[["flatbufferbuilder",3]],["floatingpointbuilder",3]],[[],[["wipoffset",3],["floatingpoint",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["utf8args",3]],[["utf8",3],["wipoffset",3]]],null,null,[[["flatbufferbuilder",3]],["utf8builder",3]],[[],[["utf8",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["binaryargs",3]],[["wipoffset",3],["binary",3]]],null,null,[[["flatbufferbuilder",3]],["binarybuilder",3]],[[],[["binary",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["largeutf8args",3]],[["largeutf8",3],["wipoffset",3]]],null,null,[[["flatbufferbuilder",3]],["largeutf8builder",3]],[[],[["largeutf8",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["largebinaryargs",3]],[["largebinary",3],["wipoffset",3]]],null,null,[[["flatbufferbuilder",3]],["largebinarybuilder",3]],[[],[["wipoffset",3],["largebinary",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["fixedsizebinaryargs",3]],[["fixedsizebinary",3],["wipoffset",3]]],null,[[],["i32",15]],null,null,null,[[["i32",15]]],[[["flatbufferbuilder",3]],["fixedsizebinarybuilder",3]],[[],[["wipoffset",3],["fixedsizebinary",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["boolargs",3]],[["wipoffset",3],["bool",3]]],null,null,[[["flatbufferbuilder",3]],["boolbuilder",3]],[[],[["wipoffset",3],["bool",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["decimalargs",3]],[["decimal",3],["wipoffset",3]]],null,null,null,[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,null,null,null,null,[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["flatbufferbuilder",3]],["decimalbuilder",3]],[[],[["decimal",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["dateargs",3]],[["date",3],["wipoffset",3]]],null,[[],["dateunit",3]],null,null,null,[[["dateunit",3]]],[[["flatbufferbuilder",3]],["datebuilder",3]],[[],[["wipoffset",3],["date",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["timeargs",3]],[["wipoffset",3],["time",3]]],null,null,[[],["timeunit",3]],[[],["i32",15]],null,null,null,null,[[["timeunit",3]]],[[["i32",15]]],[[["flatbufferbuilder",3]],["timebuilder",3]],[[],[["time",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["timestampargs",3]],[["wipoffset",3],["timestamp",3]]],null,null,[[],["timeunit",3]],[[],[["str",15],["option",4]]],null,null,null,null,[[["timeunit",3]]],[[["wipoffset",3],["str",15]]],[[["flatbufferbuilder",3]],["timestampbuilder",3]],[[],[["wipoffset",3],["timestamp",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["intervalargs",3]],[["interval",3],["wipoffset",3]]],null,[[],["intervalunit",3]],null,null,null,[[["intervalunit",3]]],[[["flatbufferbuilder",3]],["intervalbuilder",3]],[[],[["wipoffset",3],["interval",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["durationargs",3]],[["wipoffset",3],["duration",3]]],null,[[],["timeunit",3]],null,null,null,[[["timeunit",3]]],[[["flatbufferbuilder",3]],["durationbuilder",3]],[[],[["wipoffset",3],["duration",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["keyvalueargs",3]],[["keyvalue",3],["wipoffset",3]]],null,null,[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],null,null,null,null,[[["wipoffset",3],["str",15]]],[[["wipoffset",3],["str",15]]],[[["flatbufferbuilder",3]],["keyvaluebuilder",3]],[[],[["wipoffset",3],["keyvalue",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["dictionaryencodingargs",3]],[["wipoffset",3],["dictionaryencoding",3]]],null,null,null,null,[[],["i64",15]],[[],[["option",4],["int",3]]],[[],["bool",15]],[[],["dictionarykind",3]],null,null,null,null,null,null,[[["i64",15]]],[[["wipoffset",3],["int",3]]],[[["bool",15]]],[[["dictionarykind",3]]],[[["flatbufferbuilder",3]],["dictionaryencodingbuilder",3]],[[],[["wipoffset",3],["dictionaryencoding",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["fieldargs",3]],[["wipoffset",3],["field",3]]],null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],[[],["bool",15]],[[],["type",3]],[[],[["option",4],["table",3]]],[[],[["option",4],["dictionaryencoding",3]]],[[],[["vector",3],["option",4]]],[[],[["option",4],["vector",3]]],[[],[["null",3],["option",4]]],[[],[["option",4],["int",3]]],[[],[["option",4],["floatingpoint",3]]],[[],[["binary",3],["option",4]]],[[],[["option",4],["utf8",3]]],[[],[["option",4],["bool",3]]],[[],[["decimal",3],["option",4]]],[[],[["date",3],["option",4]]],[[],[["option",4],["time",3]]],[[],[["timestamp",3],["option",4]]],[[],[["option",4],["interval",3]]],[[],[["list",3],["option",4]]],[[],[["option",4],["struct_",3]]],[[],[["union",3],["option",4]]],[[],[["option",4],["fixedsizebinary",3]]],[[],[["option",4],["fixedsizelist",3]]],[[],[["option",4],["map",3]]],[[],[["option",4],["duration",3]]],[[],[["option",4],["largebinary",3]]],[[],[["largeutf8",3],["option",4]]],[[],[["option",4],["largelist",3]]],null,null,null,null,null,null,null,null,null,[[["wipoffset",3],["str",15]]],[[["bool",15]]],[[["type",3]]],[[["wipoffset",3],["unionwipoffset",3]]],[[["wipoffset",3],["dictionaryencoding",3]]],[[["vector",3],["wipoffset",3]]],[[["wipoffset",3],["vector",3]]],[[["flatbufferbuilder",3]],["fieldbuilder",3]],[[],[["wipoffset",3],["field",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["schemaargs",3]],[["schema",3],["wipoffset",3]]],null,null,null,null,[[],["endianness",3]],[[],[["vector",3],["option",4]]],[[],[["option",4],["vector",3]]],[[],[["option",4],["vector",3]]],null,null,null,null,null,null,[[["endianness",3]]],[[["vector",3],["wipoffset",3]]],[[["wipoffset",3],["vector",3]]],[[["wipoffset",3],["vector",3]]],[[["flatbufferbuilder",3]],["schemabuilder",3]],[[],[["schema",3],["wipoffset",3]]],[[],["schema",3]],[[],["schema",3]],[[],[["schema",3],["result",4],["invalidflatbuffer",4]]],[[],[["schema",3],["result",4],["invalidflatbuffer",4]]],[[["verifieroptions",3]],[["schema",3],["invalidflatbuffer",4],["result",4]]],[[["verifieroptions",3]],[["schema",3],["invalidflatbuffer",4],["result",4]]],[[],["schema",3]],[[],["schema",3]],[[["wipoffset",3],["flatbufferbuilder",3],["schema",3]]],[[["wipoffset",3],["flatbufferbuilder",3],["schema",3]]],null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["sparsetensorindexcooargs",3]],[["sparsetensorindexcoo",3],["wipoffset",3]]],null,null,null,null,[[],["int",3]],[[],[["option",4],["vector",3]]],[[],["buffer",3]],[[],["bool",15]],null,null,null,null,null,null,[[["wipoffset",3],["int",3]]],[[["vector",3],["wipoffset",3]]],[[["buffer",3]]],[[["bool",15]]],[[["flatbufferbuilder",3]],["sparsetensorindexcoobuilder",3]],[[],[["wipoffset",3],["sparsetensorindexcoo",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["sparsematrixindexcsxargs",3]],[["wipoffset",3],["sparsematrixindexcsx",3]]],null,null,null,null,null,[[],["sparsematrixcompressedaxis",3]],[[],["int",3]],[[],["buffer",3]],[[],["int",3]],[[],["buffer",3]],null,null,null,null,null,null,null,[[["sparsematrixcompressedaxis",3]]],[[["wipoffset",3],["int",3]]],[[["buffer",3]]],[[["wipoffset",3],["int",3]]],[[["buffer",3]]],[[["flatbufferbuilder",3]],["sparsematrixindexcsxbuilder",3]],[[],[["sparsematrixindexcsx",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["sparsetensorindexcsfargs",3]],[["sparsetensorindexcsf",3],["wipoffset",3]]],null,null,null,null,null,[[],["int",3]],[[]],[[],["int",3]],[[]],[[],[["i32",15],["vector",3]]],null,null,null,null,null,null,null,[[["wipoffset",3],["int",3]]],[[["wipoffset",3],["vector",3]]],[[["wipoffset",3],["int",3]]],[[["wipoffset",3],["vector",3]]],[[["wipoffset",3],["vector",3]]],[[["flatbufferbuilder",3]],["sparsetensorindexcsfbuilder",3]],[[],[["sparsetensorindexcsf",3],["wipoffset",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["sparsetensorargs",3]],[["wipoffset",3],["sparsetensor",3]]],null,null,null,null,null,null,null,[[],["type",3]],[[],["table",3]],[[],[["vector",3],["forwardsuoffset",3]]],[[],["i64",15]],[[],["sparsetensorindex",3]],[[],["table",3]],[[],["buffer",3]],[[],[["null",3],["option",4]]],[[],[["option",4],["int",3]]],[[],[["option",4],["floatingpoint",3]]],[[],[["binary",3],["option",4]]],[[],[["option",4],["utf8",3]]],[[],[["option",4],["bool",3]]],[[],[["decimal",3],["option",4]]],[[],[["date",3],["option",4]]],[[],[["option",4],["time",3]]],[[],[["timestamp",3],["option",4]]],[[],[["option",4],["interval",3]]],[[],[["list",3],["option",4]]],[[],[["option",4],["struct_",3]]],[[],[["union",3],["option",4]]],[[],[["option",4],["fixedsizebinary",3]]],[[],[["option",4],["fixedsizelist",3]]],[[],[["option",4],["map",3]]],[[],[["option",4],["duration",3]]],[[],[["option",4],["largebinary",3]]],[[],[["largeutf8",3],["option",4]]],[[],[["option",4],["largelist",3]]],[[],[["sparsetensorindexcoo",3],["option",4]]],[[],[["option",4],["sparsematrixindexcsx",3]]],[[],[["sparsetensorindexcsf",3],["option",4]]],null,null,null,null,null,null,null,null,null,[[["type",3]]],[[["wipoffset",3],["unionwipoffset",3]]],[[["wipoffset",3],["vector",3]]],[[["i64",15]]],[[["sparsetensorindex",3]]],[[["wipoffset",3],["unionwipoffset",3]]],[[["buffer",3]]],[[["flatbufferbuilder",3]],["sparsetensorbuilder",3]],[[],[["sparsetensor",3],["wipoffset",3]]],[[],["sparsetensor",3]],[[],["sparsetensor",3]],[[],[["invalidflatbuffer",4],["result",4],["sparsetensor",3]]],[[],[["invalidflatbuffer",4],["result",4],["sparsetensor",3]]],[[["verifieroptions",3]],[["result",4],["invalidflatbuffer",4],["sparsetensor",3]]],[[["verifieroptions",3]],[["result",4],["invalidflatbuffer",4],["sparsetensor",3]]],[[],["sparsetensor",3]],[[],["sparsetensor",3]],[[["sparsetensor",3],["flatbufferbuilder",3],["wipoffset",3]]],[[["sparsetensor",3],["flatbufferbuilder",3],["wipoffset",3]]],null,null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["tensordimargs",3]],[["wipoffset",3],["tensordim",3]]],null,null,[[],["i64",15]],[[],[["str",15],["option",4]]],null,null,null,null,[[["i64",15]]],[[["wipoffset",3],["str",15]]],[[["flatbufferbuilder",3]],["tensordimbuilder",3]],[[],[["wipoffset",3],["tensordim",3]]],null,null,null,[[["table",3]]],[[["flatbufferbuilder",3],["tensorargs",3]],[["wipoffset",3],["tensor",3]]],null,null,null,null,null,[[],["type",3]],[[],["table",3]],[[],[["vector",3],["forwardsuoffset",3]]],[[],[["option",4],["vector",3]]],[[],["buffer",3]],[[],[["null",3],["option",4]]],[[],[["option",4],["int",3]]],[[],[["option",4],["floatingpoint",3]]],[[],[["binary",3],["option",4]]],[[],[["option",4],["utf8",3]]],[[],[["option",4],["bool",3]]],[[],[["decimal",3],["option",4]]],[[],[["date",3],["option",4]]],[[],[["option",4],["time",3]]],[[],[["timestamp",3],["option",4]]],[[],[["option",4],["interval",3]]],[[],[["list",3],["option",4]]],[[],[["option",4],["struct_",3]]],[[],[["union",3],["option",4]]],[[],[["option",4],["fixedsizebinary",3]]],[[],[["option",4],["fixedsizelist",3]]],[[],[["option",4],["map",3]]],[[],[["option",4],["duration",3]]],[[],[["option",4],["largebinary",3]]],[[],[["largeutf8",3],["option",4]]],[[],[["option",4],["largelist",3]]],null,null,null,null,null,null,null,[[["type",3]]],[[["wipoffset",3],["unionwipoffset",3]]],[[["wipoffset",3],["vector",3]]],[[["vector",3],["wipoffset",3]]],[[["buffer",3]]],[[["flatbufferbuilder",3]],["tensorbuilder",3]],[[],[["wipoffset",3],["tensor",3]]],[[],["tensor",3]],[[],["tensor",3]],[[],[["invalidflatbuffer",4],["result",4],["tensor",3]]],[[],[["invalidflatbuffer",4],["result",4],["tensor",3]]],[[["verifieroptions",3]],[["result",4],["invalidflatbuffer",4],["tensor",3]]],[[["verifieroptions",3]],[["result",4],["invalidflatbuffer",4],["tensor",3]]],[[],["tensor",3]],[[],["tensor",3]],[[["wipoffset",3],["flatbufferbuilder",3],["tensor",3]]],[[["wipoffset",3],["flatbufferbuilder",3],["tensor",3]]],null,[[["u64",15],["dictionarybatch",3],["bool",15],["schema",3]],["result",6]],[[["recordbatch",3],["arc",3],["schema",3],["bool",15],["u64",15]],[["result",6],["recordbatch",3]]],[[],[["result",6],["filemetadata",3]]],null,null,[[],[["result",6],["streammetadata",3]]],null,null,null,null,null,[[["usize",15],["bool",15],["metadataversion",3]],["result",6]],[[],["metadataversion",3]],[[["ipcwriteoptions",3],["recordbatch",3],["dictionarytracker",3]],["result",6]],null,[[["bool",15]]],[[["i64",15],["arc",3]],[["bool",15],["result",6]]],null,null,null,[[["ipcwriteoptions",3],["encodeddata",3]],["result",6]],[[["ipcwriteoptions",3],["i32",15]],[["usize",15],["result",6]]],[[["metadataversion",3],["schema",3]],[["vec",3],["u8",15]]],[[["bool",15],["vec",3],["vec",3],["vec",3],["array",8],["i64",15]]],[[["bool",15],["vec",3],["vec",3],["vec",3],["array",8],["i64",15]],["usize",15]],null,null,[[["schema",3]]],null,[[["arrowjsonbatch",3],["hashmap",3],["schema",3]],[["result",6],["recordbatch",3]]],[[["recordbatch",3]],["arrowjsonbatch",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["option",4],["schemadescriptor",3]],[["result",6],["schema",3]]],[[["option",4]],[["result",6],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["filemetadata",3]],[["result",6],["schema",3]]],[[["parquettype",4]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["datatype",4]],[[["parquetstatistics",8]],[["result",6],["box",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compressedpage",3],["vec",3]],[["page",3],["result",4],["parqueterror",4]]],null,null,null,null,null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["chain",3]],[[],["cloned",3]],[[],["usize",15]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatmap",3]],[[],["filtermapderef",3]],[[],["option",4]],[[],["fuse",3]],[[],["inspect",3]],[[],["map",3]],[[],["mapderef",3]],[[],["mapref",3]],[[["usize",15]],["option",4]],[[],[["option",4],["usize",15]]],[[["usize",15]],["skip",3]],[[],["skipwhile",3]],[[["usize",15]],["take",3]],[[],["takewhile",3]],[[],["rev",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["u8",15],["vec",3],["filemetadata",3]],[["result",6],["pageiterator",3]]],[[],[["result",6],["filemetadata",3]]],[[["columnchunkmetadata",3]],[["result",6],["box",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["field",3]],[["result",6],["parquettype",4]]],[[["schema",3]],[["schemadescriptor",3],["result",6]]],[[["schema",3],["schemadescriptor",3],["vec",3],["option",4],["writeoptions",3]],["result",6]],[[["columndescriptor",3],["array",8],["writeoptions",3]],[["compressedpage",3],["result",6]]],null,[[],[["string",3],["result",6]]],[[],["result",6]],null,null,[[["arc",3],["arc",3],["schema",3],["vec",3]],["result",6]],[[["arc",3],["arc",3],["schema",3],["recordbatchoptions",3],["vec",3]],["result",6]],[[["arc",3],["schema",3]]],[[],["arc",3]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["arc",3]],[[]],null,null,null,[[],["schema",3]],[[],[["option",4],["result",6]]],null,null,null,null,null,null,null,[[["i32",15]],["naivedatetime",3]],[[["i32",15]],["naivedate",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedate",3]],[[["i32",15]],["naivetime",3]],[[["i32",15]],["naivetime",3]],[[["i64",15]],["naivetime",3]],[[["i64",15]],["naivetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["timeunit",4]],["f64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arrowarrayref",8]],[["result",6],["box",3]]],[[],["arrowarray",3]],[[["array",8],["arc",3]],[["result",6],["arrowarray",3]]],null,null,[[],["deallocation",4]],[[],[["result",6],["option",4]]],[[["usize",15]],[["result",6],["buffer",3]]],[[["usize",15]],[["result",6],["bitmap",3]]],[[["usize",15]],[["result",6],["arrowarraychild",3]]],[[],["arc",3]],[[],["ffi_arrowarray",3]],[[],["ffi_arrowschema",3]],[[],[["datatype",4],["result",6]]],null,null,[[],["stdrng",3]],[[["usize",15],["datatype",4],["f32",15]],["primitivearray",3]],[[["usize",15],["f32",15],["u64",15],["datatype",4]],["primitivearray",3]],[[["usize",15],["f32",15]],["booleanarray",3]],[[["usize",15],["f32",15]],[["utf8array",3],["offset",8]]],[[["tolexical",8]],[["vec",3],["u8",15]]],[[["tolexical",8]],["string",3]],[[],["isize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["utf8charsplitter",3]],[[],["utf16charsplitter",3]],[[],["utf8charmerger",3]],[[],["utf16charmerger",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["error",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["error",8],["option",4]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["stringrecord",3]],["byterecord",3]],[[["error",3]],["error",3]],[[],["byterecord",3]],[[["global",3],["vec",3]],["byterecord",3]],[[],["bool",15]],[[["byterecord",3]],["bool",15]],[[["vec",3]],["bool",15]],[[["usize",15]]],[[],["byterecord",3]],[[],["readerbuilder",3]],[[],["writerbuilder",3]],[[],["byterecord",3]],[[],["byterecord",3]],[[["error",4]],["parqueterror",4]],[[["error",3]],["parqueterror",4]],[[["error",4]],["parqueterror",4]],[[["physicaltype",4]],["bool",15]],[[["physicaltype",4]],["bool",15]],[[["parquettype",4]],["bool",15]],[[["parquettype",4]],["bool",15]],[[["columndescriptor",3]],["bool",15]],[[["columndescriptor",3]],["bool",15]],[[["primitiveconvertedtype",4]],["bool",15]],[[["primitiveconvertedtype",4]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[],["option",4]],[[],["physicaltype",4]],[[],["page",3]],[[],["writeoptions",3]],[[],["schemadescriptor",3]],[[],["filemetadata",3]],[[],["rowgroupmetadata",3]],[[],["parquettype",4]],[[],["columndescriptor",3]],[[],["primitiveconvertedtype",4]],[[],["columnchunkmetadata",3]],[[],["pageheader",4]],[[],["parqueterror",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["compressioncodec",4]],["ordering",4]],[[["logicaltype",4]],["ordering",4]],[[["timestamptype",3]],["ordering",4]],[[["timeunit",4]],["ordering",4]],[[],["compressioncodec",4]],[[],["timestamptype",3]],[[],["logicaltype",4]],[[],["timeunit",4]],[[["i32",15]],[["result",4],["compressioncodec",4]]],[[]],[[]],[[]],[[]],[[["compressioncodec",4]],[["ordering",4],["option",4]]],[[["timestamptype",3]],[["ordering",4],["option",4]]],[[["logicaltype",4]],[["ordering",4],["option",4]]],[[["timeunit",4]],[["ordering",4],["option",4]]],[[["timeunit",4]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["timestamptype",3]],["bool",15]],[[["timestamptype",3]],["bool",15]],[[["compressioncodec",4]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["any",8]],[[],["usize",15]],[[],["datatype",4]],[[],["option",4]],[[["usize",15]],[["array",8],["box",3]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["usize",15]]],[[["usize",15]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["box",3]]],[[["datatype",4]],[["array",8],["arc",3]]],[[["datatype",4]],[["array",8],["arc",3]]],[[["datatype",4]],[["array",8],["arc",3]]],[[["datatype",4]],[["array",8],["arc",3]]],[[["datatype",4]],[["array",8],["arc",3]]],[[["datatype",4]],[["array",8],["arc",3]]],[[["datatype",4]],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[],[["array",8],["arc",3]]],[[["intoiterator",8]],["arrowresult",6]],[[["intoiterator",8]],["arrowresult",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["arrowresult",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["arrowresult",6]],[[["intoiterator",8]],["arrowresult",6]],[[["usize",15]]],[[["option",4]],["arrowresult",6]],[[["option",4]]],[[["usize",15]]],[[["option",4]],["result",6]],[[["option",4]]],[[["usize",15]]],[[["option",4]],["arrowresult",6]],[[["option",4]]],[[["usize",15]]],[[["option",4]],["result",6]],[[["option",4]]],[[["usize",15]]],[[["option",4]],["result",6]],[[["option",4]]],[[["usize",15]]],[[["option",4]]],[[["usize",15]]],[[["option",4],["str",15]],["arrowresult",6]],[[["option",4],["str",15]]],[[["usize",15]],[["array",8],["box",3]]],[[["usize",15]],[["array",8],["box",3]]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[]],[[["u8",15]]],[[["u32",15]]],[[]],[[["u16",15]]],[[["u16",15]]],[[]],[[["u32",15]]],[[["u8",15]]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[["i8",15]]],[[["u32",15]]],[[]],[[["i16",15]]],[[["u16",15]]],[[]],[[["i32",15]]],[[["u8",15]]],[[]],[[["i64",15]]],[[["u16",15]]],[[]],[[["f32",15]]],[[["u8",15]]],[[]],[[["f64",15]]],[[["datatype",4]],["bool",15]],[[]],[[]],[[]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["f32",15]],[[],["f64",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["i8",15]],[[],["i8",15]],[[]],[[]],[[]],[[]],[[],["i16",15]],[[],["i16",15]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[],["i64",15]],[[],["i64",15]],[[]],[[]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["schema",3]],[[],["schema",3]],[[]],[[]],[[]],[[]],[[["listprimitive",3]]],[[["primitive",3]]],[[]],[[]],[[["growablebinary",3]]],[[["growableboolean",3]]],[[["growablefixedsizebinary",3]]],[[["growablenull",3]]],[[["growableprimitive",3]]],[[["growablelist",3]]],[[["growablestruct",3]]],[[["growableutf8",3]]],[[["growabledictionary",3]]],[[]],[[]],[[["mutablebitmap",3]]],[[]],[[]],[[["mutablebuffer",3]]],[[["mutablebuffer",3],["u64",15]]],[[["error",3]]],[[["utf8error",3]]],[[["csverror",3]]],[[["parseerror",3]]],[[["error",3]]],[[["field",3]],["field",3]],[[["field",3]]],[[]],[[["parquetbytearraystatistics",3]]],[[["parquetbooleanstatistics",3]]],[[["parqueterror",4]]],[[["structarray",3]]],[[["recordbatch",3]]],[[],["usize",15]],[[["intoiterator",8]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["binaryarray",3]],[[],["booleanarray",3]],[[],["dictionaryarray",3]],[[],["fixedsizebinaryarray",3]],[[],["fixedsizelistarray",3]],[[],["listarray",3]],[[],["nullarray",3]],[[],["primitivearray",3]],[[],["structarray",3]],[[],["utf8array",3]],[[],["bitmap",3]],[[],["slicesiterator",3]],[[],["buffer",3]],[[],["days_ms",3]],[[],["operator",4]],[[],["operator",4]],[[],["sortcolumn",3]],[[],["sortoptions",3]],[[],["serializeoptions",3]],[[],["block",3]],[[],["footer",3]],[[],["compressiontype",3]],[[],["bodycompressionmethod",3]],[[],["messageheader",3]],[[],["fieldnode",3]],[[],["bodycompression",3]],[[],["recordbatch",3]],[[],["dictionarybatch",3]],[[],["message",3]],[[],["metadataversion",3]],[[],["feature",3]],[[],["unionmode",3]],[[],["precision",3]],[[],["dateunit",3]],[[],["timeunit",3]],[[],["intervalunit",3]],[[],["type",3]],[[],["dictionarykind",3]],[[],["endianness",3]],[[],["buffer",3]],[[],["null",3]],[[],["struct_",3]],[[],["list",3]],[[],["largelist",3]],[[],["fixedsizelist",3]],[[],["map",3]],[[],["union",3]],[[],["int",3]],[[],["floatingpoint",3]],[[],["utf8",3]],[[],["binary",3]],[[],["largeutf8",3]],[[],["largebinary",3]],[[],["fixedsizebinary",3]],[[],["bool",3]],[[],["decimal",3]],[[],["date",3]],[[],["time",3]],[[],["timestamp",3]],[[],["interval",3]],[[],["duration",3]],[[],["keyvalue",3]],[[],["dictionaryencoding",3]],[[],["field",3]],[[],["schema",3]],[[],["sparsematrixcompressedaxis",3]],[[],["sparsetensorindex",3]],[[],["sparsetensorindexcoo",3]],[[],["sparsematrixindexcsx",3]],[[],["sparsetensorindexcsf",3]],[[],["sparsetensor",3]],[[],["tensordim",3]],[[],["tensor",3]],[[],["filemetadata",3]],[[],["arrowjsoncolumn",3]],[[],["primitivestatistics",3]],[[],["binarystatistics",3]],[[],["utf8statistics",3]],[[],["booleanstatistics",3]],[[],["recordbatch",3]],[[],["field",3]],[[],["schema",3]],[[],["datatype",4]],[[],["timeunit",4]],[[],["intervalunit",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["days_ms",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[["compressiontype",3]],["ordering",4]],[[["bodycompressionmethod",3]],["ordering",4]],[[["messageheader",3]],["ordering",4]],[[["metadataversion",3]],["ordering",4]],[[["feature",3]],["ordering",4]],[[["unionmode",3]],["ordering",4]],[[["precision",3]],["ordering",4]],[[["dateunit",3]],["ordering",4]],[[["timeunit",3]],["ordering",4]],[[["intervalunit",3]],["ordering",4]],[[["type",3]],["ordering",4]],[[["dictionarykind",3]],["ordering",4]],[[["endianness",3]],["ordering",4]],[[["sparsematrixcompressedaxis",3]],["ordering",4]],[[["sparsetensorindex",3]],["ordering",4]],[[["field",3]],["ordering",4]],[[["datatype",4]],["ordering",4]],[[["timeunit",4]],["ordering",4]],[[["intervalunit",4]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["buffer",3]],["bool",15]],[[["buffer",3]],["bool",15]],[[["days_ms",3]],["bool",15]],[[["days_ms",3]],["bool",15]],[[["operator",4]],["bool",15]],[[["operator",4]],["bool",15]],[[["serializeoptions",3]],["bool",15]],[[["serializeoptions",3]],["bool",15]],[[["block",3]],["bool",15]],[[["block",3]],["bool",15]],[[["footer",3]],["bool",15]],[[["footer",3]],["bool",15]],[[["compressiontype",3]],["bool",15]],[[["compressiontype",3]],["bool",15]],[[["bodycompressionmethod",3]],["bool",15]],[[["bodycompressionmethod",3]],["bool",15]],[[["messageheader",3]],["bool",15]],[[["messageheader",3]],["bool",15]],[[["fieldnode",3]],["bool",15]],[[["fieldnode",3]],["bool",15]],[[["bodycompression",3]],["bool",15]],[[["bodycompression",3]],["bool",15]],[[["recordbatch",3]],["bool",15]],[[["recordbatch",3]],["bool",15]],[[["dictionarybatch",3]],["bool",15]],[[["dictionarybatch",3]],["bool",15]],[[["message",3]],["bool",15]],[[["message",3]],["bool",15]],[[["metadataversion",3]],["bool",15]],[[["metadataversion",3]],["bool",15]],[[["feature",3]],["bool",15]],[[["feature",3]],["bool",15]],[[["unionmode",3]],["bool",15]],[[["unionmode",3]],["bool",15]],[[["precision",3]],["bool",15]],[[["precision",3]],["bool",15]],[[["dateunit",3]],["bool",15]],[[["dateunit",3]],["bool",15]],[[["timeunit",3]],["bool",15]],[[["timeunit",3]],["bool",15]],[[["intervalunit",3]],["bool",15]],[[["intervalunit",3]],["bool",15]],[[["type",3]],["bool",15]],[[["type",3]],["bool",15]],[[["dictionarykind",3]],["bool",15]],[[["dictionarykind",3]],["bool",15]],[[["endianness",3]],["bool",15]],[[["endianness",3]],["bool",15]],[[["buffer",3]],["bool",15]],[[["buffer",3]],["bool",15]],[[["null",3]],["bool",15]],[[["null",3]],["bool",15]],[[["struct_",3]],["bool",15]],[[["struct_",3]],["bool",15]],[[["list",3]],["bool",15]],[[["list",3]],["bool",15]],[[["largelist",3]],["bool",15]],[[["largelist",3]],["bool",15]],[[["fixedsizelist",3]],["bool",15]],[[["fixedsizelist",3]],["bool",15]],[[["map",3]],["bool",15]],[[["map",3]],["bool",15]],[[["union",3]],["bool",15]],[[["union",3]],["bool",15]],[[["int",3]],["bool",15]],[[["int",3]],["bool",15]],[[["floatingpoint",3]],["bool",15]],[[["floatingpoint",3]],["bool",15]],[[["utf8",3]],["bool",15]],[[["utf8",3]],["bool",15]],[[["binary",3]],["bool",15]],[[["binary",3]],["bool",15]],[[["largeutf8",3]],["bool",15]],[[["largeutf8",3]],["bool",15]],[[["largebinary",3]],["bool",15]],[[["largebinary",3]],["bool",15]],[[["fixedsizebinary",3]],["bool",15]],[[["fixedsizebinary",3]],["bool",15]],[[["bool",3]],["bool",15]],[[["bool",3]],["bool",15]],[[["decimal",3]],["bool",15]],[[["decimal",3]],["bool",15]],[[["date",3]],["bool",15]],[[["date",3]],["bool",15]],[[["time",3]],["bool",15]],[[["time",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["interval",3]],["bool",15]],[[["interval",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["keyvalue",3]],["bool",15]],[[["keyvalue",3]],["bool",15]],[[["dictionaryencoding",3]],["bool",15]],[[["dictionaryencoding",3]],["bool",15]],[[["field",3]],["bool",15]],[[["field",3]],["bool",15]],[[["schema",3]],["bool",15]],[[["schema",3]],["bool",15]],[[["sparsematrixcompressedaxis",3]],["bool",15]],[[["sparsematrixcompressedaxis",3]],["bool",15]],[[["sparsetensorindex",3]],["bool",15]],[[["sparsetensorindex",3]],["bool",15]],[[["sparsetensorindexcoo",3]],["bool",15]],[[["sparsetensorindexcoo",3]],["bool",15]],[[["sparsematrixindexcsx",3]],["bool",15]],[[["sparsematrixindexcsx",3]],["bool",15]],[[["sparsetensorindexcsf",3]],["bool",15]],[[["sparsetensorindexcsf",3]],["bool",15]],[[["sparsetensor",3]],["bool",15]],[[["sparsetensor",3]],["bool",15]],[[["tensordim",3]],["bool",15]],[[["tensordim",3]],["bool",15]],[[["tensor",3]],["bool",15]],[[["tensor",3]],["bool",15]],[[["primitivestatistics",3]],["bool",15]],[[["primitivestatistics",3]],["bool",15]],[[["binarystatistics",3]],["bool",15]],[[["binarystatistics",3]],["bool",15]],[[["utf8statistics",3]],["bool",15]],[[["utf8statistics",3]],["bool",15]],[[["booleanstatistics",3]],["bool",15]],[[["booleanstatistics",3]],["bool",15]],[[["recordbatch",3]],["bool",15]],[[["recordbatch",3]],["bool",15]],[[["field",3]],["bool",15]],[[["field",3]],["bool",15]],[[["schema",3]],["bool",15]],[[["schema",3]],["bool",15]],[[["datatype",4]],["bool",15]],[[["datatype",4]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["intervalunit",4]],["bool",15]],[[],[["option",4],["ordering",4]]],[[["compressiontype",3]],[["ordering",4],["option",4]]],[[["bodycompressionmethod",3]],[["ordering",4],["option",4]]],[[["messageheader",3]],[["ordering",4],["option",4]]],[[["metadataversion",3]],[["ordering",4],["option",4]]],[[["feature",3]],[["ordering",4],["option",4]]],[[["unionmode",3]],[["ordering",4],["option",4]]],[[["precision",3]],[["ordering",4],["option",4]]],[[["dateunit",3]],[["ordering",4],["option",4]]],[[["timeunit",3]],[["ordering",4],["option",4]]],[[["intervalunit",3]],[["ordering",4],["option",4]]],[[["type",3]],[["ordering",4],["option",4]]],[[["dictionarykind",3]],[["ordering",4],["option",4]]],[[["endianness",3]],[["ordering",4],["option",4]]],[[["sparsematrixcompressedaxis",3]],[["ordering",4],["option",4]]],[[["sparsetensorindex",3]],[["ordering",4],["option",4]]],[[["field",3]],[["ordering",4],["option",4]]],[[["datatype",4]],[["ordering",4],["option",4]]],[[["timeunit",4]],[["ordering",4],["option",4]]],[[["intervalunit",4]],[["ordering",4],["option",4]]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["parquetbytearraystatistics",3]],["result",6]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4]]],[[],[["zipvalidity",3],["binaryvalueiter",3]]],[[],["binaryvalueiter",3]],[[["asref",8]]],[[["asref",8]]],[[]],[[],["binaryarray",3]],[[]],[[["usize",15]]],[[["buffer",3],["option",4],["u8",15],["bitmap",3],["buffer",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["buffer",3]],[[]],[[],["buffer",3]],[[],[["zipvalidity",3],["bool",15],["bitmapiter",3]]],[[],["bitmapiter",3]],[[["trustedlen",8]]],[[["asref",8]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[["usize",15]]],[[["bitmap",3],["option",4]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[],["bitmap",3]],[[["datatype",4]],["dictionaryarray",3]],[[],["dictionaryarray",3]],[[["datatype",4]]],[[["usize",15],["datatype",4]]],[[["primitivearray",3],["array",8],["arc",3]]],[[["usize",15]]],[[],["primitivearray",3]],[[],["arc",3]],[[["usize",15]]],[[["datatype",4]],["fixedsizebinaryarray",3]],[[],[["fixedsizebinaryvaluesiter",3],["zipvalidity",3]]],[[["datatype",4]]],[[["usize",15],["datatype",4]]],[[["option",4],["u8",15],["bitmap",3],["datatype",4],["buffer",3]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[["datatype",4]],["fixedsizelistarray",3]],[[],["listiter",3]],[[["datatype",4]]],[[["usize",15],["datatype",4]]],[[["option",4],["arc",3],["bitmap",3],["datatype",4],["array",8]]],[[["usize",15]]],[[],["arc",3]],[[["usize",15]],[["array",8],["box",3]]],[[["usize",15],["datatype",4]],["datatype",4]],[[["usize",15]]],[[["datatype",4]],["listarray",3]],[[],["listiter",3]],[[["datatype",4]]],[[["usize",15],["datatype",4]]],[[["option",4],["arc",3],["bitmap",3],["datatype",4],["array",8],["buffer",3]]],[[["usize",15]],[["array",8],["box",3]]],[[["usize",15]],[["array",8],["box",3]]],[[["usize",15]]],[[],["buffer",3]],[[]],[[],["arc",3]],[[["datatype",4]],["datatype",4]],[[["datatype",4]],["field",3]],[[["datatype",4]],["datatype",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["asref",8]]],[[["vec",3]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[["datatype",4]],["primitivearray",3]],[[["intoiterator",8]]],[[]],[[["trustedlen",8]]],[[],[["zipvalidity",3],["iter",3]]],[[["datatype",4]]],[[["usize",15],["datatype",4]]],[[["option",4],["bitmap",3],["datatype",4],["buffer",3]]],[[["usize",15]]],[[],["buffer",3]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["vec",3],["arc",3],["field",3],["option",4],["bitmap",3],["vec",3]]],[[["usize",15]]],[[]],[[]],[[["datatype",4]]],[[["asref",8]]],[[["asref",8]]],[[["trustedlen",8]]],[[]],[[]],[[],["result",4]],[[],["utf8array",3]],[[],[["utf8valuesiter",3],["str",15],["zipvalidity",3]]],[[],["utf8valuesiter",3]],[[]],[[["usize",15]]],[[["buffer",3],["option",4],["u8",15],["bitmap",3],["buffer",3]]],[[["buffer",3],["option",4],["u8",15],["bitmap",3],["buffer",3]]],[[["usize",15]],["str",15]],[[["usize",15]]],[[["usize",15]],["str",15]],[[]],[[],["buffer",3]],[[]],[[],["buffer",3]],[[["bool",15],["usize",15]]],[[["bool",15],["usize",15]]],[[["bool",15],["usize",15]]],[[]],[[["bool",15],["usize",15]]],[[["bool",15],["usize",15]]],[[["bool",15],["usize",15]]],[[["bool",15],["usize",15]]],[[["bool",15],["usize",15]]],[[]],[[["usize",15]]],[[],["usize",15]],[[],["bool",15]],[[["usize",15],["mutablebuffer",3],["u8",15]]],[[["usize",15],["asref",8]]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],[["bool",15],["option",4]]],[[["usize",15]],["bool",15]],[[],[["bitchunk",8],["bitchunks",3]]],[[["iterator",8]]],[[["trustedlen",8]]],[[["trustedlen",8]],["result",4]],[[["iterator",8]],["result",4]],[[],["bitmapiter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["bool",15]]],[[],["usize",15]],[[["bool",15]]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[["usize",15],["bool",15]]],[[["usize",15]],["bool",15]],[[["usize",15],["bool",15]]],[[["trustedlen",8]]],[[["iterator",8]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["bitchunkiter",3]],[[["usize",15]]],[[["bitmap",3]]],[[],["usize",15]],[[["option",4]]],[[]],[[["usize",15]]],[[["bytes",3]]],[[],["usize",15]],[[],["bool",15]],[[]],[[["usize",15]]],[[]],[[["trustedlen",8]]],[[["trustedlen",8]],["result",4]],[[["iterator",8]]],[[["iterator",8]],["result",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["trustedlen",8]]],[[["iterator",8]]],[[["trustedlen",8],["iterator",8]]],[[["iterator",8]]],[[["trustedlen",8]],["result",4]],[[["iterator",8]],["result",4]],[[["trustedlen",8]]],[[["iterator",8]]],[[["usize",15]]],null,null,[[],["byterecord",3]],[[["usize",15]],["byterecord",3]],[[["option",4],["byterecord",3]],[["result",4],["error",3]]],[[],["byterecorditer",3]],[[["usize",15]],["option",4]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[],[["position",3],["option",4]]],[[["position",3],["option",4]]],[[["usize",15]],[["range",3],["option",4]]],[[]],[[],[["result",4],["reader",3],["error",3]]],[[],["reader",3]],[[],["deserializerecordsiter",3]],[[],["deserializerecordsintoiter",3]],[[],["stringrecordsiter",3]],[[],["stringrecordsintoiter",3]],[[],["byterecordsiter",3]],[[],["byterecordsintoiter",3]],[[],[["result",4],["error",3],["stringrecord",3]]],[[],[["byterecord",3],["result",4],["error",3]]],[[["stringrecord",3]]],[[["byterecord",3]]],[[["stringrecord",3]],[["bool",15],["result",4],["error",3]]],[[["byterecord",3]],[["bool",15],["result",4],["error",3]]],[[],["position",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["position",3]],[["result",4],["error",3]]],[[["seekfrom",4],["position",3]],[["result",4],["error",3]]],[[],["readerbuilder",3]],[[],[["result",4],["reader",3],["error",3]]],[[],["reader",3]],[[["u8",15]],["readerbuilder",3]],[[["bool",15]],["readerbuilder",3]],[[["bool",15]],["readerbuilder",3]],[[["trim",4]],["readerbuilder",3]],[[["terminator",4]],["readerbuilder",3]],[[["u8",15]],["readerbuilder",3]],[[["option",4],["u8",15]],["readerbuilder",3]],[[["bool",15]],["readerbuilder",3]],[[["bool",15]],["readerbuilder",3]],[[["option",4],["u8",15]],["readerbuilder",3]],[[],["readerbuilder",3]],[[["usize",15]],["readerbuilder",3]],[[],[["error",3],["writer",3],["result",4]]],[[],["writer",3]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["byterecord",3]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],[["result",4],["intoinnererror",3]]],[[],["writerbuilder",3]],[[],[["error",3],["writer",3],["result",4]]],[[],["writer",3]],[[["u8",15]],["writerbuilder",3]],[[["bool",15]],["writerbuilder",3]],[[["bool",15]],["writerbuilder",3]],[[["terminator",4]],["writerbuilder",3]],[[["quotestyle",4]],["writerbuilder",3]],[[["u8",15]],["writerbuilder",3]],[[["bool",15]],["writerbuilder",3]],[[["u8",15]],["writerbuilder",3]],[[["usize",15]],["writerbuilder",3]],[[],["errorkind",4]],[[],["errorkind",4]],[[],["bool",15]],[[],[["position",3],["option",4]]],[[["usize",15],["arc",3],["schema",3],["option",4],["vec",3]]],[[["usize",15],["schema",3],["arc",3],["bufreader",3],["option",4],["vec",3]]],[[],["arc",3]],[[],[["option",4],["result",6]]],[[]],[[["arc",3],["schema",3]]],[[["usize",15],["option",4]]],[[["usize",15]]],[[["string",3],["vec",3]]],[[],[["result",6],["reader",3]]],[[]],[[["value",4]],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[],["arc",3]],[[["filemetadata",3]]],[[],["arc",3]],[[["streammetadata",3]]],[[],["arc",3]],[[],["bool",15]],[[["schema",3]],["result",6]],[[["ipcwriteoptions",3],["schema",3]],["result",6]],[[["recordbatch",3]],["result",6]],[[],["result",6]],[[["schema",3]],["result",6]],[[["ipcwriteoptions",3],["schema",3]],["result",6]],[[["recordbatch",3]],["result",6]],[[],["result",6]],[[["usize",15],["option",4],["arc",3],["fn",8],["vec",3],["option",4],["arc",3],["option",4]],["result",6]],[[],["arc",3]],[[["option",4],["option",4],["vec",3],["i64",15],["vec",3],["rowgroupmetadata",3],["schemadescriptor",3],["vec",3],["i32",15],["global",3],["string",3],["option",4]],["filemetadata",3]],[[],["schemadescriptor",3]],[[],["option",4]],[[["usize",15]],["columnorder",4]],[[],[["filemetadata",3],["parqueterror",4],["result",4]]],[[["vec",3],["global",3],["string",3],["parquettype",4]],["schemadescriptor",3]],[[["usize",15]],["columndescriptor",3]],[[]],[[],["usize",15]],[[],["str",15]],[[]],[[["str",15]],[["schemadescriptor",3],["result",4],["parqueterror",4]]],[[],[["parquettype",4],["parqueterror",4],["result",4]]],[[],[["result",4],["vec",3],["parqueterror",4]]],[[],["basictypeinfo",3]],[[],["str",15]],[[],["bool",15]],[[["parquettype",4]],["bool",15]],[[["vec",3],["global",3],["string",3],["parquettype",4]],["parquettype",4]],[[["vec",3],["groupconvertedtype",4],["parquettype",4],["option",4],["option",4],["option",4],["i32",15],["global",3],["string",3],["fieldrepetitiontype",4]],["parquettype",4]],[[["fieldrepetitiontype",4],["option",4],["option",4],["primitiveconvertedtype",4],["logicaltype",4],["option",4],["i32",15],["physicaltype",4],["string",3]],[["parquettype",4],["parqueterror",4],["result",4]]],[[["string",3],["physicaltype",4]],["parquettype",4]],[[["vec",3],["groupconvertedtype",4],["parquettype",4],["option",4],["logicaltype",4],["option",4],["option",4],["i32",15],["global",3],["string",3],["fieldrepetitiontype",4]],[["parquettype",4],["parqueterror",4],["result",4]]],[[],["parqueterror",4]],[[],["option",4]],[[],["i64",15]],[[],["type",4]],[[],["columndescriptor",3]],[[],["physicaltype",4]],[[],[["option",4],["result",4]]],[[],["i64",15]],[[],["compressioncodec",4]],[[],["i64",15]],[[],["i64",15]],[[],["i64",15]],[[],["bool",15]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],["vec",3]],[[]],[[["columndescriptor",3],["columnchunk",3]],[["columnchunkmetadata",3],["parqueterror",4],["result",4]]],[[],["columnchunk",3]],[[["string",3],["vec",3],["i16",15],["global",3],["parquettype",4]],["columndescriptor",3]],[[],["i16",15]],[[],["i16",15]],[[]],[[],["parquettype",4]],[[],["physicaltype",4]],[[],["str",15]],[[],["usize",15]],[[["usize",15]],["columnchunkmetadata",3]],[[]],[[],["i64",15]],[[],["i64",15]],[[],["i64",15]],[[["schemadescriptor",3],["rowgroup",3]],[["rowgroupmetadata",3],["parqueterror",4],["result",4]]],[[],["rowgroup",3]],[[["pageheader",4],["usize",15],["compressioncodec",4],["u8",15],["option",4],["vec",3],["columndescriptor",3],["arc",3],["global",3]],["compressedpage",3]],[[],["pageheader",4]],[[],["usize",15]],[[],["usize",15]],[[],["compressioncodec",4]],[[],["usize",15]],[[],[["option",4],["result",4]]],[[],["columndescriptor",3]],[[["u8",15],["global",3],["pageiterator",3],["vec",3]],["decompressor",3]],[[]],[[["pageheader",4],["option",4],["columndescriptor",3],["u8",15],["arc",3],["global",3],["vec",3]],["page",3]],[[],["pageheader",4]],[[],[["option",4],["arc",3]]],[[]],[[],["usize",15]],[[],["encoding",4]],[[],[["option",4],["result",4]]],[[],["columndescriptor",3]],[[["tinputprotocol",8]],[["logicaltype",4],["result",4],["error",4]]],[[["toutputprotocol",8]],[["result",4],["error",4]]],[[["tinputprotocol",8]],[["timeunit",4],["result",4],["error",4]]],[[["toutputprotocol",8]],[["result",4],["error",4]]],[[["bool",15],["timeunit",4]],["timestamptype",3]],[[["tinputprotocol",8]],[["result",4],["timestamptype",3],["error",4]]],[[["toutputprotocol",8]],[["result",4],["error",4]]],[[["toutputprotocol",8]],[["result",4],["error",4]]],[[["tinputprotocol",8]],[["error",4],["result",4],["compressioncodec",4]]],[[["bool",15],["datatype",4],["str",15]]],[[["bool",15],["datatype",4],["i64",15],["str",15]]],[[["btreemap",3],["option",4]]],[[],["option",4]],[[],["string",3]],[[],["datatype",4]],[[],["bool",15]],[[],[["i64",15],["option",4]]],[[],[["bool",15],["option",4]]],[[["field",3]],["result",6]],[[]],[[["field",3],["vec",3]]],[[["string",3],["vec",3],["field",3],["hashmap",3]]],[[],["result",6]],[[],["vec",3]],[[["usize",15]],["field",3]],[[["str",15]],[["result",6],["field",3]]],[[["i64",15]],[["vec",3],["field",3]]],[[["str",15]],[["usize",15],["result",6]]],[[],["hashmap",3]],[[["str",15]],["option",4]],[[],["deallocation",4]],[[],[["result",6],["option",4]]],[[["usize",15]],[["result",6],["buffer",3]]],[[["usize",15]],[["result",6],["bitmap",3]]],[[["usize",15]],[["result",6],["arrowarraychild",3]]],[[]]],"p":[[8,"Growable"],[8,"Array"],[8,"Offset"],[8,"FromFfi"],[8,"ToArray"],[8,"IntoArray"],[8,"TryFromIterator"],[8,"Builder"],[8,"IterableListArray"],[8,"GenericBinaryArray"],[8,"BitChunk"],[4,"ArrowError"],[8,"FromMaskChunk"],[8,"NativeSimd"],[8,"Simd"],[3,"u8x64"],[3,"u16x32"],[3,"u32x16"],[3,"u64x8"],[3,"i8x64"],[3,"i16x32"],[3,"i32x16"],[3,"i64x8"],[3,"f32x16"],[3,"f64x8"],[8,"NaturalDataType"],[8,"Relation"],[8,"NativeType"],[3,"days_ms"],[8,"Sum"],[8,"SimdOrd"],[4,"Operator"],[8,"ArrayAdd"],[8,"ArrayCheckedAdd"],[8,"ArraySaturatingAdd"],[8,"ArrayOverflowingAdd"],[8,"ArraySub"],[8,"ArrayCheckedSub"],[8,"ArraySaturatingSub"],[8,"ArrayOverflowingSub"],[8,"ArrayMul"],[8,"ArrayCheckedMul"],[8,"ArraySaturatingMul"],[8,"ArrayOverflowingMul"],[8,"ArrayDiv"],[8,"ArrayCheckedDiv"],[8,"ArrayRem"],[8,"ArrayCheckedRem"],[4,"Operator"],[3,"SortColumn"],[3,"SortOptions"],[3,"SerializeOptions"],[8,"ToJson"],[3,"Block"],[3,"Footer"],[3,"FooterArgs"],[3,"FooterBuilder"],[3,"CompressionType"],[3,"BodyCompressionMethod"],[3,"MessageHeader"],[3,"FieldNode"],[3,"BodyCompression"],[3,"BodyCompressionArgs"],[3,"BodyCompressionBuilder"],[3,"RecordBatch"],[3,"RecordBatchArgs"],[3,"RecordBatchBuilder"],[3,"DictionaryBatch"],[3,"DictionaryBatchArgs"],[3,"DictionaryBatchBuilder"],[3,"Message"],[3,"MessageArgs"],[3,"MessageBuilder"],[3,"MetadataVersion"],[3,"Feature"],[3,"UnionMode"],[3,"Precision"],[3,"DateUnit"],[3,"TimeUnit"],[3,"IntervalUnit"],[3,"Type"],[3,"DictionaryKind"],[3,"Endianness"],[3,"Buffer"],[3,"Null"],[3,"NullBuilder"],[3,"Struct_"],[3,"Struct_Builder"],[3,"List"],[3,"ListBuilder"],[3,"LargeList"],[3,"LargeListBuilder"],[3,"FixedSizeList"],[3,"FixedSizeListArgs"],[3,"FixedSizeListBuilder"],[3,"Map"],[3,"MapArgs"],[3,"MapBuilder"],[3,"Union"],[3,"UnionArgs"],[3,"UnionBuilder"],[3,"Int"],[3,"IntArgs"],[3,"IntBuilder"],[3,"FloatingPoint"],[3,"FloatingPointArgs"],[3,"FloatingPointBuilder"],[3,"Utf8"],[3,"Utf8Builder"],[3,"Binary"],[3,"BinaryBuilder"],[3,"LargeUtf8"],[3,"LargeUtf8Builder"],[3,"LargeBinary"],[3,"LargeBinaryBuilder"],[3,"FixedSizeBinary"],[3,"FixedSizeBinaryArgs"],[3,"FixedSizeBinaryBuilder"],[3,"Bool"],[3,"BoolBuilder"],[3,"Decimal"],[3,"DecimalArgs"],[3,"DecimalBuilder"],[3,"Date"],[3,"DateArgs"],[3,"DateBuilder"],[3,"Time"],[3,"TimeArgs"],[3,"TimeBuilder"],[3,"Timestamp"],[3,"TimestampArgs"],[3,"TimestampBuilder"],[3,"Interval"],[3,"IntervalArgs"],[3,"IntervalBuilder"],[3,"Duration"],[3,"DurationArgs"],[3,"DurationBuilder"],[3,"KeyValue"],[3,"KeyValueArgs"],[3,"KeyValueBuilder"],[3,"DictionaryEncoding"],[3,"DictionaryEncodingArgs"],[3,"DictionaryEncodingBuilder"],[3,"Field"],[3,"FieldArgs"],[3,"FieldBuilder"],[3,"Schema"],[3,"SchemaArgs"],[3,"SchemaBuilder"],[3,"SparseMatrixCompressedAxis"],[3,"SparseTensorIndex"],[3,"SparseTensorIndexCOO"],[3,"SparseTensorIndexCOOArgs"],[3,"SparseTensorIndexCOOBuilder"],[3,"SparseMatrixIndexCSX"],[3,"SparseMatrixIndexCSXArgs"],[3,"SparseMatrixIndexCSXBuilder"],[3,"SparseTensorIndexCSF"],[3,"SparseTensorIndexCSFArgs"],[3,"SparseTensorIndexCSFBuilder"],[3,"SparseTensor"],[3,"SparseTensorArgs"],[3,"SparseTensorBuilder"],[3,"TensorDim"],[3,"TensorDimArgs"],[3,"TensorDimBuilder"],[3,"Tensor"],[3,"TensorArgs"],[3,"TensorBuilder"],[3,"IpcWriteOptions"],[3,"DictionaryTracker"],[3,"EncodedData"],[3,"ArrowJson"],[3,"ArrowJsonSchema"],[3,"ArrowJsonField"],[3,"ArrowJsonFieldDictionary"],[3,"DictionaryIndexType"],[3,"ArrowJsonBatch"],[3,"ArrowJsonDictionaryBatch"],[3,"ArrowJsonColumn"],[3,"FileMetaData"],[4,"ParquetType"],[13,"PrimitiveType"],[13,"GroupType"],[3,"PrimitiveStatistics"],[3,"BinaryStatistics"],[3,"Utf8Statistics"],[3,"BooleanStatistics"],[8,"Statistics"],[4,"ParquetError"],[4,"PageHeader"],[8,"StreamingIterator"],[4,"LogicalType"],[4,"PhysicalType"],[4,"PrimitiveConvertedType"],[4,"ParquetTimeUnit"],[3,"TimestampType"],[4,"CompressionCodec"],[3,"WriteOptions"],[3,"RecordBatch"],[3,"RecordBatchOptions"],[8,"RecordBatchReader"],[4,"DataType"],[4,"TimeUnit"],[4,"IntervalUnit"],[8,"ArrowArrayRef"],[3,"BinaryPrimitive"],[3,"BinaryArray"],[3,"BooleanArray"],[3,"DictionaryPrimitive"],[3,"DictionaryArray"],[3,"FixedSizeBinaryPrimitive"],[3,"FixedSizeBinaryArray"],[3,"FixedSizeListPrimitive"],[3,"FixedSizeListArray"],[3,"ListPrimitive"],[3,"ListArray"],[3,"NullArray"],[3,"Primitive"],[3,"PrimitiveArray"],[3,"StructArray"],[3,"Utf8Primitive"],[3,"Utf8Array"],[3,"GrowableBinary"],[3,"GrowableBoolean"],[3,"GrowableFixedSizeBinary"],[3,"GrowableNull"],[3,"GrowablePrimitive"],[3,"GrowableList"],[3,"GrowableStruct"],[3,"GrowableUtf8"],[3,"GrowableDictionary"],[3,"Bitmap"],[3,"MutableBitmap"],[3,"BitChunks"],[3,"BitmapIter"],[3,"SlicesIterator"],[3,"ZipValidity"],[3,"Buffer"],[3,"MutableBuffer"],[3,"BitChunkIter"],[3,"ByteRecord"],[3,"Reader"],[3,"ReaderBuilder"],[3,"Writer"],[3,"WriterBuilder"],[3,"CSVError"],[3,"Reader"],[3,"ReaderBuilder"],[3,"Writer"],[4,"FooterOffset"],[3,"MessageHeaderUnionTableOffset"],[4,"BodyCompressionOffset"],[4,"RecordBatchOffset"],[4,"DictionaryBatchOffset"],[4,"MessageOffset"],[3,"TypeUnionTableOffset"],[4,"NullOffset"],[3,"NullArgs"],[4,"Struct_Offset"],[3,"Struct_Args"],[4,"ListOffset"],[3,"ListArgs"],[4,"LargeListOffset"],[3,"LargeListArgs"],[4,"FixedSizeListOffset"],[4,"MapOffset"],[4,"UnionOffset"],[4,"IntOffset"],[4,"FloatingPointOffset"],[4,"Utf8Offset"],[3,"Utf8Args"],[4,"BinaryOffset"],[3,"BinaryArgs"],[4,"LargeUtf8Offset"],[3,"LargeUtf8Args"],[4,"LargeBinaryOffset"],[3,"LargeBinaryArgs"],[4,"FixedSizeBinaryOffset"],[4,"BoolOffset"],[3,"BoolArgs"],[4,"DecimalOffset"],[4,"DateOffset"],[4,"TimeOffset"],[4,"TimestampOffset"],[4,"IntervalOffset"],[4,"DurationOffset"],[4,"KeyValueOffset"],[4,"DictionaryEncodingOffset"],[4,"FieldOffset"],[4,"SchemaOffset"],[3,"SparseTensorIndexUnionTableOffset"],[4,"SparseTensorIndexCOOOffset"],[4,"SparseMatrixIndexCSXOffset"],[4,"SparseTensorIndexCSFOffset"],[4,"SparseTensorOffset"],[4,"TensorDimOffset"],[4,"TensorOffset"],[3,"FileMetadata"],[3,"FileReader"],[3,"StreamMetadata"],[3,"StreamReader"],[3,"StreamWriter"],[3,"FileWriter"],[3,"RecordReader"],[3,"SchemaDescriptor"],[3,"ColumnChunkMetaData"],[3,"ColumnDescriptor"],[3,"RowGroupMetaData"],[3,"CompressedPage"],[3,"Decompressor"],[3,"Page"],[3,"Field"],[3,"Schema"],[3,"ArrowArray"]]}\
}');
initSearch(searchIndex);