var searchIndex = JSON.parse('{\
"arrow2":{"doc":"Doc provided by README","tn":["alloc","array","bitmap","buffer","compute","datatypes","error","ffi","io","record_batch","scalar","temporal_conversions","trusted_len","types","util","ALIGNMENT","allocate_aligned","allocate_aligned_zeroed","dangling","free_aligned","reallocate","total_allocated_bytes","Array","ArrayRef","BinaryArray","BooleanArray","DaysMsArray","DaysMsVec","DictionaryArray","DictionaryKey","FixedSizeBinaryArray","FixedSizeListArray","Float32Array","Float32Vec","Float64Array","Float64Vec","FromFfi","GenericBinaryArray","Int128Array","Int128Vec","Int16Array","Int16Vec","Int32Array","Int32Vec","Int64Array","Int64Vec","Int8Array","Int8Vec","IterableListArray","ListArray","MonthsDaysNsArray","MonthsDaysNsVec","MutableArray","MutableBinaryArray","MutableBooleanArray","MutableDictionaryArray","MutableFixedSizeBinaryArray","MutableFixedSizeListArray","MutableListArray","MutablePrimitiveArray","MutableUtf8Array","NullArray","Offset","PrimitiveArray","StructArray","ToFfi","TryExtend","TryPush","UInt16Array","UInt16Vec","UInt32Array","UInt32Vec","UInt64Array","UInt64Vec","UInt8Array","UInt8Vec","UnionArray","Utf8Array","Utf8ValuesIter","add","add","add","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","buffers","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_rem","checked_rem","checked_sub","checked_sub","checked_sub","children","children","children","children","children","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default_data_type","default_data_type","default_datatype","default_datatype","div","div","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","extend","extend","extend","extend","extend_from_slice","extend_trusted_len","extend_trusted_len_unchecked","extend_trusted_len_values","extend_trusted_len_values_unchecked","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data_unchecked","from_data_unchecked","from_isize","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_values","get_child_field","get_child_type","get_display","get_fields","get_fields","growable","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_data","into_data","into_iter","is_empty","is_empty","is_large","is_null","is_sparse","is_valid","is_valid","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","keys","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","mul","mul","mul","mut_values","mut_values","mut_values","new","new","new","new","new","new","new","new","new","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty_array","new_from","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null_array","new_with_capacity","new_with_field","next","next_back","null_count","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","ord","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_sub","overflowing_sub","push","push","push","push","push","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","rem","rem","reserve","reserve","reserve","reserve","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","set","set","set_validity","set_values","size","size_hint","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","sub","sub","sub","to","to","to_isize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_ffi","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push_valid","try_push_valid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","value","value","value","value","value","value","value","value","value","value","value","value","value","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_mut_slice","values_mut_slice","with_capacities","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_from","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","Growable","GrowableBinary","GrowableBoolean","GrowableDictionary","GrowableFixedSizeBinary","GrowableList","GrowableNull","GrowablePrimitive","GrowableStruct","GrowableUtf8","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","make_growable","new","new","new","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DynComparator","build_compare","total_cmp","total_cmp_f32","total_cmp_f64","Bitmap","MutableBitmap","as_slice","as_slice","binary","borrow","borrow","borrow_mut","borrow_mut","capacity","chunks","clear","clone","clone_into","default","default","eq","eq","extend_constant","extend_from_bitmap","extend_from_slice","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","fmt","fmt","from","from","from","from","from","from_buffer","from_iter","from_iter","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_u8_buffer","from_u8_slice","get","get","get_bit","get_bit_unchecked","into","into","is_empty","is_empty","iter","iter","len","len","new","new","new_zeroed","null_count","null_count","null_count_range","push","push_unchecked","quaternary","reserve","set","slice","ternary","to_owned","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","type_id","type_id","unary","utils","with_capacity","BitChunk","BitChunkIterExact","BitChunks","BitChunksExact","BitmapIter","Bytes","SlicesIterator","ZipValidity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_for","clone","clone","clone","clone_into","clone_into","clone_into","count_zeros","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ne_bytes","get_bit","get_bit_unchecked","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_set","len","len","new","new","new","new","new","next","next","next","next","next","next_back","next_back","one","remainder","remainder","remainder","remainder","remainder","remainder_iter","remainder_len","set","set_bit","size_hint","size_hint","size_hint","size_hint","slots","to_ne_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","zero","zip_validity","Buffer","MutableBuffer","as_mut_ptr","as_mut_slice","as_ptr","as_ptr","as_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","default","deref","deref","deref_mut","drop","eq","eq","extend","extend_constant","extend_from_slice","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","fmt","fmt","from","from","from","from","from","from","from_bytes","from_chunk_iter","from_chunk_iter_unchecked","from_iter","from_iter","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","into","into","is_empty","is_empty","len","len","ne","new","new","new_zeroed","push","reserve","resize","set_len","shrink_to_fit","slice","to_owned","truncate","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","type_id","type_id","with_capacity","aggregate","arithmetics","arity","boolean","boolean_kleene","cast","comparison","concat","contains","filter","hash","if_then_else","length","like","limit","merge_sort","nullif","partition","regex_match","sort","substring","take","temporal","window","MAX","MAX","MIN","MIN","SimdOrd","Sum","can_sum","estimated_bytes_size","max","max","max_binary","max_boolean","max_element","max_primitive","max_string","min","min","min_binary","min_boolean","min_element","min_primitive","min_string","new_max","new_min","simd_sum","sum","sum_primitive","Add","ArrayAdd","ArrayCheckedAdd","ArrayCheckedDiv","ArrayCheckedMul","ArrayCheckedRem","ArrayCheckedSub","ArrayDiv","ArrayMul","ArrayOverflowingAdd","ArrayOverflowingMul","ArrayOverflowingSub","ArrayRem","ArraySaturatingAdd","ArraySaturatingMul","ArraySaturatingSub","ArraySub","Divide","Multiply","NotI128","Operator","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Remainder","Subtract","add","arithmetic","arithmetic_primitive","arithmetic_primitive_scalar","basic","borrow","borrow_mut","can_arithmetic","checked_add","checked_div","checked_mul","checked_rem","checked_sub","clone","clone_into","decimal","div","eq","equivalent","fmt","from","get_hash","hash","into","mul","negate","overflowing_add","overflowing_mul","overflowing_sub","rem","saturating_add","saturating_mul","saturating_sub","sub","time","to_owned","try_from","try_into","type_id","add","div","mul","pow","rem","sub","add","add_scalar","checked_add","checked_add_scalar","overflowing_add","overflowing_add_scalar","saturating_add","saturating_add_scalar","checked_div","checked_div_scalar","div","div_scalar","checked_mul","checked_mul_scalar","mul","mul_scalar","overflowing_mul","overflowing_mul_scalar","saturating_mul","saturating_mul_scalar","checked_powf_scalar","powf_scalar","checked_rem","checked_rem_scalar","rem","rem_scalar","checked_sub","checked_sub_scalar","overflowing_sub","overflowing_sub_scalar","saturating_sub","saturating_sub_scalar","sub","sub_scalar","add","div","mul","sub","adaptive_add","add","checked_add","saturating_add","adaptive_div","checked_div","div","saturating_div","adaptive_mul","checked_mul","mul","saturating_mul","adaptive_sub","checked_sub","saturating_sub","sub","add_duration","subtract_duration","subtract_timestamps","binary","binary_checked","binary_with_bitmap","try_binary","try_unary","unary","unary_checked","unary_with_bitmap","and","is_not_null","is_null","not","or","and","or","binary_large_to_binary","binary_to_dictionary","binary_to_large_binary","binary_to_primitive","boolean_to_binary","boolean_to_primitive","boolean_to_utf8","can_cast_types","cast","date32_to_date64","date64_to_date32","dictionary_to_dictionary_keys","dictionary_to_dictionary_values","dictionary_to_values","naive_timestamp_to_utf8","primitive_as_primitive","primitive_to_binary","primitive_to_boolean","primitive_to_dictionary","primitive_to_primitive","primitive_to_same_primitive","primitive_to_utf8","time32_to_time64","time32ms_to_time32s","time32s_to_time32ms","time64_to_time32","time64ns_to_time64us","time64us_to_time64ns","timestamp_to_date32","timestamp_to_date64","timestamp_to_timestamp","timestamp_to_utf8","utf8_large_to_utf8","utf8_to_date32","utf8_to_date64","utf8_to_dictionary","utf8_to_large_utf8","utf8_to_naive_timestamp_ns","utf8_to_primitive","utf8_to_timestamp_ns","wrapping_cast","wrapping_dictionary_to_dictionary_keys","wrapping_dictionary_to_dictionary_values","Eq","Gt","GtEq","Lt","LtEq","Neq","Operator","Simd","Simd8","Simd8Lanes","binary_compare","binary_compare_scalar","boolean_compare","boolean_compare_scalar","borrow","borrow_mut","can_compare","clone","clone_into","compare","compare_scalar","eq","eq","equivalent","fmt","from","from_chunk","from_incomplete_chunk","get_hash","gt","gt_eq","hash","into","lt","lt_eq","neq","primitive_compare","primitive_compare_scalar","to_owned","try_from","try_into","type_id","utf8_compare","utf8_compare_scalar","concatenate","contains","Filter","build_filter","filter","filter_record_batch","can_hash","hash","hash_binary","hash_boolean","hash_primitive","hash_utf8","if_then_else","can_length","length","like_binary","like_binary_scalar","like_utf8","like_utf8_scalar","nlike_binary","nlike_binary_scalar","nlike_utf8","nlike_utf8_scalar","limit","MergeSlice","MergeSortSlices","borrow","borrow_mut","build_comparator","from","into","into_iter","merge_sort","merge_sort_slices","next","slices","take_arrays","to_vec","try_from","try_into","type_id","can_nullif","nullif","nullif_primitive","lexicographical_partition_ranges","regex_match","regex_match_scalar","SortColumn","SortOptions","borrow","borrow","borrow_mut","borrow_mut","can_sort","clone","clone","clone_into","clone_into","default","descending","fmt","fmt","from","from","into","into","lexsort","lexsort_to_indices","nulls_first","options","sort","sort_to_indices","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","values","can_substring","substring","can_take","take","can_hour","can_year","hour","year","shift","Binary","Binary","Boolean","Boolean","DataType","Date32","Date64","DayTime","DaysMs","Decimal","Dictionary","Dictionary","DictionaryIndexType","Duration","Extension","Field","FixedSizeBinary","FixedSizeBinary","FixedSizeList","FixedSizeList","Float16","Float32","Float32","Float64","Float64","Int128","Int16","Int16","Int16","Int32","Int32","Int32","Int64","Int64","Int64","Int8","Int8","Int8","Interval","IntervalUnit","LargeBinary","LargeBinary","LargeList","LargeList","LargeUtf8","LargeUtf8","List","List","Microsecond","Millisecond","MonthDayNano","MonthDayNano","Nanosecond","Null","Null","PhysicalType","Primitive","PrimitiveType","Schema","SchemaRef","Second","Struct","Struct","Time32","Time64","TimeUnit","Timestamp","UInt16","UInt16","UInt16","UInt32","UInt32","UInt32","UInt64","UInt64","UInt64","UInt8","UInt8","UInt8","Union","Union","Utf8","Utf8","YearMonth","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column_with_name","data_type","data_type","dict_id","dict_id","dict_is_ordered","dict_is_ordered","empty","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","field","field_with_name","fields","fields_with_dict_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","index_of","into","into","into","into","into","into","into","into","is_nullable","metadata","metadata","metadata","name","name","ne","ne","ne","ne","new","new","new_dict","new_from","nullable","set_metadata","to_logical_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical_type","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_merge","try_merge","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_metadata","with_metadata","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","2","2","0","0","ArithmeticError","ArrowError","External","ExternalFormat","Ffi","InvalidArgumentError","Io","Ipc","KeyOverflowError","NotYetImplemented","Other","Result","Schema","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","from_external_error","into","to_string","try_from","try_into","type_id","0","0","0","0","0","0","0","0","0","0","1","Ffi_ArrowArray","Ffi_ArrowSchema","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","drop","empty","empty","export_array_to_c","export_field_to_c","fmt","fmt","from","from","import_array_from_c","import_field_from_c","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","csv","ipc","json","json_integration","parquet","print","CSVError","borrow","borrow_mut","custom","fmt","fmt","from","from","into","into_kind","is_io_error","kind","position","read","source","to_string","try_from","try_into","type_id","write","ByteRecord","Reader","ReaderBuilder","ascii","borrow","borrow","borrow_mut","borrow_mut","buffer_capacity","byte_headers","byte_records","comment","default","delimiter","deserialize","deserialize_batch","deserialize_column","double_quote","escape","flexible","fmt","fmt","from","from","from_path","from_path","from_reader","from_reader","get_mut","get_ref","has_headers","has_headers","headers","infer","infer_schema","into","into","into_byte_records","into_deserialize","into_inner","into_records","is_done","new","position","projected_schema","quote","quoting","read_byte_record","read_record","read_rows","records","seek","seek_raw","set_byte_headers","set_headers","terminator","trim","try_from","try_from","try_into","try_into","type_id","type_id","ByteRecord","SerializeOptions","Writer","WriterBuilder","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_capacity","clear","clone","clone","clone_into","clone_into","date_format","default","default","default","delimiter","deserialize","double_quote","drop","eq","eq","eq","eq","equivalent","equivalent","escape","extend","flexible","flush","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_path","from_path","from_writer","from_writer","get","get_hash","has_headers","hash","index","into","into","into","into","into_inner","is_empty","iter","len","ne","new","new","new_serializer","position","push_field","quote","quote_style","range","serialize","serialize","set_position","terminator","time_format","timestamp_format","to_owned","to_owned","trim","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity","write_batch","write_byte_record","write_field","write_header","write_record","fb_to_schema","gen","read","write","File","Message","Schema","SparseTensor","Tensor","0","Block","Footer","FooterArgs","FooterBuilder","FooterOffset","VT_CUSTOM_METADATA","VT_DICTIONARIES","VT_RECORDBATCHES","VT_SCHEMA","VT_VERSION","_tab","add_custom_metadata","add_dictionaries","add_recordBatches","add_schema","add_version","bodyLength","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create","custom_metadata","custom_metadata","default","dictionaries","dictionaries","eq","eq","finish","finish_footer_buffer","finish_size_prefixed_footer_buffer","fmt","fmt","follow","follow","from","from","from","from","from","get_root_as_footer","get_size_prefixed_root_as_footer","init_from_table","into","into","into","into","into","metaDataLength","ne","ne","new","new","offset","push","recordBatches","recordBatches","root_as_footer","root_as_footer_unchecked","root_as_footer_with_opts","run_verifier","run_verifier","schema","schema","set_bodyLength","set_metaDataLength","set_offset","size_prefixed_root_as_footer","size_prefixed_root_as_footer_unchecked","size_prefixed_root_as_footer_with_opts","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","version","0","0","0","0","BUFFER","BodyCompression","BodyCompressionArgs","BodyCompressionBuilder","BodyCompressionMethod","BodyCompressionOffset","CompressionType","DictionaryBatch","DictionaryBatch","DictionaryBatchArgs","DictionaryBatchBuilder","DictionaryBatchOffset","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX_BODY_COMPRESSION_METHOD","ENUM_MAX_COMPRESSION_TYPE","ENUM_MAX_MESSAGE_HEADER","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN_BODY_COMPRESSION_METHOD","ENUM_MIN_COMPRESSION_TYPE","ENUM_MIN_MESSAGE_HEADER","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES_BODY_COMPRESSION_METHOD","ENUM_VALUES_COMPRESSION_TYPE","ENUM_VALUES_MESSAGE_HEADER","FieldNode","LZ4_FRAME","Message","MessageArgs","MessageBuilder","MessageHeader","MessageHeaderUnionTableOffset","MessageOffset","NONE","RecordBatch","RecordBatch","RecordBatchArgs","RecordBatchBuilder","RecordBatchOffset","Schema","SparseTensor","Tensor","VT_BODYLENGTH","VT_BUFFERS","VT_CODEC","VT_COMPRESSION","VT_CUSTOM_METADATA","VT_DATA","VT_HEADER","VT_HEADER_TYPE","VT_ID","VT_ISDELTA","VT_LENGTH","VT_METHOD","VT_NODES","VT_VERSION","ZSTD","_tab","_tab","_tab","_tab","add_bodyLength","add_buffers","add_codec","add_compression","add_custom_metadata","add_data","add_header","add_header_type","add_id","add_isDelta","add_length","add_method","add_nodes","add_version","bodyLength","bodyLength","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","codec","codec","compression","compression","create","create","create","create","custom_metadata","custom_metadata","data","data","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","finish","finish","finish","finish","finish_message_buffer","finish_size_prefixed_message_buffer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","follow","follow","follow","follow","follow","follow","follow","follow","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_little_endian","from_little_endian","from_little_endian","get_hash","get_hash","get_hash","get_root_as_message","get_size_prefixed_root_as_message","hash","hash","hash","header","header","header_as_dictionary_batch","header_as_record_batch","header_as_schema","header_as_sparse_tensor","header_as_tensor","header_type","header_type","id","id","init_from_table","init_from_table","init_from_table","init_from_table","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","isDelta","isDelta","length","length","length","method","method","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","nodes","nodes","null_count","partial_cmp","partial_cmp","partial_cmp","push","push","push","push","root_as_message","root_as_message_unchecked","root_as_message_with_opts","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","set_length","set_null_count","size_prefixed_root_as_message","size_prefixed_root_as_message_unchecked","size_prefixed_root_as_message_with_opts","to_little_endian","to_little_endian","to_little_endian","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_name","variant_name","variant_name","version","version","0","0","0","0","0","0","0","0","0","0","0","Big","Binary","Binary","BinaryArgs","BinaryBuilder","BinaryOffset","Bool","Bool","BoolArgs","BoolBuilder","BoolOffset","Buffer","COMPRESSED_BODY","DAY","DAY_TIME","DICTIONARY_REPLACEMENT","DOUBLE","Date","Date","DateArgs","DateBuilder","DateOffset","DateUnit","Decimal","Decimal","DecimalArgs","DecimalBuilder","DecimalOffset","Dense","DenseArray","DictionaryEncoding","DictionaryEncodingArgs","DictionaryEncodingBuilder","DictionaryEncodingOffset","DictionaryKind","Duration","Duration","DurationArgs","DurationBuilder","DurationOffset","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX_DATE_UNIT","ENUM_MAX_DICTIONARY_KIND","ENUM_MAX_ENDIANNESS","ENUM_MAX_FEATURE","ENUM_MAX_INTERVAL_UNIT","ENUM_MAX_METADATA_VERSION","ENUM_MAX_PRECISION","ENUM_MAX_TIME_UNIT","ENUM_MAX_TYPE","ENUM_MAX_UNION_MODE","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN_DATE_UNIT","ENUM_MIN_DICTIONARY_KIND","ENUM_MIN_ENDIANNESS","ENUM_MIN_FEATURE","ENUM_MIN_INTERVAL_UNIT","ENUM_MIN_METADATA_VERSION","ENUM_MIN_PRECISION","ENUM_MIN_TIME_UNIT","ENUM_MIN_TYPE","ENUM_MIN_UNION_MODE","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES_DATE_UNIT","ENUM_VALUES_DICTIONARY_KIND","ENUM_VALUES_ENDIANNESS","ENUM_VALUES_FEATURE","ENUM_VALUES_INTERVAL_UNIT","ENUM_VALUES_METADATA_VERSION","ENUM_VALUES_PRECISION","ENUM_VALUES_TIME_UNIT","ENUM_VALUES_TYPE","ENUM_VALUES_UNION_MODE","Endianness","Feature","Field","FieldArgs","FieldBuilder","FieldOffset","FixedSizeBinary","FixedSizeBinary","FixedSizeBinaryArgs","FixedSizeBinaryBuilder","FixedSizeBinaryOffset","FixedSizeList","FixedSizeList","FixedSizeListArgs","FixedSizeListBuilder","FixedSizeListOffset","FloatingPoint","FloatingPoint","FloatingPointArgs","FloatingPointBuilder","FloatingPointOffset","HALF","Int","Int","IntArgs","IntBuilder","IntOffset","Interval","Interval","IntervalArgs","IntervalBuilder","IntervalOffset","IntervalUnit","KeyValue","KeyValueArgs","KeyValueBuilder","KeyValueOffset","LargeBinary","LargeBinary","LargeBinaryArgs","LargeBinaryBuilder","LargeBinaryOffset","LargeList","LargeList","LargeListArgs","LargeListBuilder","LargeListOffset","LargeUtf8","LargeUtf8","LargeUtf8Args","LargeUtf8Builder","LargeUtf8Offset","List","List","ListArgs","ListBuilder","ListOffset","Little","MICROSECOND","MILLISECOND","MILLISECOND","MONTH_DAY_NANO","Map","Map","MapArgs","MapBuilder","MapOffset","MetadataVersion","NANOSECOND","NONE","Null","Null","NullArgs","NullBuilder","NullOffset","Precision","SECOND","SINGLE","Schema","SchemaArgs","SchemaBuilder","SchemaOffset","Sparse","Struct_","Struct_","Struct_Args","Struct_Builder","Struct_Offset","Time","Time","TimeArgs","TimeBuilder","TimeOffset","TimeUnit","Timestamp","Timestamp","TimestampArgs","TimestampBuilder","TimestampOffset","Type","TypeUnionTableOffset","UNUSED","Union","Union","UnionArgs","UnionBuilder","UnionMode","UnionOffset","Utf8","Utf8","Utf8Args","Utf8Builder","Utf8Offset","V1","V2","V3","V4","V5","VT_BITWIDTH","VT_BITWIDTH","VT_BITWIDTH","VT_BYTEWIDTH","VT_CHILDREN","VT_CUSTOM_METADATA","VT_CUSTOM_METADATA","VT_DICTIONARY","VT_DICTIONARYKIND","VT_ENDIANNESS","VT_FEATURES","VT_FIELDS","VT_ID","VT_INDEXTYPE","VT_ISORDERED","VT_IS_SIGNED","VT_KEY","VT_KEYSSORTED","VT_LISTSIZE","VT_MODE","VT_NAME","VT_NULLABLE","VT_PRECISION","VT_PRECISION","VT_SCALE","VT_TIMEZONE","VT_TYPEIDS","VT_TYPE_","VT_TYPE_TYPE","VT_UNIT","VT_UNIT","VT_UNIT","VT_UNIT","VT_UNIT","VT_VALUE","YEAR_MONTH","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","add_bitWidth","add_bitWidth","add_bitWidth","add_byteWidth","add_children","add_custom_metadata","add_custom_metadata","add_dictionary","add_dictionaryKind","add_endianness","add_features","add_fields","add_id","add_indexType","add_isOrdered","add_is_signed","add_key","add_keysSorted","add_listSize","add_mode","add_name","add_nullable","add_precision","add_precision","add_scale","add_timezone","add_typeIds","add_type_","add_type_type","add_unit","add_unit","add_unit","add_unit","add_unit","add_value","bitWidth","bitWidth","bitWidth","bitWidth","bitWidth","bitWidth","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byteWidth","byteWidth","children","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","custom_metadata","custom_metadata","custom_metadata","custom_metadata","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dictionary","dictionary","dictionaryKind","dictionaryKind","endianness","endianness","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","features","features","fields","fields","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish_schema_buffer","finish_size_prefixed_schema_buffer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_root_as_schema","get_size_prefixed_root_as_schema","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","id","id","indexType","indexType","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","isOrdered","isOrdered","is_signed","is_signed","key","key","keysSorted","keysSorted","length","listSize","listSize","mode","mode","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","nullable","nullable","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","precision","precision","precision","precision","push","push","push","push","push","push","push","push","push","push","push","root_as_schema","root_as_schema_unchecked","root_as_schema_with_opts","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","scale","scale","set_length","set_offset","size_prefixed_root_as_schema","size_prefixed_root_as_schema_unchecked","size_prefixed_root_as_schema_with_opts","timezone","timezone","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typeIds","typeIds","type_","type_","type_as_binary","type_as_bool","type_as_date","type_as_decimal","type_as_duration","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_floating_point","type_as_int","type_as_interval","type_as_large_binary","type_as_large_list","type_as_large_utf_8","type_as_list","type_as_map","type_as_null","type_as_struct_","type_as_time","type_as_timestamp","type_as_union","type_as_utf_8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_type","type_type","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","value","value","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","0","0","Column","ENUM_MAX","ENUM_MAX","ENUM_MAX_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_MAX_SPARSE_TENSOR_INDEX","ENUM_MIN","ENUM_MIN","ENUM_MIN_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_MIN_SPARSE_TENSOR_INDEX","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_VALUES_SPARSE_TENSOR_INDEX","NONE","Row","SparseMatrixCompressedAxis","SparseMatrixIndexCSX","SparseMatrixIndexCSX","SparseMatrixIndexCSXArgs","SparseMatrixIndexCSXBuilder","SparseMatrixIndexCSXOffset","SparseTensor","SparseTensorArgs","SparseTensorBuilder","SparseTensorIndex","SparseTensorIndexCOO","SparseTensorIndexCOO","SparseTensorIndexCOOArgs","SparseTensorIndexCOOBuilder","SparseTensorIndexCOOOffset","SparseTensorIndexCSF","SparseTensorIndexCSF","SparseTensorIndexCSFArgs","SparseTensorIndexCSFBuilder","SparseTensorIndexCSFOffset","SparseTensorIndexUnionTableOffset","SparseTensorOffset","VT_AXISORDER","VT_COMPRESSEDAXIS","VT_DATA","VT_INDICESBUFFER","VT_INDICESBUFFER","VT_INDICESBUFFERS","VT_INDICESSTRIDES","VT_INDICESTYPE","VT_INDICESTYPE","VT_INDICESTYPE","VT_INDPTRBUFFER","VT_INDPTRBUFFERS","VT_INDPTRTYPE","VT_INDPTRTYPE","VT_ISCANONICAL","VT_NON_ZERO_LENGTH","VT_SHAPE","VT_SPARSEINDEX","VT_SPARSEINDEX_TYPE","VT_TYPE_","VT_TYPE_TYPE","_tab","_tab","_tab","_tab","add_axisOrder","add_compressedAxis","add_data","add_indicesBuffer","add_indicesBuffer","add_indicesBuffers","add_indicesStrides","add_indicesType","add_indicesType","add_indicesType","add_indptrBuffer","add_indptrBuffers","add_indptrType","add_indptrType","add_isCanonical","add_non_zero_length","add_shape","add_sparseIndex","add_sparseIndex_type","add_type_","add_type_type","axisOrder","axisOrder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compressedAxis","compressedAxis","create","create","create","create","data","data","default","default","default","default","eq","eq","eq","eq","eq","eq","equivalent","equivalent","finish","finish","finish","finish","finish_size_prefixed_sparse_tensor_buffer","finish_sparse_tensor_buffer","fmt","fmt","fmt","fmt","fmt","fmt","follow","follow","follow","follow","follow","follow","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_little_endian","from_little_endian","get_hash","get_hash","get_root_as_sparse_tensor","get_size_prefixed_root_as_sparse_tensor","hash","hash","indicesBuffer","indicesBuffer","indicesBuffer","indicesBuffer","indicesBuffers","indicesBuffers","indicesStrides","indicesStrides","indicesType","indicesType","indicesType","indicesType","indicesType","indicesType","indptrBuffer","indptrBuffer","indptrBuffers","indptrBuffers","indptrType","indptrType","indptrType","indptrType","init_from_table","init_from_table","init_from_table","init_from_table","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","isCanonical","isCanonical","ne","ne","ne","ne","ne","ne","new","new","new","new","non_zero_length","non_zero_length","partial_cmp","partial_cmp","push","push","root_as_sparse_tensor","root_as_sparse_tensor_unchecked","root_as_sparse_tensor_with_opts","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","shape","shape","size_prefixed_root_as_sparse_tensor","size_prefixed_root_as_sparse_tensor_unchecked","size_prefixed_root_as_sparse_tensor_with_opts","sparseIndex","sparseIndex","sparseIndex_as_sparse_matrix_index_csx","sparseIndex_as_sparse_tensor_index_coo","sparseIndex_as_sparse_tensor_index_csf","sparseIndex_type","sparseIndex_type","to_little_endian","to_little_endian","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_as_binary","type_as_bool","type_as_date","type_as_decimal","type_as_duration","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_floating_point","type_as_int","type_as_interval","type_as_large_binary","type_as_large_list","type_as_large_utf_8","type_as_list","type_as_map","type_as_null","type_as_struct_","type_as_time","type_as_timestamp","type_as_union","type_as_utf_8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_type","type_type","variant_name","variant_name","Tensor","TensorArgs","TensorBuilder","TensorDim","TensorDimArgs","TensorDimBuilder","TensorDimOffset","TensorOffset","VT_DATA","VT_NAME","VT_SHAPE","VT_SIZE_","VT_STRIDES","VT_TYPE_","VT_TYPE_TYPE","_tab","_tab","add_data","add_name","add_shape","add_size_","add_strides","add_type_","add_type_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create","create","data","data","default","default","eq","eq","finish","finish","finish_size_prefixed_tensor_buffer","finish_tensor_buffer","fmt","fmt","follow","follow","from","from","from","from","from","from","from","from","get_root_as_tensor","get_size_prefixed_root_as_tensor","init_from_table","init_from_table","into","into","into","into","into","into","into","into","name","name","ne","ne","new","new","root_as_tensor","root_as_tensor_unchecked","root_as_tensor_with_opts","run_verifier","run_verifier","shape","shape","size_","size_","size_prefixed_root_as_tensor","size_prefixed_root_as_tensor_unchecked","size_prefixed_root_as_tensor_with_opts","strides","strides","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_as_binary","type_as_bool","type_as_date","type_as_decimal","type_as_duration","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_floating_point","type_as_int","type_as_interval","type_as_large_binary","type_as_large_list","type_as_large_utf_8","type_as_list","type_as_map","type_as_null","type_as_struct_","type_as_time","type_as_timestamp","type_as_union","type_as_utf_8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_type","type_type","FileMetadata","FileReader","Some","StreamMetadata","StreamReader","StreamState","Waiting","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_iter","into_iter","is_finished","new","new","next","next","read_dictionary","read_file_metadata","read_record_batch","read_stream_metadata","schema","schema","schema","schema","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap","0","FileWriter","StreamWriter","borrow","borrow","borrow_mut","borrow_mut","common","drop","drop","finish","finish","from","from","into","into","schema_to_bytes","try_from","try_from","try_into","try_into","try_new","try_new","try_new_with_options","try_new_with_options","type_id","type_id","write","write","write","write_dictionary","DictionaryTracker","EncodedData","IpcWriteOptions","arrow_data","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","encoded_batch","fmt","from","from","from","insert","into","into","into","ipc_message","metadata_version","new","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","write_continuation","write_message","ArrayWriter","JsonArray","JsonFormat","LineDelimited","LineDelimitedWriter","Reader","ReaderBuilder","Writer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","default","default","default","end_row","end_row","end_row","end_stream","end_stream","end_stream","finish","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_buf_reader","infer_json_schema","infer_json_schema_from_iterator","infer_json_schema_from_seekable","infer_schema","into","into","into","into","into","into_inner","new","new","new","next","schema","start_row","start_row","start_row","start_stream","start_stream","start_stream","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_batch_size","with_projection","with_schema","write_batches","write_record_batches","write_row","ArrowJson","ArrowJsonBatch","ArrowJsonColumn","ArrowJsonDictionaryBatch","ArrowJsonField","ArrowJsonFieldDictionary","ArrowJsonSchema","DictionaryIndexType","batches","bit_width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","children","clone","clone_into","columns","count","data","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dictionaries","dictionary","field_type","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_record_batch","id","id","index_type","into","into","into","into","into","into","into","into","is_ordered","is_signed","metadata","metadata","name","name","nullable","offset","schema","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_record_batch","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validity","read","write","BSON","Boolean","Bson","ByteArray","ColumnChunkMetaData","ColumnDescriptor","CompressedDataPage","DATE","DECIMAL","DataPage","DataPageHeader","Date","Decimal","Decompressor","Double","ENUM","Enum","External","FileMetaData","FixedLenByteArray","Float","General","GroupType","INTEGER","Int16","Int32","Int32","Int64","Int64","Int8","Int96","Interval","Item","JSON","Json","LIST","LogicalType","MAP","MICROS","MILLIS","NANOS","OutOfSpec","PageFilter","PageIterator","ParquetError","ParquetTimeUnit","ParquetType","PhysicalType","PrimitiveConvertedType","PrimitiveType","RecordReader","RowGroupMetaData","STRING","StreamingIterator","TIME","TIMESTAMP","TimeMicros","TimeMillis","TimestampMicros","TimestampMillis","TimestampType","UNKNOWN","UUID","Uint16","Uint32","Uint64","Uint8","Utf8","V1","V2","_get_page_iterator","_get_page_stream","_read_metadata","_read_metadata_async","advance","advance","all","all","any","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","by_ref","by_ref","byte_range","chain","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","cmp","cmp","column","column_encoding","column_order","column_orders","columns","compressed_size","compressed_size","compression","count","count","created_by","data_page_offset","decompress","definition_level_encoding","descriptor","descriptor","dictionary_page","dictionary_page_offset","encoding","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","file_offset","file_path","filter","filter","filter_map","filter_map","filter_map_deref","filter_map_deref","find","find","flat_map","flat_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_external_error","fuse","fuse","get","get","get_hash","get_hash","get_hash","get_page_iterator","get_page_stream","has_index_page","hash","hash","hash","header","index_page_offset","inspect","inspect","int96_to_i64_ns","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffers","into_iter","into_iter","into_thrift","into_thrift","into_thrift","is_adjusted_to_u_t_c","key_value_metadata","key_value_metadata","map","map","map_deref","map_deref","map_ref","map_ref","metadata","ne","ne","ne","ne","ne","new","new","new","new","new","next","next","next","next","nth","nth","num_columns","num_rows","num_rows","num_values","num_values","num_values","page_iter_to_array","page_stream_to_array","partial_cmp","partial_cmp","partial_cmp","physical_type","position","position","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_metadata","read_metadata_async","repetition_level_encoding","reuse_buffer","rev","rev","row_groups","schema","schema","schema","schema_descr","set_groups_filter","size_hint","size_hint","skip","skip","skip_while","skip_while","statistics","statistics","statistics","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","take","take","take_while","take_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total_byte_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_thrift","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","unit","version","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","basic_info","basic_info","converted_type","converted_type","fields","logical_type","logical_type","physical_type","0","0","1","FileMetaData","GroupType","KeyValue","ParquetType","PrimitiveType","SchemaDescriptor","column_orders","created_by","get_schema","is_type_nullable","key_value_metadata","num_rows","parquet_to_arrow_schema","read_schema_from_metadata","row_groups","schema_descr","version","basic_info","basic_info","converted_type","converted_type","fields","logical_type","logical_type","physical_type","BinaryStatistics","BooleanStatistics","PrimitiveStatistics","Statistics","Utf8Statistics","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","deserialize_statistics","distinct_count","distinct_count","distinct_count","distinct_count","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","max_value","max_value","max_value","max_value","min_value","min_value","min_value","min_value","ne","ne","ne","ne","null_count","null_count","null_count","null_count","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","BitPacked","Brotli","ByteStreamSplit","ColumnDescriptor","CompressedDataPage","CompressedPage","Compression","Data","DeltaBinaryPacked","DeltaByteArray","DeltaLengthByteArray","Dict","DynIter","Encoding","GroupType","Gzip","KeyValue","Lz4","Lzo","ParquetType","Plain","PlainDictionary","PrimitiveType","Rle","RleDictionary","RowGroupIter","RowGroupIterator","SchemaDescriptor","Snappy","Uncompressed","V1","V2","Version","WriteOptions","Zsld","array_to_page","array_to_pages","base_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_encode","check_contains","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column","columns","compressed_size","compression","compression","descriptor","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_converted","from_physical","get_basic_info","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_root","max_def_level","max_rep_level","name","name","name","ne","ne","ne","new","new","new","new","new_root","next","next","num_columns","num_values","parquet_schema","parquet_write_file","path_in_schema","physical_type","size_hint","statistics","stream","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_parquet_schema","to_parquet_type","to_thrift","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_group","try_from_message","try_from_primitive","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","version","write_file","write_statistics","0","0","basic_info","basic_info","converted_type","converted_type","fields","logical_type","logical_type","physical_type","write_stream","write_stream_stream","print","write","RecordBatch","RecordBatchOptions","RecordBatchReader","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","column","columns","default","eq","fmt","fmt","from","from","from","into","into","match_field_names","ne","new_empty","next_batch","num_columns","num_rows","schema","schema","to_owned","try_from","try_from","try_from_iter","try_from_iter_with_nullable","try_into","try_into","try_new","try_new_with_options","type_id","type_id","BinaryScalar","BooleanScalar","ListScalar","NullScalar","PrimitiveScalar","Scalar","StructScalar","Utf8Scalar","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","new","new","new","new","new","new","new","new_scalar","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","values","values","EPOCH_DAYS_FROM_CE","MICROSECONDS","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","SECONDS_IN_DAY","date32_to_date","date32_to_datetime","date64_to_date","date64_to_datetime","parse_offset","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_us_to_datetime","timeunit_scale","utf8_to_naive_timestamp_ns","utf8_to_naive_timestamp_ns_scalar","utf8_to_timestamp_ns","utf8_to_timestamp_ns_scalar","TrustedLen","BitChunk","BitChunkIter","Bytes","Bytes","DATA_TYPE","Index","IndexRange","NativeType","NaturalDataType","Relation","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","days","days","days_ms","default","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_ne_bytes","from_usize","get_hash","get_hash","hash","hash","into","into","into","into","into_iter","into_iter","is_valid","is_valid","is_valid","milliseconds","months","months_days_ns","ne","ne","new","new","new","new","next","next","ns","one","range","range","simd","size_hint","size_hint","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_owned","to_owned","to_string","to_string","to_usize","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero","0","0","0","0","0","0","0","0","0","0","Chunk","FromMaskChunk","LANES","Mask","Native","NativeSimd","Simd","Simd","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","default","default","default","default","default","f32x16","f64x8","from","from","from","from","from","from","from","from","from","from","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","i16x32","i32x16","i64x8","i8x64","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","max","max","max","max","max","max","max","max","max","max","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","min","min","min","min","min","min","min","min","min","min","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","select","select","select","select","select","select","select","select","select","select","select","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u16x32","u32x16","u64x8","u8x64","lexical_to_bytes","lexical_to_bytes_mut","lexical_to_string"],"q":["arrow2","","","","","","","","","","","","","","","arrow2::alloc","","","","","","","arrow2::arrayarrow2::array::growable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array::ord","","","","","arrow2::bitmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::bitmap::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::aggregate","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics::basic","","","","","","arrow2::compute::arithmetics::basic::add","","","","","","","","arrow2::compute::arithmetics::basic::div","","","","arrow2::compute::arithmetics::basic::mul","","","","","","","","arrow2::compute::arithmetics::basic::pow","","arrow2::compute::arithmetics::basic::rem","","","","arrow2::compute::arithmetics::basic::sub","","","","","","","","arrow2::compute::arithmetics::decimal","","","","arrow2::compute::arithmetics::decimal::add","","","","arrow2::compute::arithmetics::decimal::div","","","","arrow2::compute::arithmetics::decimal::mul","","","","arrow2::compute::arithmetics::decimal::sub","","","","arrow2::compute::arithmetics::time","","","arrow2::compute::arity","","","","","","","","arrow2::compute::boolean","","","","","arrow2::compute::boolean_kleene","","arrow2::compute::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::comparison","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::concat","arrow2::compute::contains","arrow2::compute::filter","","","","arrow2::compute::hash","","","","","","arrow2::compute::if_then_else","arrow2::compute::length","","arrow2::compute::like","","","","","","","","arrow2::compute::limit","arrow2::compute::merge_sort","","","","","","","","","","","","","","","","","arrow2::compute::nullif","","","arrow2::compute::partition","arrow2::compute::regex_match","","arrow2::compute::sort","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::substring","","arrow2::compute::take","","arrow2::compute::temporal","","","","arrow2::compute::window","arrow2::datatypesarrow2::datatypes::DataType","","","","","","","","","","","","","","","","","","","","","","arrow2::datatypes::PhysicalType","","arrow2::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::error::ArrowError","","","","","","","","","","","arrow2::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io","","","","","","arrow2::io::csv","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc","","","","arrow2::io::ipc::gen","","","","","arrow2::io::ipc::gen::File","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::gen::Messagearrow2::io::ipc::gen::Schemaarrow2::io::ipc::gen::SparseTensorarrow2::io::ipc::gen::Tensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::read::StreamState","arrow2::io::ipc::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::write::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::json_integration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet","","arrow2::io::parquet::readarrow2::io::parquet::read::DataPageHeader","","arrow2::io::parquet::read::LogicalType","","","","","","","","","","","","","arrow2::io::parquet::read::ParquetError","","","","arrow2::io::parquet::read::ParquetTimeUnit","","","arrow2::io::parquet::read::ParquetType","","","","","","","","arrow2::io::parquet::read::PhysicalType","arrow2::io::parquet::read::PrimitiveConvertedType","","arrow2::io::parquet::read::schema","","","","","","","","","","","","","","","","","arrow2::io::parquet::read::schema::ParquetType","","","","","","","","arrow2::io::parquet::read::statistics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::writearrow2::io::parquet::write::CompressedPage","","arrow2::io::parquet::write::ParquetType","","","","","","","","arrow2::io::parquet::write::stream","","arrow2::io::print","","arrow2::record_batch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::temporal_conversions","","","","","","","","","","","","","","","","","","","","","","","","arrow2::trusted_len","arrow2::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types::simdarrow2::util","",""],"d":["Defines memory-related functions, such as …","fixed-length and immutable containers with optional values …","Contains efficient containers of booleans: <code>Bitmap</code> and …","Contains containers for all Arrow sized types (e.g. <code>i32</code>), …","Contains operators over arrays. This module’s general …","Metadata declarations such as <code>DataType</code>, <code>Field</code> and <code>Schema</code>.","Defines <code>ArrowError</code>, representing all errors returned by …","Contains interfaces to use the C Data Interface.","Interact with different formats such as Arrow, CSV, …","A two-dimensional batch of column-oriented data with a …","Declares the <code>Scalar</code> API, an optional, trait object …","Conversion methods for dates and times.","Declares <code>TrustedLen</code>.","traits to handle <em>all physical types</em> used in this crate. …","Misc utilities used in different places in the crate.","Cache and allocation multiple alignment size","Allocates a cache-aligned memory region of <code>size</code> bytes with …","Allocates a cache-aligned memory region of <code>size</code> bytes with …","Safety","Frees memory previously allocated by …","Reallocates memory previously allocated by …","Returns the total number of bytes allocated to buffers by …","A trait representing an immutable Arrow array. Arrow …","A type def of <code>Array</code>.","A <code>BinaryArray</code> is a nullable array of bytes - the Arrow …","The Arrow’s equivalent to an immutable <code>Vec&lt;Option&lt;bool&gt;&gt;</code>…","A type definition <code>PrimitiveArray</code> for <code>days_ms</code>","A type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>","An <code>Array</code> whose values are encoded by keys. This <code>Array</code> is …","Trait denoting <code>NativeType</code>s that can be used as keys of a …","The Arrow’s equivalent to an immutable …","The Arrow’s equivalent to an immutable …","A type definition <code>PrimitiveArray</code> for <code>f32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f32</code>","A type definition <code>PrimitiveArray</code> for <code>f64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f64</code>","Trait describing how a struct imports into itself from the …","Trait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …","A type definition <code>PrimitiveArray</code> for <code>i128</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i128</code>","A type definition <code>PrimitiveArray</code> for <code>i16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i16</code>","A type definition <code>PrimitiveArray</code> for <code>i32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i32</code>","A type definition <code>PrimitiveArray</code> for <code>i64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i64</code>","A type definition <code>PrimitiveArray</code> for <code>i8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i8</code>","Trait that list arrays implement for the purposes of DRY.","","A type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>","A type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>","A trait describing a mutable array; i.e. an array whose …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …","A mutable, strong-typed version of <code>DictionaryArray</code>.","The Arrow’s equivalent to a mutable …","The mutable version of <code>FixedSizeListArray</code>.","The mutable version of <code>ListArray</code>.","The Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …","The mutable version of <code>Utf8Array</code>. See <code>MutableArray</code> for …","The concrete <code>Array</code> of <code>DataType::Null</code>.","Trait describing types that can be used as offsets as per …","A <code>PrimitiveArray</code> is arrow’s equivalent to …","A <code>StructArray</code> is a nested <code>Array</code> with an optional validity …","Trait describing how a struct presents itself to the C …","A trait describing the ability of a struct to create …","A trait describing the ability of a struct to receive new …","A type definition <code>PrimitiveArray</code> for <code>u16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u16</code>","A type definition <code>PrimitiveArray</code> for <code>u32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u32</code>","A type definition <code>PrimitiveArray</code> for <code>u64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u64</code>","A type definition <code>PrimitiveArray</code> for <code>u8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u8</code>","<code>UnionArray</code> represents an array whose each slot can contain …","A <code>Utf8Array</code> is arrow’s equivalent of an immutable …","Iterator of values of an <code>Utf8Array</code>.","","","","Convert to trait object.","Convert to <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","Convert itself to an (immutable) <code>Array</code>.","","","","","","","","","Convert to mutable <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pointers to the buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","The children","The children","","","","","Clones a dynamic <code>Array</code>.","","","","","","","","","","","","","","","","","","","","","","","","","The <code>DataType</code> of the <code>Array</code>. In combination with …","The <code>DataType</code> of the array.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the default <code>DataType</code>, <code>DataType::Binary</code> or …","Returns the default <code>DataType</code>, <code>DataType::Utf8</code> or …","Returns a <code>DataType</code> consistent with this Array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logically compares two <code>Array</code>s. Two arrays are logically …","","","","","Extends the <code>MutablePrimitiveArray</code> from a slice","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Returns the fields of this <code>StructArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.","","Creates a new <code>MutableBooleanArray</code> out of a slice of …","","","","Creates a new <code>BooleanArray</code> out of a slice of Optional <code>bool</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.","","","","The canonical method to create a <code>MutableBinaryArray</code> out of …","Creates a new <code>BinaryArray</code> from lower-level parts","Canonical method to create a new <code>MutableBooleanArray</code>.","The canonical method to create a <code>BooleanArray</code> out of …","The canonical method to create a new <code>DictionaryArray</code>.","Canonical method to create a new …","Returns a new <code>FixedSizeBinaryArray</code>.","Returns a <code>FixedSizeListArray</code>.","","Returns a new <code>NullArray</code>.","Create a <code>MutablePrimitiveArray</code> out of low-end APIs.","The canonical method to create a <code>PrimitiveArray</code> out of …","Canonical method to create a <code>StructArray</code>.","","The canonical method to create a <code>MutableUtf8Array</code> out of …","The canonical method to create a <code>Utf8Array</code> out of low-end …","Create a <code>MutableUtf8Array</code> out of low-end APIs.","The same as <code>Utf8Array::from_data</code> but does not check for …","converts from <code>isize</code>","","","","","Creates a <code>FixedSizeBinaryArray</code> from an iterator of …","","","","","Creates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.","Creates a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.","Creates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.","Creates a new <code>BooleanArray</code> from a slice of <code>bool</code>.","Creates a <code>MutablePrimitiveArray</code> from a slice of values.","Creates a new array out an iterator over values","Creates a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>. This is a …","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.","Creates a new <code>PrimitiveArray</code> from an iterator over …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>MutablePrimitiveArray</code> from an iterator of …","Creates a new <code>PrimitiveArray</code> from an iterator over …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Creates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …","Creates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.","Creates a new <code>MutablePrimitiveArray</code> out an iterator over …","Creates a new array out an iterator over values","Creates a new <code>Utf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.","Creates a new <code>Utf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.","Creates a new <code>MutablePrimitiveArray</code> from an iterator over …","Creates a new <code>PrimitiveArray</code> from an iterator over values","Creates a new array out an iterator over values","","","Returns a function of index returning the string …","Returns the fields the <code>DataType::Struct</code>.","","Contains the trait <code>Growable</code> and corresponding concreate …","Returns the index and slot of the field to select from …","","","","","","","","","","","","","","","","","","","","","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","converts itself into <code>Arc&lt;dyn Array&gt;</code>","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","Extract the low-end APIs from the <code>MutablePrimitiveArray</code>.","Deconstructs the <code>StructArray</code> into its individual …","","whether the array is empty","Whether the array is empty.","Whether it is <code>i32</code> or <code>i64</code>","Returns whether slot <code>i</code> is null.","","Returns whether slot <code>i</code> is valid.","Whether <code>index</code> is valid / set.","Returns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>","Returns an iterator over the optional values of this …","Returns an iterator over the optional values of this …","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","constructs a new iterator","constructs a new iterator","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator over <code>Option&lt;T&gt;</code>","constructs a new iterator","constructs a new iterator","Returns an iterator of <code>Option&lt;&amp;str&gt;</code>","Returns the keys of the <code>DictionaryArray</code>. These keys can be …","The length of the <code>Array</code>. Every array has a length …","The length of the array.","","","","","","","","","","","","","","","","","","","","","","","returns a mutable reference to the inner values.","","","Creates a new empty <code>MutableBinaryArray</code>.","Creates an new empty <code>MutableBooleanArray</code>.","Creates an empty <code>MutableDictionaryArray</code>.","Creates a new empty <code>MutableFixedSizeBinaryArray</code>.","","","Creates a new empty <code>MutablePrimitiveArray</code>.","Creates a new <code>Utf8ValuesIter</code>","Initializes a new empty <code>MutableUtf8Array</code>.","Creates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.","Returns a new empty <code>BooleanArray</code>.","Returns a new empty <code>DictionaryArray</code>.","Returns a new empty <code>FixedSizeBinaryArray</code>.","Returns a new empty <code>FixedSizeListArray</code>.","","Returns a new empty <code>NullArray</code>.","Returns a new empty <code>PrimitiveArray</code>.","Creates an empty <code>StructArray</code>.","","Returns a new empty <code>Utf8Array</code>.","Creates a new <code>Array</code> with a <code>Array::len</code> of 0.","","Creates an null <code>BinaryArray</code>, i.e. whose …","Returns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.","Returns an <code>DictionaryArray</code> whose all elements are null","Returns a new null <code>FixedSizeBinaryArray</code>.","Returns a new null <code>FixedSizeListArray</code>.","","Returns a new <code>NullArray</code>.","Returns a new <code>PrimitiveArray</code> whose all slots are null / …","Creates a null <code>StructArray</code> of length <code>length</code>.","","Returns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.","Creates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …","","","","","The number of null slots on this <code>Array</code>. This is usually …","The offset","","","","","","","","","","","","The offsets of the array","Returns the offsets that slice <code>.values()</code> to return valid …","","","","returns its offsets.","","Returns the offsets of this <code>Utf8Array</code>.","Contains functions and function factories to order values …","","","","","","","Pushes a new element to the array.","Pushes a new entry to <code>MutableBooleanArray</code>.","pushes a new entry to <code>MutableFixedSizeBinaryArray</code>.","Adds a new value to the array.","Pushes a new element to the array.","Adds a new null element to the array.","","","pushes a null value","","","","","","","","","Reserves <code>additional</code> slots.","Reserves <code>additional</code> slots.","Reserves <code>additional</code> entries.","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","","","","","","","","","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets the validity.","Sets values.","Returns the size","","Slices the <code>Array</code>, returning a new <code>Box&lt;dyn Array&gt;</code>.","Creates a new <code>BinaryArray</code> by slicing this <code>BinaryArray</code>.","","","Returns a slice of this <code>BooleanArray</code>.","Creates a new <code>DictionaryArray</code> by slicing the existing …","","","Returns a slice of this <code>FixedSizeBinaryArray</code>.","Returns a slice of this <code>FixedSizeListArray</code>.","","","","Returns a slice of the <code>NullArray</code>.","","Returns a slice of this <code>PrimitiveArray</code>.","","Creates a new <code>StructArray</code> that is a slice of <code>self</code>.","","","Returns a slice of this <code>UnionArray</code>.","","Returns a slice of this <code>Utf8Array</code>.","","","","Changes the arrays’ <code>DataType</code>, returning a new …","Returns a new <code>PrimitiveArray</code> with a different logical type.","converts itself to <code>isize</code>","","","","","","","","","","","","","","","","","","","","","","","","Fallible version of <code>Extend::extend</code>.","","This is infalible and is implemented for consistency with …","","","This is infalible and is implemented for consistency with …","","","","","","","","","","","","","","","","","","","","","","Convert itself from FFI.","","","","","","","","","Creates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …","Creates a <code>FixedSizeBinaryArray</code> from an fallible iterator …","","","","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an fallible iterator of trusted …","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an fallible iterator of trusted …","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an falible iterator of trusted …","","","","","","","","","","","","","","","","","","","","","Tries to push a new element.","","This is infalible and is implemented for consistency with …","tries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.","","This is infalible and is implemented for consistency with …","","Returns whether the value should be pushed to the values …","","","","","","","","","","","","","","","","","","","","","","","The validity of the <code>Array</code>: every array has an optional …","The optional validity of the array.","","","","","","","","","","","","","","","","","","","","","Returns the element at index <code>i</code>","Returns the value at index <code>i</code>","Returns the value of the <code>DictionaryArray</code> at position <code>i</code>.","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns value at position <code>i</code>.","","Returns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.","Returns the element at index <code>i</code>","","Safe method to retrieve the value at slot <code>i</code>. Equivalent to …","Returns the slot <code>index</code> as a <code>Scalar</code>.","Returns the element at index <code>i</code> as &amp;str","Returns the element at index <code>i</code>","Returns the element at index <code>i</code> as bool","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns the element at index <code>i</code> as &amp;str","Returns the element at index <code>i</code> as &amp;str","Returns the element at index <code>i</code> as <code>T</code>","Returns the element at index <code>i</code> as &amp;str","The values of the array","Returns all values in this array. Use <code>.offsets()</code> to slice …","","Returns its values.","Returns the values of this <code>BooleanArray</code>.","returns a reference to the inner values.","Returns the values of the <code>DictionaryArray</code>.","Returns its values.","Returns the values allocated on this <code>FixedSizeBinaryArray</code>.","","Returns the inner array.","","","Returns its values.","The values <code>Buffer</code>.","Returns the values of this <code>StructArray</code>.","returns its values.","","Returns the values of this <code>Utf8Array</code>.","Returns an iterator of <code>&amp;[u8]</code>","Returns an iterator over the values of this …","Returns an iterator over the values of this <code>BooleanArray</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>bool</code>","Returns an iterator of <code>&amp;str</code>","Returns a mutable slice of values.","Returns a mutable slice of values.","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Creates a new <code>MutableBinaryArray</code> with capacity for <code>capacity</code>…","Creates an new <code>MutableBooleanArray</code> with a capacity of …","Creates a new <code>MutableFixedSizeBinaryArray</code> with capacity …","","Creates a new <code>MutablePrimitiveArray</code> with a capacity.","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Creates a new <code>MutablePrimitiveArray</code> from a capacity and …","Sets the validity bitmap on this <code>Array</code>.","","Clones this <code>BinaryArray</code> with a different validity.","Sets the validity bitmap on this <code>BooleanArray</code>.","","Sets the validity bitmap on this <code>Array</code>.","","","Sets the validity bitmap on this <code>FixedSizeBinaryArray</code>.","","Sets the validity bitmap on this <code>FixedSizeListArray</code>.","Sets the validity bitmap on this <code>ListArray</code>.","","","Sets the validity bitmap on this <code>PrimitiveArray</code>.","","","Sets the validity bitmap on this <code>StructArray</code>.","","Sets the validity bitmap on this <code>Utf8Array</code>.","","A trait describing a struct that can be extended from …","Concrete <code>Growable</code> for the <code>BinaryArray</code>.","Concrete <code>Growable</code> for the <code>BooleanArray</code>.","Concrete <code>Growable</code> for the <code>DictionaryArray</code>.","Concrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.","Concrete <code>Growable</code> for the <code>ListArray</code>.","Concrete <code>Growable</code> for the <code>NullArray</code>.","Concrete <code>Growable</code> for the <code>PrimitiveArray</code>.","Concrete <code>Growable</code> for the <code>StructArray</code>.","Concrete <code>Growable</code> for the <code>Utf8Array</code>.","","","","","","","","","Converts itself to an <code>Arc&lt;dyn Array&gt;</code>, thereby finishing …","","Converts itself to an <code>Box&lt;dyn Array&gt;</code>, thereby finishing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extends this <code>Growable</code> with elements from the bounded <code>Array</code> …","","","","","","","","","","Extends this <code>Growable</code> with null elements, disregarding the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Growable</code> from an arbitrary number of dynamic …","Panics","","","","","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare the values at two arbitrary indices in two arrays.","returns a comparison function that compares values at two …","Total order of all native types whose Rust implementation …","implements comparison using IEEE 754 total ordering for f32","implements comparison using IEEE 754 total ordering for f64","An immutable container whose API is optimized to handle …","A container to store booleans. <code>MutableBitmap</code> is …","Returns the slice of bytes of this <code>MutableBitmap</code>. Note …","Returns the byte slice of this Bitmap.","Apply a bitwise operation <code>op</code> to two inputs and return the …","","","","","Returns the capacity of <code>MutableBitmap</code> in number of bits.","Returns an iterator over bits in chunks of <code>T</code>, which is …","Empties the <code>MutableBitmap</code>.","","","","","","","Extends <code>MutableBitmap</code> by <code>additional</code> values of constant …","Extends the <code>MutableBitmap</code> from a <code>Bitmap</code>.","Extends the <code>MutableBitmap</code> from a slice of bytes with …","Extends <code>self</code> from a <code>TrustedLen</code> iterator.","Extends <code>self</code> from an iterator of trusted len.","","","","","","","","Initializes a <code>MutableBitmap</code> from a <code>MutableBuffer&lt;u8&gt;</code> and a …","","","Initializes a zeroed <code>MutableBitmap</code>.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from <code>MutableBuffer</code> and a length.","Creates a new <code>Bitmap</code> from a slice and length.","Returns whether the position <code>index</code> is set.","Returns whether the bit at position <code>i</code> is set.","Returns whether the bit at position <code>i</code> is set.","Unsafely returns whether the bit at position <code>i</code> is set.","","","Returns whether <code>MutableBitmap</code> is empty.","Returns whether <code>Bitmap</code> is empty","constructs a new iterator over the values of <code>MutableBitmap</code>.","constructs a new iterator","Returns the length of the <code>MutableBitmap</code>.","Returns the length of the <code>Bitmap</code>.","Initializes an empty <code>MutableBitmap</code>.","Initializes an empty <code>Bitmap</code>.","Initializes an new <code>Bitmap</code> filled with unset values.","Returns the number of unset bits on this <code>MutableBitmap</code>.","Returns the number of unset bits on this <code>Bitmap</code>.","Counts the nulls (unset bits) starting from <code>offset</code> bits …","Pushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …","Pushes a new bit to the <code>MutableBitmap</code>","Apply a bitwise operation <code>op</code> to four inputs and return the …","Initializes an a pre-allocated <code>MutableBitmap</code> with capacity …","Sets the position <code>index</code> to <code>value</code>","Slices <code>self</code>, offseting by <code>offset</code> and truncating up to …","Apply a bitwise operation <code>op</code> to three inputs and return …","","","","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","Creates a new <code>MutableBitmap</code> from an falible iterator of …","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","","","","","Apply a bitwise operation <code>op</code> to one input and return the …","General utilities for bitmaps representing items where LSB …","Initializes an a pre-allocated <code>MutableBitmap</code> with capacity …","Something that can be use as a chunk of bits. This is used …","Trait representing an exact iterator over bytes in <code>BitChunk</code>…","This struct is used to efficiently iterate over bit masks …","An iterator over a slice of bytes in <code>BitChunk</code>s.","An iterator over bits according to the LSB, i.e. the bytes …","The representation of this type in the stack.","Iterator over a bitmap that returns slices of set regions …","An iterator adapter that converts an iterator over <code>T</code> and a …","","","","","","","","","","","Returns the number of bytes required to hold <code>bits</code> bits.","","","","","","","Returns the number of zero bits in the slice offsetted by …","Formats <code>bytes</code> taking into account an offset and length of …","","","","","","","","","","convert itself from bytes.","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","","","","","","","","","","","Returns whether there are still elements in this iterator","Returns whether bit at position <code>i</code> in <code>byte</code> is set or not","Returns the number of chunks of this iterator","","Creates a new <code>ZipValidity</code>.","Creates a new <code>BitChunksExact</code>.","Creates a <code>BitChunks</code>.","Creates a new <code>BitmapIter</code>.","Creates a new <code>SlicesIterator</code>","","","","","","","","A value with a single bit set at the most right position.","The remainder of the iterator.","","Returns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…","Returns the remainder <code>BitChunk</code>.","","Returns an iterator over the remainder bits.","Returns the remainder bits in <code>BitChunks::remainder</code>.","Sets bit at position <code>i</code> in <code>byte</code>","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","","","","","Returns the total number of slots. It corresponds to the …","convert itself into bytes.","","","","","","","","","","","","","","","","","","","A value with no bits set.","Returns an iterator adapter that returns Option according …","<code>Buffer</code> is a contiguous memory region that can be shared …","A <code>MutableBuffer</code> is this crates’ interface to store types …","Returns a mutable raw pointer to this buffer’s internal …","Returns the data stored in this buffer as a mutable slice.","Returns a raw pointer to this buffer’s internal memory …","Returns a pointer to the start of this buffer.","Returns the data stored in this buffer as a slice.","Returns the byte slice stored in this buffer","","","","","Returns the total capacity in this buffer. The invariant …","Clear all existing data from this buffer.","","","","","","","","","","","","Extends this buffer by <code>additional</code> items of value <code>value</code>.","Extends this buffer from a slice of items, increasing its …","Extends <code>self</code> from a <code>TrustedLen</code> iterator.","Extends <code>self</code> from an iterator.","","","","","","","","","Auxiliary method to create a new Buffer","Creates a <code>MutableBuffer&lt;u8&gt;</code> from an iterator of <code>u64</code>.","Safety","","","Allocates a new MutableBuffer with <code>len</code> and capacity to be …","Creates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted length. …","Creates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …","","","Returns whether this buffer is empty.","Returns whether the buffer is empty.","Returns the length (the number of items) in this buffer. …","Returns the number of bytes in the buffer","","Creates an empty <code>MutableBuffer</code>. This does not allocate in …","Creates an empty <code>Buffer</code>.","Creates a new <code>Buffer</code> filled with zeros.","Pushes a new item to the buffer, increasing its capacity …","Ensures that this buffer has at least <code>self.len + additional</code>…","Resizes the buffer, either truncating its contents (with …","Sets the length of this buffer.","Shrinks the capacity of the <code>MutableBuffer</code> to fit its …","Returns a new Buffer that is a slice of this buffer …","","Shortens the buffer. If <code>len</code> is greater or equal to the …","","","Creates a <code>MutableBuffer</code> from a fallible <code>TrustedLen</code> …","Safety","Creates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …","Safety","","","","","Allocate a new <code>MutableBuffer</code> with initial capacity to be …","","Defines basic arithmetic kernels for <code>PrimitiveArray</code>s.","Defines kernels suitable to perform operations to …","","","","Basic comparison kernels.","Contains the concatenate kernel","","","","","Defines kernel for length of composite arrays","","","This module exposes functions to perform merge-sorts.","","Defines partition kernel for <code>ArrayRef</code>","","","Defines kernel to extract a substring of a [Large…","Defines take kernel for <code>Array</code>","Defines temporal kernels for time and date related …","Defines windowing functions, like <code>shift</code>ing","","","","","","Object that can reduce itself to a number. This is used in …","","Returns the total (heap) allocated size of the array in …","","","Returns the maximum value in the binary array, according …","Returns the maximum value in the boolean array","","Returns the maximum value in the array, according to the …","Returns the maximum value in the string array, according …","","","Returns the minimum value in the binary array, according …","Returns the minimum value in the boolean array.","","Returns the minimum value in the array, according to the …","Returns the minimum value in the string array, according …","","","","Returns the sum of all elements in <code>array</code> as a <code>Scalar</code> of …","Returns the sum of values in the array.","","Defines basic addition operation for primitive arrays","Defines checked addition operation for primitive arrays","Defines checked division operation for primitive arrays","Defines checked multiplication operation for primitive …","Defines checked reminder operation for primitive arrays","Defines checked subtraction operation for primitive arrays","Defines basic division operation for primitive arrays","Defines basic multiplication operation for primitive arrays","Defines Overflowing addition operation for primitive arrays","Defines Overflowing multiplication operation for primitive …","Defines Overflowing subtraction operation for primitive …","Defines basic reminder operation for primitive arrays","Defines saturating addition operation for primitive arrays","Defines saturating multiplication operation for primitive …","Defines saturating subtraction operation for primitive …","Defines basic subtraction operation for primitive arrays","","","","","","","","","","","","","","","","","","","","","","","","Execute an arithmetic operation with two arrays. It uses …","Perform arithmetic operations on two primitive arrays …","Performs primitive operation on an array and and scalar","Defines the arithmetic kernels for <code>PrimitiveArrays</code>.","","","Checks if an array of type <code>datatype</code> can perform basic …","","","","","","","","Defines the arithmetic kernels for Decimal <code>PrimitiveArrays</code>…","","","","","","","","","","Negates values from array.","","","","","","","","","Defines the arithmetic kernels for adding a Duration to a …","","","","","Definition of basic add operations with primitive arrays","Definition of basic div operations with primitive arrays","Definition of basic mul operations with primitive arrays","Definition of basic pow operations with primitive arrays","","Definition of basic sub operations with primitive arrays","Adds two primitive arrays with the same type. Panics if …","Adds a scalar T to a primitive array of type T. Panics if …","Checked addition of two primitive arrays. If the result …","Checked addition of a scalar T to a primitive array of …","Overflowing addition of two primitive arrays. If the …","Overflowing addition of a scalar T to a primitive array of …","Saturating addition of two primitive arrays. If the result …","Saturated addition of a scalar T to a primitive array of …","Checked division of two primitive arrays. If the result …","Checked division of a primitive array of type T by a …","Divides two primitive arrays with the same type. Panics if …","Divide a primitive array of type T by a scalar T. Panics …","Checked multiplication of two primitive arrays. If the …","Checked multiplication of a scalar T to a primitive array …","Multiplies two primitive arrays with the same type. Panics …","Multiply a scalar T to a primitive array of type T. Panics …","Overflowing multiplication of two primitive arrays. If the …","Overflowing multiplication of a scalar T to a primitive …","Saturating multiplication of two primitive arrays. If the …","Saturated multiplication of a scalar T to a primitive …","Checked operation of raising an array of primitives to the …","Raises an array of primitives to the power of exponent. …","Checked remainder of two primitive arrays. If the result …","Checked remainder of a primitive array of type T by a …","Remainder of two primitive arrays with the same type. …","Remainder a primitive array of type T by a scalar T. …","Checked subtraction of two primitive arrays. If the result …","Checked subtraction of a scalar T to a primitive array of …","Overflowing subtraction of two primitive arrays. If the …","Overflowing subtraction of a scalar T to a primitive array …","Saturating subtraction of two primitive arrays. If the …","Saturated subtraction of a scalar T to a primitive array …","Subtracts two primitive arrays with the same type. Panics …","Subtract a scalar T to a primitive array of type T. Panics …","Defines the addition arithmetic kernels for Decimal …","Defines the division arithmetic kernels for Decimal …","Defines the multiplication arithmetic kernels for Decimal …","Defines the subtract arithmetic kernels for Decimal …","Adaptive addition of two decimal primitive arrays with …","Adds two decimal primitive arrays with the same precision …","Checked addition of two decimal primitive arrays with the …","Saturated addition of two decimal primitive arrays with …","Adaptive division of two decimal primitive arrays with …","Checked division of two decimal primitive arrays with the …","Divide two decimal primitive arrays with the same …","Saturated division of two decimal primitive arrays with …","Adaptive multiplication of two decimal primitive arrays …","Checked multiplication of two decimal primitive arrays …","Multiply two decimal primitive arrays with the same …","Saturated multiplication of two decimal primitive arrays …","Adaptive subtract of two decimal primitive arrays with …","Checked subtract of two decimal primitive arrays with the …","Saturated subtraction of two decimal primitive arrays with …","Subtract two decimal primitive arrays with the same …","Adds a duration to a time array (Timestamp, Time and …","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps returning …","Applies a binary operations to two primitive arrays. This …","Version of binary that creates a mutable bitmap that is …","Version of binary that returns an array and bitmap. Used …","Version of binary that checks for errors in the closure …","Version of unary that checks for errors in the closure …","Applies an unary and infallible function to a primitive …","Version of unary that creates a mutable bitmap that is …","Version of unary that returns an array and bitmap. Used …","Performs <code>AND</code> operation on two arrays. If either left or …","Returns a non-null BooleanArray with whether each value of …","Returns a non-null BooleanArray with whether each value of …","Performs unary <code>NOT</code> operation on an arrays. If value is …","Performs <code>OR</code> operation on two arrays. If either left or …","Logical ‘and’ with Kleene logic","Logical ‘or’ with Kleene logic","","Cast <code>BinaryArray</code> to <code>DictionaryArray</code>, also known as packing.","","Casts a <code>BinaryArray</code> to a <code>PrimitiveArray</code>, making any …","Casts the <code>BooleanArray</code> to a <code>BinaryArray</code>, casting trues to …","Casts the <code>BooleanArray</code> to a <code>PrimitiveArray</code>.","Casts the <code>BooleanArray</code> to a <code>Utf8Array</code>, casting trues to <code>&quot;1&quot;</code>…","Return true if a value of type <code>from_type</code> can be cast into a","Cast <code>array</code> to the provided data type and return a new <code>Array</code>…","","","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> backed by …","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> by …","Casts a <code>DictionaryArray</code> to its values’ <code>DataType</code>, also …","Returns a <code>Utf8Array</code> where every element is the utf8 …","Cast <code>PrimitiveArray</code> as a <code>PrimitiveArray</code> Same as …","Returns a <code>BinaryArray</code> where every element is the binary …","Returns a <code>BooleanArray</code> where every element is different …","Cast <code>PrimitiveArray</code> to <code>DictionaryArray</code>. Also known as …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of another …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of the same …","Returns a <code>Utf8Array</code> where every element is the utf8 …","","","","","","","","","","Returns a <code>Utf8Array</code> where every element is the utf8 …","","Casts a <code>Utf8Array</code> to a Date32 primitive, making any …","Casts a <code>Utf8Array</code> to a Date64 primitive, making any …","Cast <code>Utf8Array</code> to <code>DictionaryArray</code>, also known as packing.","","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","Casts a <code>Utf8Array</code> to a <code>PrimitiveArray</code>, making any …","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","Similar to <code>cast</code>, but overflowing cast is wrapped Behavior:","Similar to dictionary_to_dictionary_keys, but overflowing …","Similar to dictionary_to_dictionary_values, but …","","","","","","","Comparison operators, such as <code>&gt;</code> (<code>Operator::Gt</code>)","","<code>NativeType</code> that supports a representation of 8 lanes","","Compare two <code>BinaryArray</code>s using the given <code>Operator</code>.","Compare a <code>BinaryArray</code> and a scalar value using the given …","Compare two <code>BooleanArray</code>s using the given <code>Operator</code>.","Compare a <code>BooleanArray</code> and a scalar value using the given …","","","Checks if an array of type <code>datatype</code> can be compared with …","","","Compares each slot of <code>lhs</code> against each slot of <code>rhs</code>.","Compares all slots of <code>lhs</code> against <code>rhs</code>.","","","","","","","","","","","","","","","","Compare two <code>PrimitiveArray</code>s using the given <code>Operator</code>.","Compare a <code>PrimitiveArray</code> and a scalar value using the given","","","","","Compare two <code>Utf8Array</code>s using the given <code>Operator</code>.","Compare a <code>Utf8Array</code> and a scalar value using the given …","Concatenate multiple Array of the same type into a single …","","Function that can filter arbitrary arrays","Returns a prepared function optimized to filter multiple …","Filters an Array, returning elements matching the filter …","Returns a new RecordBatch with arrays containing only …","Checks if an array of type <code>datatype</code> can perform hash …","Returns the element-wise hash of an <code>Array</code>. Validity is …","Element-wise hash of a <code>BinaryArray</code>. Validity is preserved.","Element-wise hash of a <code>BooleanArray</code>. Validity is preserved.","Element-wise hash of a <code>PrimitiveArray</code>. Validity is …","Element-wise hash of a <code>Utf8Array</code>. Validity is preserved.","Returns the values from <code>lhs</code> if the predicate is <code>true</code> or …","Checks if an array of type <code>datatype</code> can perform length …","Returns an array of integers with the number of bytes on …","Returns <code>lhs LIKE rhs</code> operation on two <code>BinaryArray</code>.","Returns <code>lhs LIKE rhs</code> operation.","Returns <code>lhs LIKE rhs</code> operation on two <code>Utf8Array</code>.","Returns <code>lhs LIKE rhs</code> operation.","","","","","Returns the array, taking only the number of elements …","A slice denoting <code>(array_index, start, len)</code> representing a …","","","","returns a comparison function between any two arrays of …","","","","Combines two sorted Arrays of the same …","Given two iterators of slices representing two sets of …","","Returns a vector of slices from different sorted arrays …","Takes N arrays together through <code>slices</code> under the …","Collect the MergeSortSlices to be a vec for reusing","","","","Returns whether <code>nullif</code> is implemented for the datatypes.","Returns an array whose validity is null iff <code>lhs == rhs</code> or …","Returns an array whose validity is null iff <code>lhs == rhs</code> or …","Given a list of already sorted columns, find partition …","","Regex matches","One column to be used in lexicographical sort","Options that define how sort kernels should behave","","","","","Checks if an array of type <code>datatype</code> can be sorted","","","","","","Whether to sort in descending order","","","","","","","Sort a list of <code>Array</code> using <code>SortOptions</code> provided for each …","Sorts a list of <code>SortColumn</code> into a non-nullable …","Whether to sort nulls first","","Sort the <code>Array</code> using <code>SortOptions</code>.","Sort elements from <code>values</code> into a non-nullable …","","","","","","","","","","Checks if an array of type <code>datatype</code> can perform substring …","Returns an ArrayRef with a substring starting from <code>start</code> …","Checks if an array of type <code>datatype</code> can perform take …","","Checks if an array of type <code>datatype</code> can perform hour …","Checks if an array of type <code>datatype</code> can perform year …","Extracts the hours of a temporal array as …","Extracts the years of a temporal array as …","Shifts array by defined number of items (to left or right) …","Opaque binary data of variable length.","Opaque binary data of variable length.","A boolean represented as a single bit.","<code>true</code> and <code>false</code>.","The set of supported logical types. Each variant uniquely …","A 32-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","Indicates the number of elapsed days and milliseconds, …","Two i32 representing days and ms","Decimal value with precision and scale precision is the …","A dictionary encoded array by <code>DictionaryIndexType</code>.","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","the set of valid indices used to index a …","Measure of elapsed time in either seconds, milliseconds, …","Extension type.","A logical <code>DataType</code> and its associated metadata per Arrow …","Opaque binary data of fixed size.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some data type with fixed length.","A list of some logical data type with fixed length.","A 16-bit floating point number.","A 32-bit floating point number.","A 32-bit floating point number.","A 64-bit floating point number.","A 64-bit floating point number.","A signed 128-bit integer.","A signed 16-bit integer.","A signed 16-bit integer.","A signed 16-bit integer.","A signed 32-bit integer.","A signed 32-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","A signed 64-bit integer.","A signed 64-bit integer.","A signed 8-bit integer.","A signed 8-bit integer.","A signed 8-bit integer.","A “calendar” interval which models types that don’t …","Interval units defined in Arrow","Opaque binary data of variable length and 64-bit offsets.","Opaque binary data of variable length and 64-bit offsets.","A list of some data type with variable length and 64-bit …","A list of some logical data type with variable length and …","A variable-length string in Unicode with UFT-8 encoding …","A variable-length string in Unicode with UFT-8 encoding …","A list of some data type with variable length.","A list of some logical data type with variable length.","Time in microseconds.","Time in milliseconds.","months_days_ns(i32, i32, i64)","The values are stored contiguously in 16 byte blocks. …","Time in nanoseconds.","A Null with no allocation.","Null type","The set of physical types: unique in-memory …","An array where each slot has a known compile-time size.","","An ordered sequence of <code>Field</code> with optional metadata.","typedef for <code>Arc&lt;Schema&gt;</code>.","Time in seconds.","A nested type that contains an arbitrary number of fields.","A nested datatype that contains a number of sub-fields.","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","Time units defined in Arrow.","A timestamp with an optional timezone.","An unsigned 16-bit integer.","An unsigned 16-bit integer.","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 32-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","An unsigned 64-bit integer.","An unsigned 64-bit integer.","An unsigned 8-bit integer.","An unsigned 8-bit integer.","An unsigned 8-bit integer.","A nested type that represents slots of differing types.","A nested datatype that can represent slots of differing …","A variable-length string in Unicode with UTF-8 encoding.","A variable-length string in Unicode with UTF-8 encoding.","Indicates the number of elapsed whole months, stored as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Look up a column by name and return a immutable reference …","Returns the <code>Field</code>’s <code>DataType</code>.","Its logical <code>DataType</code>","Returns the dictionary ID, if this is a dictionary type.","The dictionary id of this field (currently un-used)","Returns whether this <code>Field</code>’s dictionary is ordered, if …","Whether the dictionary’s values are ordered","Creates an empty <code>Schema</code>.","","","","","","","","","","","","","","","","","Returns the <code>Field</code> at position <code>i</code>.","Returns the first <code>Field</code> named <code>name</code>.","Returns all <code>Field</code>s in this schema.","Returns all <code>Field</code>s with dictionary id <code>dict_id</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find the index of the column with the given name.","","","","","","","","","Returns the <code>Field</code> nullability.","Returns the <code>Field</code>’s optional custom metadata.","Returns an immutable reference to the Map of custom …","A map of key-value pairs containing additional custom meta …","Returns the <code>Field</code>’s name.","Its name","","","","","Creates a new field","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values.","Creates a new field","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values and …","Whether its values can be null or not","Sets the <code>Field</code>’s optional metadata. The metadata is set …","Returns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …","","","","","","","","","the <code>PhysicalType</code> of this <code>DataType</code>.","","","","","","","","","","","","","","","","","","","","","","Merge field into self if it is compatible. Struct will be …","Merge schema into self if it is compatible. Struct fields …","","","","","","","","","Creates a new <code>Field</code> with metadata.","Creates a new <code>Field</code> with metadata.","","","","","","","","","","","","","","","","","","","","","","","","","Error during arithmetic operation. Normally returned …","Enum with all errors in this crate.","Triggered by an external error, such as CSV, serde, chrono.","Error during import or export to/from a format","Error during import or export to/from C Data Interface","When an invalid argument is passed to a function.","Errors associated with IO","Error during import or export to/from IPC","Whenever pushing to a container fails because it does not …","Returned when functionality is not yet available.","Any other error.","Typedef for a <code>std::result::Result</code> of an <code>ArrowError</code>.","Error associated with incompatible schemas.","","","","","","","","","","","","Wraps an external error in an <code>ArrowError</code>.","","","","","","","","","","","","","","","","","ABI-compatible struct for ArrowArray from C Data Interface …","ABI-compatible struct for <code>ArrowSchema</code> from C Data Interface","","","","","","","","","","create an empty Ffi_ArrowSchema","Exports an <code>Array</code> to the C data interface.","Exports a <code>Field</code> to the C data interface.","","","","","Imports a <code>Field</code> from the C data interface.","Imports a <code>Field</code> from the C data interface.","","","","","","","","","","Transfer data between the Arrow memory format and CSV …","APIs to read from and write to Arrow’s IPC format.","Convert data between the Arrow memory format and JSON …","Utils for JSON integration testing","APIs to read from and write to Parquet format.","APIs to represent <code>RecordBatch</code> as a formatted table.","An error that can occur when processing CSV data.","","","","","","","","","Unwrap this error into its underlying type.","Returns true if this is an I/O error.","Return the specific type of this error.","Return the position for this error, if one exists.","","","","","","","","A single CSV record stored as raw bytes.","A already configured CSV reader.","Builds a CSV reader with various configuration knobs.","A convenience method for specifying a configuration to …","","","","","Set the capacity (in bytes) of the buffer used in the CSV …","Returns a reference to the first row read by this parser …","Returns a borrowed iterator over all records as raw bytes.","The comment character to use when parsing CSV.","","The field delimiter to use when parsing CSV.","Returns a borrowed iterator over deserialized records.","Deserializes rows <code>ByteRecord</code> into a <code>RecordBatch</code>. Note that …","","Enable double quote escapes.","The escape character to use when parsing CSV.","Whether the number of fields in records is allowed to …","","","","","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Returns a mutable reference to the underlying reader.","Returns a reference to the underlying reader.","Whether to treat the first row as a special header row.","Returns true if and only if this reader has been …","Returns a reference to the first row read by this parser.","Infer the data type of a record","Infer the schema of a CSV file by reading through the …","","","Returns an owned iterator over all records as raw bytes.","Returns an owned iterator over deserialized records.","Unwraps this CSV reader, returning the underlying reader.","Returns an owned iterator over all records as strings.","Returns true if and only if this reader has been exhausted.","Create a new builder for configuring CSV parsing.","Return the current position of this CSV reader.","","The quote character to use when parsing CSV.","Enable or disable quoting.","Read a single row into the given byte record. Returns …","Read a single row into the given record. Returns false …","Reads <code>len</code> rows from the CSV into Bytes, skiping <code>skip</code> This …","Returns a borrowed iterator over all records as strings.","Seeks the underlying reader to the position given.","This is like <code>seek</code>, but provides direct control over how …","Set the headers of this CSV parser manually as raw bytes.","Set the headers of this CSV parser manually.","The record terminator to use when parsing CSV.","Whether fields are trimmed of leading and trailing …","","","","","","","A single CSV record stored as raw bytes.","","A already configured CSV writer.","Builds a CSV writer with various configuration knobs.","Return the entire row as a single byte slice. The slice …","","","","","","","","","Set the capacity (in bytes) of the internal buffer used in …","Clear this record so that it has zero fields.","","","","","","","","","The field delimiter to use when writing CSV.","Deserialize this record.","Enable double quote escapes.","","","","","","","","The escape character to use when writing CSV.","","Whether the number of fields in records is allowed to …","Flush the contents of the internal buffer to the …","","","","","","","","","","","","","Build a CSV writer from this configuration that writes …","Build a CSV writer with a default configuration that …","Build a CSV writer from this configuration that writes …","Build a CSV writer with a default configuration that …","Return the field at index <code>i</code>.","","Whether to write a header row before writing any other row.","","","","","","","Flush the contents of the internal buffer and return the …","Returns true if and only if this record is empty.","Returns an iterator over all fields in this record.","Returns the number of fields in this record.","","Create a new empty <code>ByteRecord</code>.","Create a new builder for configuring CSV writing.","Returns an Iterator that returns items of <code>Array</code> as <code>Vec&lt;u8&gt;</code>…","Return the position of this record, if available.","Add a new field to this record.","The quote character to use when writing CSV.","The quoting style to use when writing CSV.","Return the start and end position of a field in this …","Serializes a <code>RecordBatch</code> as vector of <code>ByteRecord</code>. The …","Serialize a single record using Serde.","Set the position of this record.","The record terminator to use when writing CSV.","","","","","Trim the fields of this record so that leading and …","Truncate this record to <code>n</code> fields.","","","","","","","","","","","","","Create a new empty <code>ByteRecord</code> with the given capacity …","Writes the data in a <code>RecordBatch</code> to <code>writer</code> according to …","Write a single <code>ByteRecord</code>.","Write a single field.","Writes a header to <code>writer</code> according to <code>schema</code>","Write a single record.","Deserialize a Schema table from IPC format to Schema data …","Generated code","APIs to read Arrow’s IPC format.","APIs to write to Arrow’s IPC format.","","","","","","","","Arrow File metadata","","","","","","","","","","","","","","","Length of the data (this is aligned so there can be a gap …","","","","","","","","","","","","","","","","User-defined metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","Length of the metadata","","","","","Index to the start of the RecordBlock (note this is past …","","","","Verifies that a buffer of bytes contains a <code>Footer</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","","","","","","","","","","","","","","","","","","","","","","","","Each constituent buffer is first compressed with the …","Optional compression for the memory buffers constituting …","","","Provided for forward compatibility in case we need to …","","","For sending dictionary encoding information. Any Field can …","","","","","","","","","","","","","","","","","","","","","","","Data structures for describing a table row batch (a …","","","","","The root Message type This union enables us to easily send …","","","","A data header describing the shared memory layout of a “…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Buffers correspond to the pre-ordered flattened buffer tree","","","","","","","","","","","","","","","","","","","","","Compressor library","","Optional compression of the message body","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If isDelta is true the values in the dictionary are to be …","","The number of value slots in the Arrow array at this level …","number of records / rows. The arrays in the batch should …","","Indicates the way the record batch body was compressed","","","","","","","","","","","","","","","Nodes correspond to the pre-ordered flattened logical …","","The number of observed nulls. Fields with null_count == 0 …","","","","","","","","Verifies that a buffer of bytes contains a <code>Message</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","","","","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","","","","","","","","","","","","","","","Opaque binary data","","","","","","","","","","A Buffer represents a single contiguous memory segment","The stream makes use of compressed bodies as described in …","","","The stream makes use of multiple full dictionaries with the","","Date is either a 32-bit or 64-bit type representing …","","","","","","Exact decimal value represented as an integer value in two…","","","","","","","","","","","Dictionary encoding metadata Maintained for forwards …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Endianness of the platform producing the data","Represents Arrow Features that might not have full support …","A field represents a named column in a record / row batch …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","user defined key value pairs to add custom metadata to …","","","","Same as Binary, but with 64-bit offsets, allowing to …","","","","","Same as List, but with 64-bit offsets, allowing to …","","","","","Same as Utf8, but with 64-bit offsets, allowing to …","","","","","","","","","","","","","","","A Map is a logical nested type that is represented as","","","","","","","","These are stored in the flatbuffer in the Type union below","","","","","","","","A Schema describes the columns in a row batch","","","","","A Struct_ in the flatbuffer metadata is the same as an …","","","","","Time type. The physical storage type depends on the unit","","","","","","Time elapsed from the Unix epoch, 00:00:00.000 on 1 …","","","","","Top-level Type value, enabling extensible type-specific …","","Needed to make flatbuffers happy.","A union is a complex type with children in Field By …","","","","","","Unicode with UTF-8 encoding","","","","","0.1.0 (October 2016).","0.2.0 (February 2017). Non-backwards compatible with V1.","0.3.0 -&gt; 0.7.1 (May - December 2017). Non-backwards …","= 0.8.0 (December 2017). Non-backwards compatible with V3.","= 1.0.0 (July 2020. Backwards compatible with V4 (V5 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of bits per value. The only accepted widths are 128 …umber of bytes per value","","children apply only to nested data types like Struct, List …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","User-defined metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Present only if the field is dictionary encoded.","","","","endianness of the buffer it is Little Endian by default if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Features used in the stream/filehe known dictionary id in the application where this data …","","The dictionary indices are constrained to be non-negative …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","By default, dictionaries are not ordered, or the order …","","","","","","Set to true if the keys within each value are sorted","","The absolute length (in bytes) of the memory buffer. The …","Number of list items per value","","","","Name is not required, in i.e. a List","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether or not this field can contain nulls. Should be …","","The relative offset into the shared memory page where the …","","","","","","","","","","","","Total number of decimal digits","","","","","","","","","","","","","","Verifies that a buffer of bytes contains a <code>Schema</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of digits after the decimal point “.”","","","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","The time zone is a string indicating the name of a time …his is the type of the decoded value if the field is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","","","","","","","","","","","","","","","","","","","Compressed Sparse format, that is matrix-specific.","","","","","","","","","EXPERIMENTAL: Data structures for sparse tensors …","","","","","Compressed Sparse Fiber (CSF) sparse tensor index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","axisOrder stores the sequence in which dimensions were …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Which axis, row or column, is compressed","","","","","","The location and size of the tensor’s data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The location and size of the indices matrix’s data","indicesBuffer stores the location and size of the array …","","","indicesBuffers stores values of nodes. Each tensor …","","Non-negative byte offsets to advance one value cell along …","","The type of values in indicesBuffer","The type of values in indicesBuffer","The type of values in indicesBuffers","","","","indptrBuffer stores the location and size of indptr array …","","indptrBuffers stores the sparsity structure. Each two …","","The type of values in indptrBuffer","CSF is a generalization of compressed sparse row (CSR) …","","","","","","","","","","","","","","","","","","","","","","","","","","This flag is true if and only if the indices matrix is …","","","","","","","","","","","","The number of non-zero values in a sparse tensor.","","","","","","Verifies that a buffer of bytes contains a <code>SparseTensor</code> …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","The dimensions of the tensor, optionally named.","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","Sparse tensor index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of data contained in a value cell. Currently only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","","","","Data structures for dense tensors Shape data for a single …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The location and size of the tensor’s data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Name of the dimension, optional","","","","","","Verifies that a buffer of bytes contains a <code>Tensor</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","The dimensions of the tensor, optionally named","","Length of dimension","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","Non-negative byte offsets to advance one value cell along …","","","","","","","","","","","","","","","","","","","","The type of data contained in a value cell. Currently only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arrow File reader","","","Arrow Stream reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the stream is finished","Creates a new <code>FileReader</code>. Use <code>projection</code> to only take …","Try to create a new stream reader","","","Read the dictionary from the buffer and provided metadata, …","Read the IPC file’s metadata","Creates a record batch from binary data using the …","Reads the metadata of the stream","","Return the schema of the file","Return the schema of the stream","Returns the schema.","","","","","","","","","","","","","","","","","","","","","","","","","Common utilities used to write to Arrow’s IPC format.","","","Write continuation bytes, and mark the stream as done","Write footer and closing tag, then mark the writer as done","","","","","Converts","","","","","Try create a new writer, with the schema written as part …","Try create a new writer, with the schema written as part …","","Try create a new writer with IpcWriteOptions","","","","Write a record batch to the stream","Write a record batch to the file","","Keeps track of dictionaries that have been written, to …","Stores the encoded data, which is an gen::Schema::Message, …","IPC write options used to control the behaviour of the …","Arrow buffers to be written, should be an empty vec for …","","","","","","","","","","","","","Keep track of the dictionary with the given ID and values. …","","","","An encoded gen::Schema::Message","","","","","","","","","Try create IpcWriteOptions, checking for incompatible …","","","","Write a record batch to the writer, writing the message …","Write a message’s IPC data and buffers, returning …","A JSON writer which serializes <code>RecordBatch</code>es to JSON arrays","Produces JSON output as a single JSON array. For example","This trait defines how to format a sequence of JSON …","Produces JSON output with one record per line. For example","A JSON writer which serializes <code>RecordBatch</code>es to newline …","JSON Reader","JSON file reader builder","A JSON writer which serializes <code>RecordBatch</code>es to a stream of","","","","","","","","","","","Create a new <code>Reader</code> from the <code>ReaderBuilder</code>","","","","write any bytes needed for the end of each row","write any bytes needed for the end of each row","","write any bytes needed for the start of each row","write any bytes needed for the start of each row","","Finishes the output stream. This function must be called …","","","","","","","","","","","Create a new JSON Reader from a <code>BufReader&lt;R: Read&gt;</code>","Infer the fields of a JSON file by reading the first n …","Infer the fields of a JSON file by reading all items from …","Infer the fields of a JSON file by reading the first n …","Set the JSON reader to infer the schema of the file","","","","","","Unwraps this <code>Writer&lt;W&gt;</code>, returning the underlying writer","Create a new JSON Reader from any value that implements …","","Construct a new writer","Read the next batch of records","Returns the schema of the reader, useful for getting the …","write any bytes needed for the start of each row","write any bytes needed for the start of each row","","write any bytes needed at the start of the file to the …","write any bytes needed at the start of the file to the …","","","","","","","","","","","","","","","","","Set the batch size (number of records to load at one time)","Set the reader’s column projection","Set the JSON file’s schema","Convert the <code>RecordBatch</code> into JSON rows, and write them to …","Serializes a <code>RecordBatch</code> into Json","Write a single JSON row to the output writer","A struct that represents an Arrow file with a schema and …","A struct that partially reads the Arrow JSON record batch","A struct that partially reads the Arrow JSON column/array","A struct that partially reads the Arrow JSON dictionary …","Fields are left as JSON <code>Value</code> as they vary by <code>DataType</code>","","A struct that partially reads the Arrow JSON schema.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","APIs to read from Parquet format.","APIs to write to Parquet format.","","","An embedded BSON document","","Metadata for a column chunk.","A descriptor for leaf-level primitive columns. This …","A <code>CompressedDataPage</code> is compressed, encoded representation …","","","A <code>DataPage</code> is an uncompressed, encoded representation of a …","","A Date","A decimal value.","Decompressor that allows re-using the page buffer of …","","","an enum is converted into a binary field","","Metadata for a Parquet file.","","","General Parquet error.","","","","","","","","A signed integer value.","","An interval of time","The type of the elements being iterated over.","","An embedded JSON document","","","","","","","When the parquet file is known to be out of spec.","Type declaration for a page filter","A page iterator iterates over row group’s pages. In …","","","Representation of a Parquet type. Used to describe …","","","","Single threaded iterator of <code>RecordBatch</code> from a parquet …","Metadata for a row group.","","An interface for dealing with streaming iterators.","","","A time.","A time","A date/time combination","A date/time combination","Timestamp logical type annotation","","","","","","An unsigned integer value.","","","","","Returns a stream of compressed data pages","Reads a file’s metadata.","","Advances the iterator to the next element.","","Determines if all elements of the iterator satisfy a …","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Borrows an iterator, rather than consuming it.","Returns the offset and length in bytes of the column chunk …","Consumes two iterators and returns a new iterator that …","Consumes two iterators and returns a new iterator that …","","","","","","","","","","","","","","","","","","","","","","","Produces a normal, non-streaming, iterator by cloning the …","Produces a normal, non-streaming, iterator by cloning the …","","","","Returns column chunk metadata for <code>i</code>th column.","Returns the encoding for this column","Returns column order for <code>i</code>th column in this file. If …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","Returns slice of column chunk metadata.","Returns the total compressed data size of this column …","Total size of all compressed column data in this row group.","<code>Compression</code> for this column.","Consumes the iterator, counting the number of remaining …","Consumes the iterator, counting the number of remaining …","String message for application that wrote this file.","Returns the offset for the column data.","Decompresses the page, using <code>buffer</code> for decompression. If …","","The <code>ColumnDescriptor</code> for this column. This descriptor …","","","Returns the offset for the dictionary page, if any.","","","","","","","","","","Byte offset in <code>file_path()</code>.","File where the column chunk is stored.","Creates an iterator which uses a closure to determine if …","Creates an iterator which uses a closure to determine if …","Creates an iterator which both filters and maps by …","Creates an iterator which both filters and maps by …","Creates a regular, non-streaming iterator which both …","Creates a regular, non-streaming iterator which both …","Returns the first element of the iterator that satisfies …","Returns the first element of the iterator that satisfies …","Creates an iterator which flattens iterators obtained by …","Creates an iterator which flattens iterators obtained by …","","","","","","","","","","","","","Reduces the iterator’s elements to a single, final value.","Reduces the iterator’s elements to a single, final value.","Calls a closure on each element of an iterator.","Calls a closure on each element of an iterator.","","","","","","","","","","","","","","","","","","Wraps an external error in an <code>ParquetError</code>.","Creates an iterator which is “well behaved” at the …","Creates an iterator which is “well behaved” at the …","Returns a reference to the current element of the iterator.","","","","","Creates a new iterator of compressed pages.","Creates a new iterator of compressed pages.","Returns <code>true</code> if this column chunk contains a index page, …","","","","","Returns the offset for the index page.","Call a closure on each element, passing the element on. …","Call a closure on each element, passing the element on. …","","","","","","","","","","","","","","","","","","","Method to convert to Thrift.","","Method to convert to Thrift.","","returns the metadata","key_value_metadata of this file.","Creates an iterator which transforms elements of this …","Creates an iterator which transforms elements of this …","Creates a regular, non-streaming iterator which transforms …","Creates a regular, non-streaming iterator which transforms …","Creates an iterator which transforms elements of this …","Creates an iterator which transforms elements of this …","","","","","","","","","Creates new file metadata.","","","","Advances the iterator and returns the next value.","Advances the iterator and returns the next value.","","Consumes the first <code>n</code> elements of the iterator, returning …","Consumes the first <code>n</code> elements of the iterator, returning …","Number of columns in this row group.","Number of rows in this row group.","number of rows in the file.","Total number of values in this column chunk.","","","","","","","","The <code>ColumnDescriptor</code> for this column. This descriptor …","Returns the index of the first element of the iterator …","Returns the index of the first element of the iterator …","","","","Reads parquets’ metadata syncronously.","Reads parquets’ metadata asynchronously.","","","Creates an iterator which returns elemens in the opposite …","Creates an iterator which returns elemens in the opposite …","The row groups of this file","","","Returns the [’SchemaDescriptor`] that describes schema …","schema descriptor.","","Returns the bounds on the remaining length of the iterator.","Returns the bounds on the remaining length of the iterator.","Creates an iterator which skips the first <code>n</code> elements.","Creates an iterator which skips the first <code>n</code> elements.","Creates an iterator that skips initial elements matching a …","Creates an iterator that skips initial elements matching a …","","Decodes the raw statistics into a statistics","Decodes the raw statistics into a statistics","","","","Creates an iterator which only returns the first <code>n</code> …","Creates an iterator which only returns the first <code>n</code> …","Creates an iterator which only returns initial elements …","Creates an iterator which only returns initial elements …","","","","","","","","","","","","","Total byte size of all uncompressed column data in this …","","","","","","","","","","","","","","","Method to convert from Thrift.","Method to convert from Thrift.","","","","","","","","","","","","","","","","Type of this column. Must be primitive.","","","","","","","","","","","","","","","Returns the total uncompressed data size of this column …","","version of this file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata for a Parquet file.","","","Representation of a Parquet type. Used to describe …","","A schema descriptor. This encapsulates the top-level …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","String message for application that wrote this file.","","","key_value_metadata of this file.","number of rows in the file.","Convert parquet schema to arrow schema","Reads an arrow schema from Parquet’s file metadata. …","The row groups of this file","schema descriptor.","version of this file.","","","","","","","","","","","","Trait denoting a deserialized parquet statistics (into …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bit packed encoding.  This can only be used if the data …","","Encoding for floating-point data. K byte-streams are …","A descriptor for leaf-level primitive columns. This …","A <code>CompressedDataPage</code> is compressed, encoded representation …","A <code>CompressedPage</code> is a compressed, encoded representation …","","","Delta encoding for integers. This can be used for int …","Incremental-encoded byte array. Prefix lengths are encoded …","Encoding for byte arrays to separate the length values and …","","<code>DynIter</code> is an implementation of a single-threaded, …","","","","","","","Representation of a Parquet type. Used to describe …","Default encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …","Deprecated: Dictionary encoding. The values in the …","","Group packed run length encoding. Usable for …","Dictionary encoding: the ids are encoded using the RLE …","","An iterator adapter that converts an iterator over …","A schema descriptor. This encapsulates the top-level …","","","","","","","","","Returns an iterator of compressed pages,","","","","","","","","","","","","","","","","","","","","","","","","Checks whether the <code>data_type</code> can be encoded as <code>encoding</code>. …","Checks if <code>sub_type</code> schema is part of current schema. This …","","","","","","","","","","","","","","","Returns <code>ColumnDescriptor</code> for a field position.","Returns slice of <code>ColumnDescriptor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>BasicTypeInfo</code> information about the type.","","","","","","","","","","","","","","","","","","","","","","","","Returns maximum definition level for this column.","Returns maximum repetition level for this column.","Returns column name.","Returns schema name.","Returns this type’s field name.","","","","","Creates new descriptor for leaf-level column.","Creates new schema descriptor from Parquet schema.","","","","","Returns number of leaf-level columns.","","","","","Returns self type <code>PhysicalType</code> for this leaf column.","","Decodes the raw statistics into a statistics","","","","","","","","","Creates a parquet <code>SchemaDescriptor</code> from a <code>Schema</code>.","","Method to convert to Thrift.","","","","","","","","","","","","","","","","","Method to convert from Thrift.","","","","","","","","","","","","Creates a new <code>RowGroupIterator</code> from an iterator over …","Returns self type <code>ParquetType</code> for this leaf column.","","","","","","","","","","","","","","Writes","","","","","","","","","","","","Writes","Async writes","Prints a visual representation of record batches to stdout","Returns a visual representation of multiple <code>RecordBatch</code>es.","A two-dimensional batch of column-oriented data with a …","Options that control the behaviour used when creating a …","Trait for types that can read <code>RecordBatch</code>’s.","","","","","","","Get a reference to a column’s array by index.","Get a reference to all columns in the record batch.","","","","","Panics iff the null count of the array is not null.","","","","","Match field names of structs and lists. If set to <code>true</code>, …","","Creates a new empty <code>RecordBatch</code>.","Reads the next <code>RecordBatch</code>.","Returns the number of columns in the record batch.","Returns the number of rows in each column.","Returns the schema of this <code>RecordBatchReader</code>.","Returns the <code>Schema</code> of the record batch.","","","","Create a <code>RecordBatch</code> from an iterable list of pairs of the …","Create a <code>RecordBatch</code> from an iterable list of tuples of the","","","Creates a <code>RecordBatch</code> from a schema and columns.","Creates a <code>RecordBatch</code> from a schema and columns, with …","","","","","The scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …","","","Trait object declaring an optional value with a logical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","creates a new <code>Scalar</code> from an <code>Array</code>.","Returns a new <code>PrimitiveScalar</code> with the same value but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of seconds in a day","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>","Parses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …","converts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>","converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to …","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to …","converts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(us)</code> to …","Calculates the scale factor between two TimeUnits. The …","Parses a <code>Utf8Array</code> to naive timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","Parses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","An iterator of known, fixed size. A trait denoting Rusts’…","Something that can be use as a chunk of bits. This is used …","An iterator of <code>bool</code> over a <code>BitChunk</code>. This iterator is often","The representation of this type in the stack.","Type denoting its representation as bytes","The natural <code>DataType</code>.","Types that can be used to index a slot of an array.","iterator of <code>Index</code> equivalent to <code>(a..b)</code>.","Declares any type that can be allocated, serialized and …","Trait denoting anything that has a natural logical <code>DataType</code>…","describes whether a <code>DataType</code> is valid.","","","","","","","","","","","","","The number of days","","The in-memory representation of the DayMillisecond variant …","","","","","","","","","","","","","","","From bytes in big endian","","","convert itself from bytes.","Convert itself from <code>usize</code>.","","","","","","","","","","","Whether <code>data_type</code> is a valid <code>DataType</code>.","","","The number of milliseconds","","The in-memory representation of the MonthDayNano variant …","","","Creates a new <code>BitChunkIter</code> with <code>len</code> bits.","Returns a new <code>IndexRange</code>.","A new <code>days_ms</code>.","","","","","A value with a single bit set at the most right position.","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","Contains traits and implementations of multi-data used in …","","","To bytes in big endian","","","To bytes in little endian","","","convert itself into bytes.","","","","","Convert itself to <code>usize</code>.","","","","","","","","","","","","","A value with no bits set.","","","","","","","","","","","The type holding bits for masks.","Describes the ability to convert itself from a <code>BitChunk</code>.","Number of lanes","Type used for masking.","The <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …","A struct that lends itself well to be compiled leveraging …","Trait implemented by some <code>NativeType</code> that have a SIMD …","The SIMD type associated with this trait. This type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert itself from a slice.","Convert itself from a slice.","","","","","","","","","","","creates a new Self from <code>v</code> by populating items from <code>v</code> up to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets values to <code>default</code> based on <code>mask</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,20,21,3,4,6,8,10,12,14,17,20,3,4,6,8,10,12,14,17,20,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,22,20,21,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,22,20,21,23,5,7,9,11,13,15,16,1,18,19,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,23,13,15,18,19,0,5,7,9,11,13,15,16,1,18,19,22,21,5,7,9,11,13,15,16,1,18,19,22,21,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,20,21,4,6,8,14,17,20,5,21,13,15,1,1,1,2,5,5,6,7,7,9,9,10,11,11,13,13,15,15,16,16,17,1,1,18,18,19,19,21,21,0,4,6,17,20,17,17,17,17,17,18,19,2,4,5,5,6,7,7,8,9,9,10,11,11,12,13,13,14,15,15,16,16,17,1,1,18,18,19,19,22,20,21,21,4,5,5,5,5,6,6,7,7,7,7,8,8,8,9,9,9,10,11,11,11,12,13,13,14,15,15,15,16,16,17,17,17,1,1,1,1,18,18,18,19,22,20,21,21,21,21,4,5,6,7,9,10,11,13,15,16,17,1,18,19,20,21,20,21,24,4,5,6,7,11,17,1,20,21,4,5,20,21,5,6,7,17,1,21,4,5,6,7,17,1,20,21,4,5,6,7,17,1,20,21,4,5,6,7,17,1,20,21,17,1,1,15,15,0,18,19,0,19,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,22,20,21,4,6,8,14,17,20,17,18,22,2,3,24,2,19,2,3,5,6,7,9,10,11,13,15,17,1,19,21,9,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,20,21,1,1,1,8,12,14,4,6,8,10,12,14,17,22,20,5,7,9,11,13,15,16,1,18,19,21,0,14,5,7,9,11,13,15,16,1,18,19,21,0,14,14,22,22,2,23,5,7,9,11,13,15,16,1,18,19,21,25,5,5,15,19,20,21,21,0,1,1,1,1,1,1,4,6,10,17,20,3,4,6,8,8,10,12,14,17,20,1,1,4,6,17,20,1,1,1,1,1,1,1,1,1,6,17,17,17,11,22,2,5,5,7,7,9,9,11,11,13,13,15,15,16,16,1,1,18,18,19,19,21,21,1,1,1,17,1,24,5,7,9,11,13,15,16,1,18,19,22,21,5,7,9,11,13,15,16,1,18,19,21,26,4,6,8,14,17,20,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,22,20,21,27,5,7,9,15,1,18,19,21,10,11,12,12,12,4,5,6,7,17,20,21,4,5,6,7,17,20,21,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,22,20,21,28,4,6,10,14,17,20,8,14,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,22,20,21,19,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1,18,19,20,21,29,5,7,9,10,11,13,13,15,15,1,19,21,5,7,10,11,15,1,21,25,5,5,6,7,8,9,10,11,12,13,14,15,17,1,18,20,21,21,5,6,7,9,13,15,17,21,10,17,20,4,6,10,14,17,20,17,2,5,5,7,7,9,9,11,11,13,13,15,15,16,1,1,18,18,19,21,21,0,0,0,0,0,0,0,0,0,0,30,31,32,33,34,35,36,37,38,39,38,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,33,38,30,31,32,33,34,35,36,37,39,38,30,31,32,33,34,35,36,37,39,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,0,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,30,31,32,33,34,35,36,37,39,0,0,0,0,0,0,0,40,41,0,40,41,40,41,40,41,40,41,41,40,41,40,41,40,40,40,40,40,40,41,40,40,41,41,41,40,40,41,40,40,41,40,41,41,41,40,41,41,41,40,41,40,41,40,41,40,41,40,41,41,40,41,41,40,40,0,40,40,41,0,41,40,41,40,41,40,41,40,41,40,41,0,0,40,0,0,0,0,0,42,0,0,43,44,45,46,47,43,44,45,46,47,0,43,46,47,43,46,47,0,0,44,45,46,47,43,44,45,46,47,42,0,0,43,44,45,46,47,43,44,45,46,47,44,0,44,45,43,44,45,46,47,43,44,45,46,47,43,46,42,48,44,44,45,45,45,45,0,0,43,44,45,46,47,42,43,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,42,0,0,0,49,49,49,50,49,50,49,50,49,50,49,49,50,50,49,50,49,50,49,49,49,50,49,49,49,49,49,49,50,49,49,49,50,50,50,50,49,49,49,50,49,49,50,49,50,49,50,49,50,49,50,50,49,50,50,49,49,49,49,49,50,50,49,49,50,49,50,49,50,49,50,49,50,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,0,0,0,0,0,51,0,0,51,0,0,0,51,0,0,51,0,0,51,51,52,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,53,0,0,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,53,53,54,0,0,0,0,53,53,0,55,67,63,69,59,53,53,0,66,53,53,53,53,53,53,53,62,0,57,65,61,68,56,64,60,58,0,53,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,70,70,70,70,70,0,71,0,0,0,0,0,0,70,70,0,70,70,0,0,72,70,70,70,70,72,72,70,72,72,70,70,72,72,72,0,0,70,70,70,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,73,0,73,73,73,0,0,73,0,0,73,73,73,73,0,0,0,0,0,0,0,0,74,75,74,75,0,74,75,74,75,75,75,74,75,74,75,74,75,0,0,75,74,0,0,74,75,74,75,74,75,74,75,74,0,0,0,0,0,0,0,0,0,76,77,76,77,0,77,77,78,79,77,76,77,0,77,77,0,76,77,76,77,77,79,77,79,77,79,80,79,77,80,79,77,80,79,77,80,79,77,77,0,76,77,76,77,76,77,76,77,81,81,79,78,81,76,77,0,76,0,0,0,81,76,77,77,77,0,77,80,79,77,80,79,77,80,79,77,80,79,77,76,77,76,77,78,82,80,79,76,83,77,81,78,82,80,79,76,83,77,81,78,82,80,79,76,83,77,81,78,82,80,79,76,83,77,81,78,83,82,82,82,82,82,82,83,82,80,79,76,83,77,81,78,82,80,79,76,83,77,81,78,83,83,83,83,82,82,80,79,76,83,83,77,77,81,78,82,82,80,79,76,83,77,81,78,82,80,79,76,77,81,78,82,80,79,76,77,81,78,83,82,80,79,76,83,77,81,78,82,82,83,82,82,82,82,76,83,77,82,83,82,83,82,82,77,82,80,79,76,83,77,81,78,77,82,83,77,82,82,80,79,76,83,83,77,81,78,82,80,79,76,83,77,81,78,82,83,82,80,79,76,83,77,81,78,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,84,91,94,95,96,97,94,97,98,99,100,0,100,100,100,100,100,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,102,103,104,105,106,107,108,109,110,102,0,0,111,112,111,112,111,111,111,112,111,112,0,0,111,112,111,112,0,0,111,112,111,111,112,111,112,111,112,0,0,0,0,0,0,0,113,113,113,113,113,113,113,113,113,113,113,113,0,113,113,113,113,113,0,0,0,0,114,114,115,114,115,114,115,115,114,114,114,115,0,0,114,114,114,114,115,114,115,114,115,114,115,115,115,114,115,115,0,0,114,115,115,115,115,115,115,114,115,0,114,114,115,115,0,115,115,115,115,115,114,114,114,115,114,115,114,115,0,0,0,0,116,117,116,118,119,117,116,118,119,118,116,117,116,117,116,117,117,116,118,118,116,118,119,117,116,116,116,117,116,118,116,118,119,117,116,118,119,117,116,116,116,116,118,119,116,118,119,118,119,116,117,118,117,116,117,116,118,119,119,116,116,116,117,116,118,0,116,116,118,118,116,0,119,116,118,117,117,117,116,116,116,117,116,118,119,117,116,118,119,117,116,118,119,116,0,119,119,0,119,0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,121,121,121,121,121,121,122,122,122,122,122,120,123,124,122,120,121,123,124,122,120,121,120,121,120,121,121,121,124,124,121,124,120,121,122,0,0,120,121,120,121,123,124,122,120,121,0,0,121,123,124,122,120,121,120,120,121,122,120,120,120,121,124,0,0,0,120,121,121,124,120,120,120,0,0,0,120,121,123,124,122,120,121,123,124,122,120,121,123,124,122,120,121,121,124,125,126,127,128,126,0,0,0,0,0,0,0,127,0,0,0,125,126,127,0,0,0,125,126,127,0,0,0,125,126,127,0,0,0,0,125,0,0,0,0,0,0,127,0,127,0,0,0,127,127,127,129,130,131,130,129,132,129,129,132,132,130,131,130,129,125,131,130,132,129,133,134,135,134,133,136,133,133,136,136,134,135,134,133,129,137,138,139,140,135,141,142,134,143,144,136,145,137,133,125,126,127,128,131,130,132,129,138,139,140,135,141,142,134,143,144,136,145,137,133,125,126,127,128,131,130,132,129,130,142,125,126,127,128,131,130,132,129,125,126,127,128,131,130,132,129,125,126,127,131,140,130,142,131,130,132,129,129,137,132,144,140,142,144,137,125,126,127,128,131,130,132,129,125,126,127,135,134,136,133,0,0,125,126,127,128,131,130,132,129,125,126,127,128,131,130,132,129,138,139,140,135,141,142,134,143,144,136,145,137,133,125,126,127,128,131,130,132,129,125,126,127,125,126,127,0,0,125,126,127,129,137,129,129,129,129,129,129,137,132,144,131,130,132,129,138,139,140,135,141,142,134,143,144,136,145,137,133,125,126,127,128,131,130,132,129,132,144,128,130,142,131,140,125,126,127,128,131,130,132,129,135,134,136,133,128,130,142,128,125,126,127,125,126,127,128,0,0,0,125,126,127,128,131,130,132,129,128,128,0,0,0,125,126,127,125,126,127,128,131,130,132,129,138,139,140,135,141,142,134,143,144,136,145,137,133,125,126,127,128,131,130,132,129,138,139,140,135,141,142,134,143,144,136,145,137,133,125,126,127,128,131,130,132,129,138,139,140,135,141,142,134,143,144,136,145,137,133,125,126,127,128,131,130,132,129,125,126,127,129,137,146,147,148,149,150,151,152,153,154,155,156,155,0,153,0,0,0,0,153,0,0,0,0,147,150,152,147,149,0,153,0,0,0,0,0,153,0,0,0,148,154,0,0,0,0,0,0,153,0,0,0,146,147,148,149,150,151,152,153,154,155,0,0,0,0,0,0,0,0,0,0,146,147,148,149,150,151,152,153,154,155,0,0,0,0,0,0,0,0,0,0,146,147,148,149,150,151,152,153,154,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,153,0,0,0,0,153,0,0,0,149,0,153,0,0,0,0,153,0,0,0,0,0,0,0,0,0,153,0,0,0,0,153,0,0,0,0,153,0,0,0,0,153,0,0,0,155,151,150,151,152,0,153,0,0,0,0,151,153,0,153,0,0,0,0,151,149,0,0,0,0,148,0,153,0,0,0,0,153,0,0,0,0,0,153,0,0,0,0,0,147,0,153,0,0,0,0,0,153,0,0,0,146,146,146,146,146,157,158,159,160,161,161,162,161,163,162,162,162,163,163,163,157,164,165,166,167,161,161,168,158,158,169,167,161,161,170,159,169,171,172,164,152,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,182,183,184,185,186,186,187,186,188,187,187,187,188,188,188,182,189,190,191,192,186,186,193,183,183,194,192,186,186,195,184,194,196,197,189,157,158,159,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,191,216,217,190,218,219,192,220,198,182,221,222,193,223,224,225,226,227,228,229,230,231,232,233,234,235,236,185,237,238,239,240,199,183,241,242,195,243,200,184,244,245,194,246,247,196,248,249,197,250,251,189,252,253,188,254,255,186,256,257,187,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,191,216,217,190,218,219,192,220,198,182,221,222,193,223,224,225,226,227,228,229,230,231,232,233,234,235,236,185,237,238,239,240,199,183,241,242,195,243,200,184,244,245,194,246,247,196,248,249,197,250,251,189,252,253,188,254,255,186,256,257,187,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,160,236,161,255,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,146,147,148,149,150,151,152,153,154,155,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,161,162,255,257,203,206,209,212,215,217,219,198,222,224,227,230,233,236,238,199,242,200,245,247,249,251,253,255,257,146,147,148,149,150,151,152,153,154,155,156,161,255,163,253,162,257,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,146,147,148,149,150,151,152,153,154,155,162,257,162,257,204,207,210,213,191,190,192,182,193,225,228,231,234,185,239,183,195,184,194,196,197,189,188,186,187,0,0,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,191,216,217,190,218,219,192,220,198,182,221,222,193,223,224,225,226,227,228,229,230,231,232,233,234,235,236,185,237,238,239,240,199,183,241,242,195,243,200,184,244,245,194,246,247,196,248,249,197,250,251,189,252,253,188,254,255,186,256,257,187,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,146,147,148,149,150,151,152,153,154,155,146,147,148,149,150,151,152,153,154,155,0,0,146,147,148,149,150,151,152,153,154,155,163,253,163,253,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,191,216,217,190,218,219,192,220,198,182,221,222,193,223,224,225,226,227,228,229,230,231,232,233,234,235,236,185,237,238,239,240,199,183,241,242,195,243,200,184,244,245,194,246,247,196,248,249,197,250,251,189,252,253,188,254,255,186,256,257,187,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,163,253,157,198,164,251,165,217,156,166,215,167,219,161,255,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,204,207,210,213,191,190,192,182,193,225,228,231,234,185,239,183,195,184,194,196,197,189,188,186,187,156,161,255,156,146,147,148,149,150,151,152,153,154,155,168,158,222,199,146,147,148,149,150,151,152,153,154,155,156,0,0,0,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,158,199,156,156,0,0,0,169,245,146,147,148,149,150,151,152,153,154,155,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,191,216,217,190,218,219,192,220,198,182,221,222,193,223,224,225,226,227,228,229,230,231,232,233,234,235,236,185,237,238,239,240,199,183,241,242,195,243,200,184,244,245,194,246,247,196,248,249,197,250,251,189,252,253,188,254,255,186,256,257,187,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,191,216,217,190,218,219,192,220,198,182,221,222,193,223,224,225,226,227,228,229,230,231,232,233,234,235,236,185,237,238,239,240,199,183,241,242,195,243,200,184,244,245,194,246,247,196,248,249,197,250,251,189,252,253,188,254,255,186,256,257,187,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,167,219,161,255,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,191,216,217,190,218,219,192,220,198,182,221,222,193,223,224,225,226,227,228,229,230,231,232,233,234,235,236,185,237,238,239,240,199,183,241,242,195,243,200,184,244,245,194,246,247,196,248,249,197,250,251,189,252,253,188,254,255,186,256,257,187,146,147,148,149,150,151,152,153,154,155,156,173,174,175,176,166,165,167,157,168,177,178,179,180,160,181,158,170,159,169,171,172,164,163,161,162,161,255,170,159,169,171,172,242,200,245,247,249,164,251,146,147,148,149,150,151,152,153,154,155,258,259,258,258,259,0,0,258,259,0,0,258,259,0,0,259,258,0,0,259,0,0,0,0,0,0,0,0,259,0,0,0,0,259,0,0,0,0,0,260,261,262,263,261,260,263,263,261,260,261,260,261,260,263,262,262,262,262,262,262,263,261,260,262,264,265,266,267,265,264,267,267,265,264,265,264,265,264,267,266,266,266,266,266,266,260,268,269,270,271,267,272,273,265,274,268,264,275,276,266,258,259,263,261,260,262,269,270,271,267,272,273,265,274,268,264,275,276,266,258,259,263,261,260,262,258,259,263,261,260,262,258,259,263,261,260,262,258,259,261,273,263,261,260,262,262,276,271,273,268,276,258,259,263,261,260,262,258,259,267,265,264,266,0,0,258,259,263,261,260,262,258,259,263,261,260,262,269,270,271,267,272,273,265,274,268,264,275,276,266,258,259,263,261,260,262,258,259,258,259,0,0,258,259,263,261,271,273,260,268,263,271,263,261,260,271,273,268,261,273,260,268,261,260,273,268,263,261,260,262,269,270,271,267,272,273,265,274,268,264,275,276,266,258,259,263,261,260,262,263,271,258,259,263,261,260,262,267,265,264,266,262,276,258,259,258,259,0,0,0,258,259,263,261,260,262,262,276,0,0,0,262,276,262,262,262,262,276,258,259,258,259,263,261,260,262,269,270,271,267,272,273,265,274,268,264,275,276,266,258,259,263,261,260,262,269,270,271,267,272,273,265,274,268,264,275,276,266,258,259,263,261,260,262,262,276,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,269,270,271,267,272,273,265,274,268,264,275,276,266,258,259,263,261,260,262,262,276,258,259,0,0,0,0,0,0,0,0,277,278,277,278,277,277,277,278,277,279,280,279,280,279,279,279,281,282,280,283,284,279,278,277,281,282,280,283,284,279,278,277,278,277,278,277,278,277,277,284,282,284,278,277,280,279,0,0,278,277,278,277,281,282,280,283,284,279,278,277,0,0,278,277,281,282,280,283,284,279,278,277,278,282,278,277,280,279,0,0,0,278,277,277,284,278,282,0,0,0,277,284,278,277,281,282,280,283,284,279,278,277,281,282,280,283,284,279,278,277,277,284,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,281,282,280,283,284,279,278,277,277,284,0,0,285,0,0,0,285,286,285,287,288,289,286,285,287,288,289,288,288,288,289,286,285,287,288,289,286,285,287,288,289,286,287,287,286,287,286,287,0,0,0,0,286,286,287,288,288,286,285,287,288,289,286,285,287,288,289,286,285,287,288,289,285,290,0,0,291,292,291,292,0,291,292,291,292,291,292,291,292,0,291,292,291,292,291,292,291,292,291,292,0,291,292,0,0,0,0,293,294,293,295,294,293,295,295,0,295,294,293,295,294,294,293,295,293,295,294,294,293,295,294,293,295,295,294,293,295,0,0,0,0,0,0,0,0,0,0,296,297,298,299,300,296,297,298,299,300,297,297,298,299,301,301,298,301,301,299,300,296,297,298,299,300,296,297,298,299,300,296,0,0,0,297,296,297,298,299,300,300,296,297,300,296,296,301,301,299,301,301,299,296,297,298,299,300,296,297,298,299,300,296,297,298,299,300,297,297,297,300,0,300,0,0,0,0,0,0,0,0,302,303,302,304,305,306,303,307,308,309,302,304,305,306,303,307,308,309,305,309,309,309,307,309,308,309,302,304,305,306,303,307,308,309,302,305,305,304,302,304,305,306,303,307,308,309,302,304,305,305,306,303,307,308,309,0,306,308,306,302,304,305,306,303,307,308,309,306,303,304,305,305,303,305,309,302,302,304,305,306,303,307,308,309,309,0,302,304,305,306,303,307,308,309,302,304,305,306,303,307,308,309,302,304,305,306,303,307,308,309,309,309,0,0,310,311,312,311,0,0,0,310,310,0,0,312,312,0,311,310,312,313,0,311,311,313,314,310,312,311,312,311,312,312,311,312,315,310,312,310,0,310,316,316,316,313,0,0,0,0,0,0,0,314,0,0,310,0,310,310,312,312,312,312,0,310,310,312,312,312,312,312,317,317,0,0,0,0,315,318,315,315,315,315,319,318,320,313,321,322,323,317,324,311,312,316,325,310,319,318,320,313,321,322,323,317,324,311,312,316,325,310,324,315,315,321,315,315,313,321,322,323,317,324,311,312,316,325,310,313,321,322,323,317,324,311,312,316,325,310,315,315,316,325,310,323,321,322,322,323,321,323,321,315,315,322,321,0,324,321,324,324,321,324,311,312,316,325,310,316,325,310,321,321,315,315,315,315,315,315,315,315,315,315,313,313,321,322,323,317,324,311,312,316,325,310,315,315,315,315,319,318,320,313,313,313,313,321,322,323,317,324,311,312,316,325,310,313,315,315,315,318,316,325,310,0,0,321,316,325,310,324,321,315,315,0,319,318,320,313,321,322,323,317,324,311,312,316,325,310,318,319,320,321,322,323,325,322,322,315,315,315,315,315,315,319,311,312,316,325,310,318,320,322,324,325,319,315,315,320,315,315,323,323,322,321,317,324,0,0,316,325,310,321,315,315,316,325,310,0,0,324,320,315,315,322,0,319,322,322,319,315,315,315,315,315,315,0,321,324,316,325,310,315,315,315,315,313,321,322,323,317,324,311,312,316,325,310,313,323,319,318,320,313,321,322,323,317,324,311,312,316,325,310,321,323,319,318,320,313,321,322,323,317,324,311,312,316,325,310,319,321,319,318,320,313,321,322,323,317,324,311,312,316,325,310,321,325,322,316,325,310,316,325,310,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,343,344,345,346,347,348,347,348,348,347,348,347,349,350,350,0,314,0,0,314,0,322,322,0,0,322,322,0,0,322,322,322,347,348,347,348,348,347,348,347,0,0,0,0,0,351,352,353,354,351,352,353,354,351,352,353,354,351,352,353,354,355,351,352,353,354,351,0,351,352,353,354,355,351,352,353,354,351,352,353,354,351,351,352,352,353,354,354,351,352,353,354,351,352,353,354,351,352,353,354,351,352,353,354,351,352,353,354,351,352,353,354,351,352,353,353,354,351,352,353,354,351,352,353,354,356,357,356,0,0,0,0,358,356,356,356,358,0,0,314,357,0,357,357,0,356,356,314,356,356,0,0,0,357,357,359,359,0,0,357,0,0,360,361,362,360,363,364,358,357,356,314,365,359,361,362,360,363,364,358,357,356,314,365,359,0,314,360,363,357,356,314,365,359,360,363,357,356,314,365,359,363,363,364,364,365,364,360,357,356,314,365,359,357,356,365,359,363,360,363,364,358,357,356,314,365,359,361,362,360,363,364,358,357,356,314,365,359,314,314,314,357,356,365,359,357,356,365,359,364,361,362,360,363,364,358,357,356,314,365,359,361,362,314,360,360,360,363,314,360,314,365,362,360,363,364,314,361,362,363,364,361,0,360,360,362,364,0,360,363,357,356,314,365,359,0,0,314,361,362,360,363,364,358,357,357,356,356,314,365,359,314,363,314,314,361,362,360,363,364,358,357,356,314,365,359,361,360,361,362,360,363,364,358,357,356,314,365,359,364,365,0,365,366,367,347,348,347,348,348,347,348,347,0,0,0,0,0,0,0,368,369,368,369,368,368,368,368,369,368,368,369,368,368,369,368,369,369,368,368,370,368,368,370,368,368,368,369,368,368,368,369,368,368,368,369,0,0,0,0,0,0,0,0,371,372,373,374,375,376,377,378,372,373,374,375,376,377,378,372,373,374,375,376,377,378,372,373,374,375,376,377,378,372,373,374,375,376,377,378,371,372,373,374,375,376,377,378,377,371,372,373,374,375,376,377,378,372,373,374,375,376,377,378,372,372,373,373,374,374,375,375,376,377,378,372,373,374,375,376,377,378,371,372,373,374,375,376,377,378,372,373,374,375,376,377,378,0,372,372,373,374,375,376,377,378,372,373,374,375,376,377,378,372,373,374,375,376,377,378,372,373,374,375,376,377,378,372,373,374,375,376,378,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,379,380,0,0,0,0,0,381,382,383,384,381,382,383,384,383,384,383,384,383,384,0,383,384,383,384,383,384,383,383,384,384,381,382,383,384,379,383,384,42,385,383,384,383,384,381,382,383,384,381,382,386,383,384,383,384,0,383,384,381,382,383,384,381,382,384,42,385,385,0,381,382,379,383,384,379,383,384,42,383,384,383,384,385,381,382,383,384,381,382,383,384,381,382,383,384,42,387,388,389,390,391,392,393,394,395,396,397,0,397,397,397,0,0,398,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,0,0,387,388,389,390,391,392,393,394,395,396,399,397,387,388,389,390,391,392,393,394,395,396,397,387,388,389,390,391,392,393,394,395,396,0,0,0,0,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,397,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,387,388,389,390,391,392,393,394,395,396,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["nonnull",3],["nativetype",8]]],[[["usize",15]],[["nonnull",3],["nativetype",8]]],[[],[["nonnull",3],["nativetype",8]]],[[["nonnull",3],["nativetype",8],["usize",15]]],[[["nonnull",3],["usize",15],["nativetype",8]],[["nonnull",3],["nativetype",8]]],[[],["isize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],[["vec",3,["option"]],["option",4,["nonnull"]]]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],[["arc",3,["array"]],["vec",3,["arc"]]]],[[],[["arc",3,["array"]],["vec",3,["arc"]]]],[[],[["arc",3,["array"]],["vec",3,["arc"]]]],[[],[["arc",3,["array"]],["vec",3,["arc"]]]],[[],[["arc",3,["array"]],["vec",3,["arc"]]]],[[],[["arc",3,["array"]],["vec",3,["arc"]]]],[[["array",8]],[["box",3,["array"]],["array",8]]],[[],["binaryarray",3]],[[],["booleanarray",3]],[[],["dictionaryarray",3]],[[],["fixedsizebinaryarray",3]],[[],["fixedsizelistarray",3]],[[],["listarray",3]],[[],["nullarray",3]],[[],["primitivearray",3]],[[],["structarray",3]],[[],["unionarray",3]],[[],["utf8valuesiter",3]],[[],["utf8array",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[["usize",15],["datatype",4]],["datatype",4]],[[["datatype",4]],["datatype",4]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[],["bool",15]],[[["array",8]],["bool",15]],[[["array",8]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["growablebinary",3]]],[[["mutablebinaryarray",3]]],[[["asref",8]]],[[]],[[]],[[]],[[]],[[["growableboolean",3]]],[[]],[[["mutablebooleanarray",3]]],[[]],[[]],[[]],[[["growabledictionary",3]]],[[]],[[["mutabledictionaryarray",3]]],[[]],[[["mutablefixedsizebinaryarray",3]]],[[]],[[["growablefixedsizebinary",3]]],[[]],[[["mutablefixedsizelistarray",3]]],[[]],[[]],[[]],[[["growablelist",3]]],[[["mutablelistarray",3]]],[[["growablenull",3]]],[[]],[[["datatype",4]]],[[]],[[]],[[]],[[["growableprimitive",3]]],[[["mutableprimitivearray",3]]],[[]],[[]],[[["recordbatch",3]]],[[["growablestruct",3]]],[[]],[[]],[[]],[[["asref",8]]],[[["mutableutf8array",3]]],[[["growableutf8",3]]],[[]],[[["option",4,["mutablebitmap"]],["u8",15],["mutablebuffer",3],["mutablebitmap",3],["datatype",4],["mutablebuffer",3,["u8"]]]],[[["buffer",3],["u8",15],["bitmap",3],["buffer",3,["u8"]],["datatype",4],["option",4,["bitmap"]]]],[[["option",4,["mutablebitmap"]],["datatype",4],["mutablebitmap",3]]],[[["bitmap",3],["datatype",4],["option",4,["bitmap"]]]],[[["array",8],["primitivearray",3],["arc",3,["array"]]]],[[["option",4,["mutablebitmap"]],["u8",15],["mutablebitmap",3],["datatype",4],["mutablebuffer",3,["u8"]]]],[[["u8",15],["bitmap",3],["buffer",3,["u8"]],["datatype",4],["option",4,["bitmap"]]]],[[["arc",3,["array"]],["bitmap",3],["array",8],["datatype",4],["option",4,["bitmap"]]]],[[["buffer",3],["arc",3,["array"]],["bitmap",3],["array",8],["datatype",4],["option",4,["bitmap"]]]],[[["usize",15],["datatype",4]]],[[["mutablebuffer",3],["mutablebitmap",3],["option",4,["mutablebitmap"]],["datatype",4]]],[[["bitmap",3],["buffer",3],["datatype",4],["option",4,["bitmap"]]]],[[["option",4,["bitmap"]],["arc",3,["array"]],["bitmap",3],["datatype",4],["vec",3,["arc"]]]],[[["i8",15],["arc",3,["array"]],["vec",3,["arc"]],["option",4,["buffer"]],["buffer",3,["i32"]],["datatype",4],["buffer",3,["i8"]]]],[[["option",4,["mutablebitmap"]],["u8",15],["mutablebuffer",3],["mutablebitmap",3],["datatype",4],["mutablebuffer",3,["u8"]]]],[[["buffer",3],["u8",15],["bitmap",3],["buffer",3,["u8"]],["datatype",4],["option",4,["bitmap"]]]],[[["option",4,["mutablebitmap"]],["u8",15],["mutablebuffer",3],["mutablebitmap",3],["datatype",4],["mutablebuffer",3,["u8"]]]],[[["buffer",3],["u8",15],["bitmap",3],["buffer",3,["u8"]],["datatype",4],["option",4,["bitmap"]]]],[[["isize",15]],["option",4]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["usize",15],["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[]],[[]],[[]],[[]],[[]],[[["trustedlen",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["iterator",8]]],[[]],[[]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["intoiterator",8]]],[[["datatype",4]],["field",3]],[[["datatype",4]],["datatype",4]],[[["array",8]],[["box",3,["fn"]],["fn",8]]],[[["datatype",4]]],[[["datatype",4]]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[["datatype",4]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],[["binaryvalueiter",3],["zipvalidity",3,["binaryvalueiter"]]]],[[],[["bool",15],["bitmapiter",3],["zipvalidity",3,["bool","bitmapiter"]]]],[[],[["bool",15],["bitmapiter",3],["zipvalidity",3,["bool","bitmapiter"]]]],[[],[["zipvalidity",3,["box","dictionaryvaluesiter"]],["box",3,["scalar"]],["dictionaryvaluesiter",3]]],[[],[["zipvalidity",3,["fixedsizebinaryvaluesiter"]],["fixedsizebinaryvaluesiter",3,["mutablefixedsizebinaryarray"]]]],[[],[["zipvalidity",3,["fixedsizebinaryvaluesiter"]],["fixedsizebinaryvaluesiter",3,["fixedsizebinaryarray"]]]],[[],[["box",3,["array"]],["listvaluesiter",3,["fixedsizelistarray"]],["zipvalidity",3,["box","listvaluesiter"]]]],[[],[["box",3,["array"]],["listvaluesiter",3,["listarray"]],["zipvalidity",3,["box","listvaluesiter"]]]],[[],[["iter",3],["zipvalidity",3,["iter"]]]],[[],[["iter",3],["zipvalidity",3,["iter"]]]],[[],["unioniter",3]],[[],[["utf8valuesiter",3],["zipvalidity",3,["str","utf8valuesiter"]],["str",15]]],[[],["primitivearray",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["utf8array",3]]],[[]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]],[["box",3,["array"]],["array",8]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]]],[[["usize",15],["datatype",4]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["str",15],["bool",15]]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["buffer",3]],[[]],[[],["buffer",3]],[[],["option",4]],[[],["mutablebuffer",3]],[[]],[[],["buffer",3]],null,[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["asref",8],["option",4]]],[[["option",4,["bool"]],["bool",15]]],[[["asref",8],["option",4]]],[[["option",4]]],[[["asref",8,["str"]],["str",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["usize",15],["option",4,["bool"]],["bool",15]]],[[["usize",15],["option",4]]],[[["option",4,["mutablebitmap"]],["mutablebitmap",3]]],[[["mutablebuffer",3]]],[[],["usize",15]],[[]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[],["result",6]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]],["result",6]],[[["datatype",4]]],[[["datatype",4]]],[[],["isize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[["intoiterator",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["usize",15],["intoiterator",8]],["result",6]],[[["usize",15],["intoiterator",8]],["result",6]],[[["usize",15],["intoiterator",8]],["result",6]],[[["usize",15],["intoiterator",8],["datatype",4]],["result",6]],[[["usize",15],["intoiterator",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[["option",4]],["result",6]],[[["option",4,["bool"]],["bool",15]],["result",6]],[[["asref",8],["option",4]],["result",6]],[[["option",4]],["result",6]],[[["option",4]],["result",6]],[[["option",4]],["result",6]],[[],[["result",6,["bool"]],["bool",15]]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["buffer",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],[["box",3,["scalar"]],["scalar",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]],[["box",3,["scalar"]],["scalar",8]]],[[["usize",15]],["str",15]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["box",3,["array"]],["array",8]]],[[["usize",15]]],[[["usize",15]],["str",15]],[[]],[[],["buffer",3]],[[]],[[],["mutablebitmap",3]],[[],["bitmap",3]],[[]],[[],["arc",3]],[[],["mutablebuffer",3]],[[],["buffer",3]],[[]],[[],["arc",3]],[[]],[[],["arc",3]],[[],["mutablebuffer",3]],[[],["buffer",3]],[[]],[[],["mutablebuffer",3]],[[]],[[],["buffer",3]],[[],["binaryvalueiter",3]],[[],["bitmapiter",3]],[[],["bitmapiter",3]],[[],["dictionaryvaluesiter",3]],[[],[["listvaluesiter",3,["fixedsizelistarray"]],["fixedsizelistarray",3]]],[[],[["listarray",3],["listvaluesiter",3,["listarray"]]]],[[],["iter",3]],[[],["utf8valuesiter",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["datatype",4]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],[[["bitmap",3],["option",4,["bitmap"]]]],[[["bitmap",3],["option",4,["bitmap"]]],[["box",3,["array"]],["array",8]]],null,null,null,null,null,null,null,null,null,null,[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["arc",3,["array"]],["array",8]]],[[],[["array",8],["arc",3,["array"]]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[],[["box",3,["array"]],["array",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["bool",15]],[["box",3,["growable"]],["growable",8]]],[[["binaryarray",3],["usize",15],["bool",15],["vec",3,["binaryarray"]]]],[[["usize",15],["bool",15],["vec",3,["booleanarray"]],["booleanarray",3]]],[[["usize",15],["fixedsizebinaryarray",3],["bool",15],["vec",3,["fixedsizebinaryarray"]]]],[[["datatype",4]]],[[["usize",15],["bool",15],["primitivearray",3],["vec",3,["primitivearray"]]]],[[["usize",15],["listarray",3],["bool",15],["vec",3,["listarray"]]]],[[["vec",3,["structarray"]],["usize",15],["bool",15],["structarray",3]]],[[["usize",15],["bool",15],["utf8array",3],["vec",3,["utf8array"]]]],[[["usize",15],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["array",8]],[["result",6,["dyncomparator"]],["dyncomparator",6]]],[[],["ordering",4]],[[["f32",15]],["ordering",4]],[[["f64",15]],["ordering",4]],null,null,[[]],[[]],[[["bitmap",3]],["bitmap",3]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],[["bitchunks",3],["bitchunk",8]]],[[]],[[],["bitmap",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["bool",15]]],[[["bitmap",3]]],[[["usize",15]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["mutablebitmap",3]]],[[]],[[["usize",15],["u8",15],["mutablebuffer",3,["u8"]]]],[[]],[[]],[[["usize",15]]],[[]],[[["trustedlen",8]]],[[]],[[["iterator",8]]],[[["usize",15],["u8",15],["mutablebuffer",3,["u8"]]]],[[["asref",8],["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],[["bool",15],["option",4,["bool"]]]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bitmapiter",3]],[[],["bitmapiter",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["bool",15]]],[[["bool",15]]],[[["bitmap",3]],["bitmap",3]],[[["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["bitmap",3]],["bitmap",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["trustedlen",8]],["result",4]],[[],["result",4]],[[["iterator",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["bitmap",3]],["bitmap",3]],null,[[["usize",15]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[],["bitmapiter",3]],[[],["slicesiterator",3]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15],["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["usize",15],["u8",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["bitmapiter",3],["option",4,["bitmapiter"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["bitmap",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["bool",15],["option",4,["bool"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bitchunkiter",3]],[[],["usize",15]],[[["usize",15],["u8",15],["bool",15]],["u8",15]],[[["usize",15],["bool",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["iterator",8],["bitmapiter",3],["option",4,["bitmapiter"]]],[["zipvalidity",3],["iterator",8]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["buffer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["buffer",3]],["bool",15]],[[["intoiterator",8]]],[[["usize",15]]],[[]],[[["trustedlen",8]]],[[["iterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u64",15],["mutablebuffer",3,["u64"]]]],[[]],[[]],[[["mutablebuffer",3]]],[[]],[[]],[[["bytes",3]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["usize",15]]],[[["iterator",8],["trustedlen",8]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["iterator",8]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["buffer",3]],["bool",15]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["trustedlen",8]],["result",4]],[[["trustedlen",8]],["result",4]],[[["iterator",8]],["result",4]],[[["iterator",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["datatype",4]],["bool",15]],[[["array",8]],["usize",15]],[[["array",8]],[["result",6,["box"]],["box",3,["scalar"]]]],[[]],[[["binaryarray",3]],["option",4]],[[["booleanarray",3]],[["bool",15],["option",4,["bool"]]]],[[]],[[["primitivearray",3]],["option",4]],[[["utf8array",3]],[["str",15],["option",4,["str"]]]],[[["array",8]],[["result",6,["box"]],["box",3,["scalar"]]]],[[]],[[["binaryarray",3]],["option",4]],[[["booleanarray",3]],[["bool",15],["option",4,["bool"]]]],[[]],[[["primitivearray",3]],["option",4]],[[["utf8array",3]],[["str",15],["option",4,["str"]]]],[[]],[[]],[[]],[[["array",8]],[["result",6,["box"]],["box",3,["scalar"]]]],[[["primitivearray",3]],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],[[["operator",4],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["primitivearray",3],["operator",4]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3],["operator",4]],[["result",6,["primitivearray"]],["primitivearray",3]]],null,[[]],[[]],[[["datatype",4],["operator",4]],["bool",15]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["operator",4]],[[]],null,[[],["result",6]],[[["operator",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["u64",15]],[[]],[[]],[[],["result",6]],[[["primitivearray",3]],["primitivearray",3]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["usize",15]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["result",6]],[[["primitivearray",3]]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],["primitivearray",3]],null,null,null,null,[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3]],[["primitivearray",3,["i128"]],["result",6,["primitivearray"]]]],[[["primitivearray",3],["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3],["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3,["i64"]]]],[[["primitivearray",3],["primitivearray",3],["datatype",4]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3],["primitivearray",3],["datatype",4]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["primitivearray",3],["primitivearray",3],["datatype",4]],["result",6]],[[["primitivearray",3],["primitivearray",3],["datatype",4]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["datatype",4],["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[["datatype",4],["primitivearray",3]],["primitivearray",3]],[[["datatype",4],["primitivearray",3]],["primitivearray",3]],[[["datatype",4],["primitivearray",3]]],[[["booleanarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["array",8]],["booleanarray",3]],[[["array",8]],["booleanarray",3]],[[["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["booleanarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["booleanarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["binaryarray",3],["datatype",4]],[["binaryarray",3,["i32"]],["result",6,["binaryarray"]]]],[[["binaryarray",3]],[["dictionaryarray",3],["result",6,["dictionaryarray"]]]],[[["binaryarray",3],["datatype",4]],[["i64",15],["binaryarray",3,["i64"]]]],[[["datatype",4],["binaryarray",3]],["primitivearray",3]],[[["booleanarray",3]],[["offset",8],["binaryarray",3]]],[[["booleanarray",3]],["primitivearray",3]],[[["booleanarray",3]],[["utf8array",3],["offset",8]]],[[["datatype",4]],["bool",15]],[[["datatype",4],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["primitivearray",3]],[["primitivearray",3,["i64"]],["i64",15]]],[[["primitivearray",3]],[["i32",15],["primitivearray",3,["i32"]]]],[[["dictionaryarray",3]],[["dictionaryarray",3],["result",6,["dictionaryarray"]]]],[[["dictionaryarray",3],["datatype",4]],[["dictionaryarray",3],["result",6,["dictionaryarray"]]]],[[["dictionaryarray",3]],[["box",3,["array"]],["array",8]]],[[["timeunit",4],["primitivearray",3]],[["utf8array",3],["offset",8]]],[[["datatype",4],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],[["offset",8],["binaryarray",3]]],[[["primitivearray",3],["datatype",4]],["booleanarray",3]],[[["primitivearray",3]],[["dictionaryarray",3],["result",6,["dictionaryarray"]]]],[[["datatype",4],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3]],[["utf8array",3],["offset",8]]],[[["primitivearray",3],["timeunit",4]],[["primitivearray",3,["i64"]],["i64",15]]],[[["primitivearray",3]],[["i32",15],["primitivearray",3,["i32"]]]],[[["primitivearray",3]],[["i32",15],["primitivearray",3,["i32"]]]],[[["timeunit",4],["primitivearray",3]],[["i32",15],["primitivearray",3,["i32"]]]],[[["primitivearray",3]],[["primitivearray",3,["i64"]],["i64",15]]],[[["primitivearray",3]],[["primitivearray",3,["i64"]],["i64",15]]],[[["timeunit",4],["primitivearray",3]],[["i32",15],["primitivearray",3,["i32"]]]],[[["timeunit",4],["primitivearray",3]],[["primitivearray",3,["i64"]],["i64",15]]],[[["timeunit",4],["option",4],["primitivearray",3]],[["primitivearray",3,["i64"]],["i64",15]]],[[["timeunit",4],["str",15],["primitivearray",3]],[["result",6,["utf8array"]],["utf8array",3]]],[[["utf8array",3]],[["utf8array",3,["i32"]],["result",6,["utf8array"]]]],[[["utf8array",3]],[["i32",15],["primitivearray",3,["i32"]]]],[[["utf8array",3]],[["primitivearray",3,["i64"]],["i64",15]]],[[["utf8array",3]],[["dictionaryarray",3],["result",6,["dictionaryarray"]]]],[[["utf8array",3]],[["utf8array",3,["i64"]],["i64",15]]],[[["utf8array",3]],[["primitivearray",3,["i64"]],["i64",15]]],[[["utf8array",3],["datatype",4]],["primitivearray",3]],[[["utf8array",3],["string",3]],[["result",6,["primitivearray"]],["primitivearray",3,["i64"]]]],[[["datatype",4],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["dictionaryarray",3]],[["dictionaryarray",3],["result",6,["dictionaryarray"]]]],[[["dictionaryarray",3],["datatype",4]],[["dictionaryarray",3],["result",6,["dictionaryarray"]]]],null,null,null,null,null,null,null,null,null,null,[[["binaryarray",3],["operator",4]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["operator",4],["binaryarray",3],["binaryscalar",3]],["booleanarray",3]],[[["booleanarray",3],["operator",4]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["operator",4],["booleanarray",3],["booleanscalar",3]],["booleanarray",3]],[[]],[[]],[[["datatype",4]],["bool",15]],[[],["operator",4]],[[]],[[["operator",4],["array",8]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["scalar",8],["operator",4],["array",8]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[],["u8",15]],[[["operator",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["primitivearray",3],["operator",4]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["primitivearray",3],["operator",4],["primitivescalar",3]],["booleanarray",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["utf8array",3],["operator",4]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["utf8array",3],["utf8scalar",3],["operator",4]],["booleanarray",3]],[[],[["result",6,["box"]],["box",3,["array"]]]],[[["array",8]],[["result",6,["booleanarray"]],["booleanarray",3]]],null,[[["booleanarray",3]],[["result",6,["filter"]],["filter",6]]],[[["booleanarray",3],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["recordbatch",3],["booleanarray",3]],[["result",6,["recordbatch"]],["recordbatch",3]]],[[["datatype",4]],["bool",15]],[[["array",8]],[["primitivearray",3,["u64"]],["result",6,["primitivearray"]]]],[[["binaryarray",3]],[["u64",15],["primitivearray",3,["u64"]]]],[[["booleanarray",3]],[["u64",15],["primitivearray",3,["u64"]]]],[[["primitivearray",3]],[["u64",15],["primitivearray",3,["u64"]]]],[[["utf8array",3]],[["u64",15],["primitivearray",3,["u64"]]]],[[["booleanarray",3],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["datatype",4]],["bool",15]],[[["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["binaryarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["binaryarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["utf8array",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["utf8array",3],["str",15]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["binaryarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["binaryarray",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["utf8array",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["utf8array",3],["str",15]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["usize",15],["array",8]],[["box",3,["array"]],["array",8]]],null,null,[[]],[[]],[[],[["box",3,["fn"]],["result",6,["box"]]]],[[]],[[]],[[]],[[["usize",15],["sortoptions",3],["option",4,["usize"]],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["iterator",8],["box",3]],[["mergesortslices",3],["iterator",8]]],[[],["option",4]],[[],[["result",6,["vec"]],["vec",3,["mergeslice"]]]],[[["usize",15],["option",4,["usize"]],["intoiterator",8]],[["box",3,["array"]],["array",8]]],[[["usize",15],["option",4,["usize"]]],[["vec",3,["mergeslice"]],["mergeslice",6]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["datatype",4]],["bool",15]],[[["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["primitivearray",3]],[["result",6,["primitivearray"]],["primitivearray",3]]],[[],["result",6]],[[["utf8array",3]],[["result",6,["booleanarray"]],["booleanarray",3]]],[[["utf8array",3],["str",15]],[["result",6,["booleanarray"]],["booleanarray",3]]],null,null,[[]],[[]],[[]],[[]],[[["datatype",4]],["bool",15]],[[],["sortcolumn",3]],[[],["sortoptions",3]],[[]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15],["option",4,["usize"]]],[["result",6,["vec"]],["vec",3,["box"]]]],[[["usize",15],["option",4,["usize"]]],[["primitivearray",3],["result",6,["primitivearray"]]]],null,null,[[["usize",15],["sortoptions",3],["option",4,["usize"]],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["usize",15],["sortoptions",3],["option",4,["usize"]],["array",8]],[["primitivearray",3],["result",6,["primitivearray"]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["datatype",4]],["bool",15]],[[["i64",15],["option",4],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["datatype",4]],["bool",15]],[[["primitivearray",3],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],[[["datatype",4]],["bool",15]],[[["datatype",4]],["bool",15]],[[["array",8]],[["primitivearray",3,["u32"]],["result",6,["primitivearray"]]]],[[["array",8]],[["result",6,["primitivearray"]],["primitivearray",3,["i32"]]]],[[["i64",15],["array",8]],[["result",6,["box"]],["box",3,["array"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["field",3]],[[],["dictionaryindextype",4]],[[],["primitivetype",4]],[[],["physicaltype",4]],[[],["schema",3]],[[],["datatype",4]],[[],["timeunit",4]],[[],["intervalunit",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["option",4]],[[],["datatype",4]],null,[[],[["option",4,["i64"]],["i64",15]]],null,[[],[["bool",15],["option",4,["bool"]]]],null,[[]],[[["field",3]],["bool",15]],[[["dictionaryindextype",4]],["bool",15]],[[["primitivetype",4]],["bool",15]],[[["physicaltype",4]],["bool",15]],[[["schema",3]],["bool",15]],[[["datatype",4]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["intervalunit",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["field",3]],[[["str",15]],[["result",6,["field"]],["field",3]]],[[],["vec",3]],[[["i64",15]],[["vec",3,["field"]],["field",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["field",3]],["field",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["usize",15],["result",6,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4]],[[],["hashmap",3]],null,[[],["string",3]],null,[[["field",3]],["bool",15]],[[["physicaltype",4]],["bool",15]],[[["schema",3]],["bool",15]],[[["datatype",4]],["bool",15]],[[["str",15],["datatype",4],["bool",15]]],[[["vec",3,["field"]],["field",3]]],[[["bool",15],["str",15],["datatype",4],["i64",15]]],[[["string",3],["field",3],["hashmap",3,["string","string"]],["vec",3,["field"]]]],null,[[["option",4,["btreemap"]],["btreemap",3,["string","string"]]]],[[],["datatype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["physicaltype",4]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["value",4]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["value",4]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["field",3]],["result",6]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["string",3],["btreemap",3,["string","string"]]]],[[["string",3],["hashmap",3,["string","string"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["parqueterror",4]]],[[["csverror",3]]],[[["error",3]]],[[]],[[["error",3]]],[[["parseerror",3]]],[[["utf8error",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["ffi_arrowarray",3]],[[]],[[]],[[]],[[]],[[]],[[["array",8],["arc",3,["array"]]]],[[["field",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["ffi_arrowarray",3],["box",3,["ffi_arrowarray"]],["field",3]],[["result",6,["box"]],["box",3,["array"]]]],[[["ffi_arrowschema",3]],[["result",6,["field"]],["field",3]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["error",3]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[["error",3]],["error",3]],[[]],[[],["errorkind",4]],[[],["bool",15]],[[],["errorkind",4]],[[],[["option",4,["position"]],["position",3]]],null,[[],[["error",8],["option",4,["error"]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[],["readerbuilder",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["readerbuilder",3]],[[],[["error",3],["byterecord",3],["result",4,["byterecord","error"]]]],[[],["byterecordsiter",3]],[[["option",4,["u8"]],["u8",15]],["readerbuilder",3]],[[],["readerbuilder",3]],[[["u8",15]],["readerbuilder",3]],[[],["deserializerecordsiter",3]],[[["usize",15],["option",4]],[["result",6,["recordbatch"]],["recordbatch",3]]],[[["usize",15],["datatype",4]],[["arc",3,["array"]],["result",6,["arc"]]]],[[["bool",15]],["readerbuilder",3]],[[["option",4,["u8"]],["u8",15]],["readerbuilder",3]],[[["bool",15]],["readerbuilder",3]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],[["result",4,["reader","error"]],["reader",3,["file"]],["error",3]]],[[],[["result",4,["reader","error"]],["reader",3,["file"]],["error",3]]],[[],["reader",3]],[[],["reader",3]],[[]],[[]],[[["bool",15]],["readerbuilder",3]],[[],["bool",15]],[[],[["error",3],["result",4,["stringrecord","error"]],["stringrecord",3]]],[[["str",15]],["datatype",4]],[[["reader",3],["usize",15],["bool",15],["option",4,["usize"]]],[["schema",3],["result",6,["schema"]]]],[[]],[[]],[[],["byterecordsintoiter",3]],[[],["deserializerecordsintoiter",3]],[[]],[[],["stringrecordsintoiter",3]],[[],["bool",15]],[[],["readerbuilder",3]],[[],["position",3]],[[["schema",3],["option",4]],["schema",3]],[[["u8",15]],["readerbuilder",3]],[[["bool",15]],["readerbuilder",3]],[[["byterecord",3]],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[["stringrecord",3]],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[["reader",3],["usize",15]],[["usize",15],["result",6,["usize"]]]],[[],["stringrecordsiter",3]],[[["position",3]],[["result",4,["error"]],["error",3]]],[[["seekfrom",4],["position",3]],[["result",4,["error"]],["error",3]]],[[["byterecord",3]]],[[["stringrecord",3]]],[[["terminator",4]],["readerbuilder",3]],[[["trim",4]],["readerbuilder",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["writerbuilder",3]],[[]],[[],["serializeoptions",3]],[[],["byterecord",3]],[[]],[[]],null,[[]],[[],["byterecord",3]],[[],["writerbuilder",3]],[[["u8",15]],["writerbuilder",3]],[[["option",4,["byterecord"]],["byterecord",3]],[["result",4,["error"]],["error",3]]],[[["bool",15]],["writerbuilder",3]],[[]],[[["serializeoptions",3]],["bool",15]],[[["byterecord",3]],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u8",15]],["writerbuilder",3]],[[]],[[["bool",15]],["writerbuilder",3]],[[],[["error",3],["result",4,["error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[],["byterecord",3]],[[]],[[["stringrecord",3]],["byterecord",3]],[[["vec",3,["global"]],["global",3]],["byterecord",3]],[[]],[[]],[[],["byterecord",3]],[[],[["result",4,["writer","error"]],["writer",3,["file"]],["error",3]]],[[],[["result",4,["writer","error"]],["writer",3,["file"]],["error",3]]],[[],["writer",3]],[[],["writer",3]],[[["usize",15]],["option",4]],[[],["u64",15]],[[["bool",15]],["writerbuilder",3]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],[["result",4,["intoinnererror"]],["intoinnererror",3,["writer"]]]],[[],["bool",15]],[[],["byterecorditer",3]],[[],["usize",15]],[[["serializeoptions",3]],["bool",15]],[[],["byterecord",3]],[[],["writerbuilder",3]],[[["serializeoptions",3],["array",8]],[["box",3,["streamingiterator"]],["result",6,["box"]]]],[[],[["option",4,["position"]],["position",3]]],[[]],[[["u8",15]],["writerbuilder",3]],[[["quotestyle",4]],["writerbuilder",3]],[[["usize",15]],[["option",4,["range"]],["range",3,["usize"]]]],[[["serializeoptions",3],["recordbatch",3]],[["vec",3,["byterecord"]],["result",6,["vec"]]]],[[],[["result",4,["error"]],["error",3]]],[[["option",4,["position"]],["position",3]]],[[["terminator",4]],["writerbuilder",3]],null,null,[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["byterecord",3]],[[["serializeoptions",3],["writer",3],["recordbatch",3]],["result",6]],[[["byterecord",3]],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["schema",3],["writer",3]],["result",6]],[[],[["result",4,["error"]],["error",3]]],[[["schema",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["vector",3,["block"]],["wipoffset",3,["vector"]]]],[[["vector",3,["block"]],["wipoffset",3,["vector"]]]],[[["schema",3],["wipoffset",3,["schema"]]]],[[["metadataversion",3]]],[[],["i64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["block",3]],[[],["footer",3]],[[]],[[]],[[["flatbufferbuilder",3],["footerargs",3]],[["footer",3],["wipoffset",3,["footer"]]]],[[],[["vector",3,["forwardsuoffset"]],["option",4,["vector"]]]],null,[[]],[[],["option",4]],null,[[["block",3]],["bool",15]],[[["footer",3]],["bool",15]],[[],[["footer",3],["wipoffset",3,["footer"]]]],[[["footer",3],["wipoffset",3,["footer"]],["flatbufferbuilder",3]]],[[["footer",3],["wipoffset",3,["footer"]],["flatbufferbuilder",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["footer",3]],[[],["footer",3]],[[["table",3]]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[["block",3]],["bool",15]],[[["footer",3]],["bool",15]],[[["flatbufferbuilder",3]],["footerbuilder",3]],[[["i32",15],["i64",15]]],[[],["i64",15]],[[]],[[],["option",4]],null,[[],[["footer",3],["invalidflatbuffer",4],["result",4,["footer","invalidflatbuffer"]]]],[[],["footer",3]],[[["verifieroptions",3]],[["result",4,["footer","invalidflatbuffer"]],["footer",3],["invalidflatbuffer",4]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[],[["option",4,["schema"]],["schema",3]]],null,[[["i64",15]]],[[["i32",15]]],[[["i64",15]]],[[],[["footer",3],["invalidflatbuffer",4],["result",4,["footer","invalidflatbuffer"]]]],[[],["footer",3]],[[["verifieroptions",3]],[["result",4,["footer","invalidflatbuffer"]],["footer",3],["invalidflatbuffer",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["metadataversion",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i64",15]]],[[["vector",3,["buffer"]],["wipoffset",3,["vector"]]]],[[["compressiontype",3]]],[[["bodycompression",3],["wipoffset",3,["bodycompression"]]]],[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["recordbatch",3],["wipoffset",3,["recordbatch"]]]],[[["unionwipoffset",3],["wipoffset",3,["unionwipoffset"]]]],[[["messageheader",3]]],[[["i64",15]]],[[["bool",15]]],[[["i64",15]]],[[["bodycompressionmethod",3]]],[[["vector",3,["fieldnode"]],["wipoffset",3,["vector"]]]],[[["metadataversion",3]]],[[],["i64",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],null,[[],["compressiontype",3]],[[],["bodycompressionmethod",3]],[[],["messageheader",3]],[[],["fieldnode",3]],[[],["bodycompression",3]],[[],["recordbatch",3]],[[],["dictionarybatch",3]],[[],["message",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compressiontype",3]],["ordering",4]],[[["bodycompressionmethod",3]],["ordering",4]],[[["messageheader",3]],["ordering",4]],[[],["compressiontype",3]],null,[[],[["bodycompression",3],["option",4,["bodycompression"]]]],null,[[["flatbufferbuilder",3],["bodycompressionargs",3]],[["bodycompression",3],["wipoffset",3,["bodycompression"]]]],[[["flatbufferbuilder",3],["recordbatchargs",3]],[["wipoffset",3,["recordbatch"]],["recordbatch",3]]],[[["flatbufferbuilder",3],["dictionarybatchargs",3]],[["dictionarybatch",3],["wipoffset",3,["dictionarybatch"]]]],[[["flatbufferbuilder",3],["messageargs",3]],[["message",3],["wipoffset",3,["message"]]]],[[],[["vector",3,["forwardsuoffset"]],["option",4,["vector"]]]],null,[[],[["recordbatch",3],["option",4,["recordbatch"]]]],null,[[]],[[]],[[]],[[]],[[["compressiontype",3]],["bool",15]],[[["bodycompressionmethod",3]],["bool",15]],[[["messageheader",3]],["bool",15]],[[["fieldnode",3]],["bool",15]],[[["bodycompression",3]],["bool",15]],[[["recordbatch",3]],["bool",15]],[[["dictionarybatch",3]],["bool",15]],[[["message",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["wipoffset",3,["bodycompression"]],["bodycompression",3]]],[[],[["recordbatch",3],["wipoffset",3,["recordbatch"]]]],[[],[["dictionarybatch",3],["wipoffset",3,["dictionarybatch"]]]],[[],[["wipoffset",3,["message"]],["message",3]]],[[["wipoffset",3,["message"]],["message",3],["flatbufferbuilder",3]]],[[["wipoffset",3,["message"]],["message",3],["flatbufferbuilder",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["message",3]],[[],["message",3]],[[]],[[]],[[]],[[],[["table",3],["option",4,["table"]]]],null,[[],[["dictionarybatch",3],["option",4,["dictionarybatch"]]]],[[],[["recordbatch",3],["option",4,["recordbatch"]]]],[[],[["option",4,["schema"]],["schema",3]]],[[],[["sparsetensor",3],["option",4,["sparsetensor"]]]],[[],[["tensor",3],["option",4,["tensor"]]]],[[],["messageheader",3]],null,[[],["i64",15]],null,[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[],["i64",15]],[[],["i64",15]],null,[[],["bodycompressionmethod",3]],null,[[["compressiontype",3]],["bool",15]],[[["bodycompressionmethod",3]],["bool",15]],[[["messageheader",3]],["bool",15]],[[["fieldnode",3]],["bool",15]],[[["bodycompression",3]],["bool",15]],[[["recordbatch",3]],["bool",15]],[[["dictionarybatch",3]],["bool",15]],[[["message",3]],["bool",15]],[[["flatbufferbuilder",3]],["bodycompressionbuilder",3]],[[["flatbufferbuilder",3]],["recordbatchbuilder",3]],[[["flatbufferbuilder",3]],["dictionarybatchbuilder",3]],[[["flatbufferbuilder",3]],["messagebuilder",3]],[[["i64",15]]],[[],["option",4]],null,[[],["i64",15]],[[["compressiontype",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bodycompressionmethod",3]],[["option",4,["ordering"]],["ordering",4]]],[[["messageheader",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[],[["message",3],["invalidflatbuffer",4],["result",4,["message","invalidflatbuffer"]]]],[[],["message",3]],[[["verifieroptions",3]],[["invalidflatbuffer",4],["result",4,["message","invalidflatbuffer"]],["message",3]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["i64",15]]],[[["i64",15]]],[[],[["message",3],["invalidflatbuffer",4],["result",4,["message","invalidflatbuffer"]]]],[[],["message",3]],[[["verifieroptions",3]],[["invalidflatbuffer",4],["result",4,["message","invalidflatbuffer"]],["message",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],["metadataversion",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["dictionaryencoding",3],["wipoffset",3,["dictionaryencoding"]]]],[[["dictionarykind",3]]],[[["endianness",3]]],[[["vector",3,["feature"]],["wipoffset",3,["vector"]]]],[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["i64",15]]],[[["wipoffset",3,["int"]],["int",3]]],[[["bool",15]]],[[["bool",15]]],[[["wipoffset",3,["str"]],["str",15]]],[[["bool",15]]],[[["i32",15]]],[[["unionmode",3]]],[[["wipoffset",3,["str"]],["str",15]]],[[["bool",15]]],[[["precision",3]]],[[["i32",15]]],[[["i32",15]]],[[["wipoffset",3,["str"]],["str",15]]],[[["vector",3,["i32"]],["wipoffset",3,["vector"]]]],[[["unionwipoffset",3],["wipoffset",3,["unionwipoffset"]]]],[[["type",3]]],[[["dateunit",3]]],[[["timeunit",3]]],[[["timeunit",3]]],[[["intervalunit",3]]],[[["timeunit",3]]],[[["wipoffset",3,["str"]],["str",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,null,nulli32",15]],null,[[],[["option",4,["vector"]],["vector",3,["forwardsuoffset"]]]],null,[[],["metadataversion",3]],[[],["feature",3]],[[],["unionmode",3]],[[],["precision",3]],[[],["dateunit",3]],[[],["timeunit",3]],[[],["intervalunit",3]],[[],["type",3]],[[],["dictionarykind",3]],[[],["endianness",3]],[[],["buffer",3]],[[],["null",3]],[[],["struct_",3]],[[],["list",3]],[[],["largelist",3]],[[],["fixedsizelist",3]],[[],["map",3]],[[],["union",3]],[[],["int",3]],[[],["floatingpoint",3]],[[],["utf8",3]],[[],["binary",3]],[[],["largeutf8",3]],[[],["largebinary",3]],[[],["fixedsizebinary",3]],[[],["bool",3]],[[],["decimal",3]],[[],["date",3]],[[],["time",3]],[[],["timestamp",3]],[[],["interval",3]],[[],["duration",3]],[[],["keyvalue",3]],[[],["dictionaryencoding",3]],[[],["field",3]],[[],["schema",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["metadataversion",3]],["ordering",4]],[[["feature",3]],["ordering",4]],[[["unionmode",3]],["ordering",4]],[[["precision",3]],["ordering",4]],[[["dateunit",3]],["ordering",4]],[[["timeunit",3]],["ordering",4]],[[["intervalunit",3]],["ordering",4]],[[["type",3]],["ordering",4]],[[["dictionarykind",3]],["ordering",4]],[[["endianness",3]],["ordering",4]],[[["flatbufferbuilder",3],["nullargs",3]],[["null",3],["wipoffset",3,["null"]]]],[[["flatbufferbuilder",3],["struct_args",3]],[["struct_",3],["wipoffset",3,["struct_"]]]],[[["flatbufferbuilder",3],["listargs",3]],[["list",3],["wipoffset",3,["list"]]]],[[["flatbufferbuilder",3],["largelistargs",3]],[["wipoffset",3,["largelist"]],["largelist",3]]],[[["flatbufferbuilder",3],["fixedsizelistargs",3]],[["wipoffset",3,["fixedsizelist"]],["fixedsizelist",3]]],[[["flatbufferbuilder",3],["mapargs",3]],[["wipoffset",3,["map"]],["map",3]]],[[["flatbufferbuilder",3],["unionargs",3]],[["union",3],["wipoffset",3,["union"]]]],[[["flatbufferbuilder",3],["intargs",3]],[["wipoffset",3,["int"]],["int",3]]],[[["flatbufferbuilder",3],["floatingpointargs",3]],[["wipoffset",3,["floatingpoint"]],["floatingpoint",3]]],[[["flatbufferbuilder",3],["utf8args",3]],[["utf8",3],["wipoffset",3,["utf8"]]]],[[["flatbufferbuilder",3],["binaryargs",3]],[["wipoffset",3,["binary"]],["binary",3]]],[[["flatbufferbuilder",3],["largeutf8args",3]],[["wipoffset",3,["largeutf8"]],["largeutf8",3]]],[[["flatbufferbuilder",3],["largebinaryargs",3]],[["largebinary",3],["wipoffset",3,["largebinary"]]]],[[["flatbufferbuilder",3],["fixedsizebinaryargs",3]],[["wipoffset",3,["fixedsizebinary"]],["fixedsizebinary",3]]],[[["flatbufferbuilder",3],["boolargs",3]],[["bool",3],["wipoffset",3,["bool"]]]],[[["flatbufferbuilder",3],["decimalargs",3]],[["wipoffset",3,["decimal"]],["decimal",3]]],[[["flatbufferbuilder",3],["dateargs",3]],[["date",3],["wipoffset",3,["date"]]]],[[["flatbufferbuilder",3],["timeargs",3]],[["wipoffset",3,["time"]],["time",3]]],[[["flatbufferbuilder",3],["timestampargs",3]],[["wipoffset",3,["timestamp"]],["timestamp",3]]],[[["flatbufferbuilder",3],["intervalargs",3]],[["interval",3],["wipoffset",3,["interval"]]]],[[["flatbufferbuilder",3],["durationargs",3]],[["duration",3],["wipoffset",3,["duration"]]]],[[["flatbufferbuilder",3],["keyvalueargs",3]],[["keyvalue",3],["wipoffset",3,["keyvalue"]]]],[[["flatbufferbuilder",3],["dictionaryencodingargs",3]],[["dictionaryencoding",3],["wipoffset",3,["dictionaryencoding"]]]],[[["flatbufferbuilder",3],["fieldargs",3]],[["wipoffset",3,["field"]],["field",3]]],[[["flatbufferbuilder",3],["schemaargs",3]],[["schema",3],["wipoffset",3,["schema"]]]],[[],[["vector",3,["forwardsuoffset"]],["option",4,["vector"]]]],[[],[["vector",3,["forwardsuoffset"]],["option",4,["vector"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["metadataversion",3]],[[],["feature",3]],[[],["unionmode",3]],[[],["precision",3]],[[],["dateunit",3]],[[],["timeunit",3]],[[],["intervalunit",3]],[[],["type",3]],[[],["dictionarykind",3]],[[],["endianness",3]],[[]],[[],[["dictionaryencoding",3],["option",4,["dictionaryencoding"]]]],null,[[],["dictionarykind",3]],null,[[],["endianness",3]],null,[[["metadataversion",3]],["bool",15]],[[["feature",3]],["bool",15]],[[["unionmode",3]],["bool",15]],[[["precision",3]],["bool",15]],[[["dateunit",3]],["bool",15]],[[["timeunit",3]],["bool",15]],[[["intervalunit",3]],["bool",15]],[[["type",3]],["bool",15]],[[["dictionarykind",3]],["bool",15]],[[["endianness",3]],["bool",15]],[[["buffer",3]],["bool",15]],[[["null",3]],["bool",15]],[[["struct_",3]],["bool",15]],[[["list",3]],["bool",15]],[[["largelist",3]],["bool",15]],[[["fixedsizelist",3]],["bool",15]],[[["map",3]],["bool",15]],[[["union",3]],["bool",15]],[[["int",3]],["bool",15]],[[["floatingpoint",3]],["bool",15]],[[["utf8",3]],["bool",15]],[[["binary",3]],["bool",15]],[[["largeutf8",3]],["bool",15]],[[["largebinary",3]],["bool",15]],[[["fixedsizebinary",3]],["bool",15]],[[["bool",3]],["bool",15]],[[["decimal",3]],["bool",15]],[[["date",3]],["bool",15]],[[["time",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["interval",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["keyvalue",3]],["bool",15]],[[["dictionaryencoding",3]],["bool",15]],[[["field",3]],["bool",15]],[[["schema",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["vector",3,["feature"]],["option",4,["vector"]]]],null,[[],[["option",4,["vector"]],["vector",3,["forwardsuoffset"]]]],null,[[],[["wipoffset",3,["null"]],["null",3]]],[[],[["wipoffset",3,["struct_"]],["struct_",3]]],[[],[["list",3],["wipoffset",3,["list"]]]],[[],[["wipoffset",3,["largelist"]],["largelist",3]]],[[],[["fixedsizelist",3],["wipoffset",3,["fixedsizelist"]]]],[[],[["wipoffset",3,["map"]],["map",3]]],[[],[["union",3],["wipoffset",3,["union"]]]],[[],[["int",3],["wipoffset",3,["int"]]]],[[],[["wipoffset",3,["floatingpoint"]],["floatingpoint",3]]],[[],[["utf8",3],["wipoffset",3,["utf8"]]]],[[],[["binary",3],["wipoffset",3,["binary"]]]],[[],[["largeutf8",3],["wipoffset",3,["largeutf8"]]]],[[],[["largebinary",3],["wipoffset",3,["largebinary"]]]],[[],[["fixedsizebinary",3],["wipoffset",3,["fixedsizebinary"]]]],[[],[["wipoffset",3,["bool"]],["bool",3]]],[[],[["decimal",3],["wipoffset",3,["decimal"]]]],[[],[["wipoffset",3,["date"]],["date",3]]],[[],[["time",3],["wipoffset",3,["time"]]]],[[],[["wipoffset",3,["timestamp"]],["timestamp",3]]],[[],[["interval",3],["wipoffset",3,["interval"]]]],[[],[["duration",3],["wipoffset",3,["duration"]]]],[[],[["wipoffset",3,["keyvalue"]],["keyvalue",3]]],[[],[["dictionaryencoding",3],["wipoffset",3,["dictionaryencoding"]]]],[[],[["wipoffset",3,["field"]],["field",3]]],[[],[["wipoffset",3,["schema"]],["schema",3]]],[[["wipoffset",3,["schema"]],["schema",3],["flatbufferbuilder",3]]],[[["wipoffset",3,["schema"]],["schema",3],["flatbufferbuilder",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usizeu64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["schema",3]],[[],["schema",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i64",15]],null,[[],[["int",3],["option",4,["int"]]]],null,[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["tablebool",15]],null,[[],["bool",15]],null,[[],[["str",15],["option",4,["str"]]]],null,[[],["bool",15]],null,[[],["i64",15]],[[],["i32",15]],null,[[],["unionmode",3]],null,[[],[["str",15],["option",4,["str"]]]],null,[[["metadataversion",3]],["bool",15]],[[["feature",3]],["bool",15]],[[["unionmode",3]],["bool",15]],[[["precision",3]],["bool",15]],[[["dateunit",3]],["bool",15]],[[["timeunit",3]],["bool",15]],[[["intervalunit",3]],["bool",15]],[[["type",3]],["bool",15]],[[["dictionarykind",3]],["bool",15]],[[["endianness",3]],["bool",15]],[[["buffer",3]],["bool",15]],[[["null",3]],["bool",15]],[[["struct_",3]],["bool",15]],[[["list",3]],["bool",15]],[[["largelist",3]],["bool",15]],[[["fixedsizelist",3]],["bool",15]],[[["map",3]],["bool",15]],[[["union",3]],["bool",15]],[[["int",3]],["bool",15]],[[["floatingpoint",3]],["bool",15]],[[["utf8",3]],["bool",15]],[[["binary",3]],["bool",15]],[[["largeutf8",3]],["bool",15]],[[["largebinary",3]],["bool",15]],[[["fixedsizebinary",3]],["bool",15]],[[["bool",3]],["bool",15]],[[["decimal",3]],["bool",15]],[[["date",3]],["bool",15]],[[["time",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["interval",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["keyvalue",3]],["bool",15]],[[["dictionaryencoding",3]],["bool",15]],[[["field",3]],["bool",15]],[[["schema",3]],["bool",15]],[[["flatbufferbuilder",3]],["nullbuilder",3]],[[["flatbufferbuilder",3]],["struct_builder",3]],[[["flatbufferbuilder",3]],["listbuilder",3]],[[["flatbufferbuilder",3]],["largelistbuilder",3]],[[["flatbufferbuilder",3]],["fixedsizelistbuilder",3]],[[["flatbufferbuilder",3]],["mapbuilder",3]],[[["flatbufferbuilder",3]],["unionbuilder",3]],[[["flatbufferbuilder",3]],["intbuilder",3]],[[["flatbufferbuilder",3]],["floatingpointbuilder",3]],[[["flatbufferbuilder",3]],["utf8builder",3]],[[["flatbufferbuilder",3]],["binarybuilder",3]],[[["flatbufferbuilder",3]],["largeutf8builder",3]],[[["flatbufferbuilder",3]],["largebinarybuilder",3]],[[["flatbufferbuilder",3]],["fixedsizebinarybuilder",3]],[[["flatbufferbuilder",3]],["boolbuilder",3]],[[["flatbufferbuilder",3]],["decimalbuilder",3]],[[["flatbufferbuilder",3]],["datebuilder",3]],[[["flatbufferbuilder",3]],["timebuilder",3]],[[["flatbufferbuilder",3]],["timestampbuilder",3]],[[["flatbufferbuilder",3]],["intervalbuilder",3]],[[["flatbufferbuilder",3]],["durationbuilder",3]],[[["flatbufferbuilder",3]],["keyvaluebuilder",3]],[[["flatbufferbuilder",3]],["dictionaryencodingbuilder",3]],[[["flatbufferbuilder",3]],["fieldbuilder",3]],[[["flatbufferbuilder",3]],["schemabuilder",3]],[[["i64",15]]],[[],["bool",15]],null,[[],["i64",15]],[[["metadataversion",3]],[["option",4,["ordering"]],["ordering",4]]],[[["feature",3]],[["option",4,["ordering"]],["ordering",4]]],[[["unionmode",3]],[["option",4,["ordering"]],["ordering",4]]],[[["precision",3]],[["option",4,["ordering"]],["ordering",4]]],[[["dateunit",3]],[["option",4,["ordering"]],["ordering",4]]],[[["timeunit",3]],[["option",4,["ordering"]],["ordering",4]]],[[["intervalunit",3]],[["option",4,["ordering"]],["ordering",4]]],[[["type",3]],[["option",4,["ordering"]],["ordering",4]]],[[["dictionarykind",3]],[["option",4,["ordering"]],["ordering",4]]],[[["endianness",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["precision",3]],[[],["i32",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["schema","invalidflatbuffer"]],["invalidflatbuffer",4],["schema",3]]],[[],["schema",3]],[[["verifieroptions",3]],[["schema",3],["invalidflatbuffer",4],["result",4,["schema","invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[],["i32",15]],null,[[["i64",15]]],[[["i64",15]]],[[],[["result",4,["schema","invalidflatbuffer"]],["invalidflatbuffer",4],["schema",3]]],[[],["schema",3]],[[["verifieroptions",3]],[["schema",3],["invalidflatbuffer",4],["result",4,["schema","invalidflatbuffer"]]]],[[],[["str",15],["option",4,["str"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vector",3,["i32"]],["option",4,["vector"]]]],null,[[],[["table",3],["option",4,["table"]]]],null,[[],[["binary",3],["option",4,["binary"]]]],[[],[["option",4,["bool"]],["bool",3]]],[[],[["date",3],["option",4,["date"]]]],[[],[["decimal",3],["option",4,["decimal"]]]],[[],[["duration",3],["option",4,["duration"]]]],[[],[["fixedsizebinary",3],["option",4,["fixedsizebinary"]]]],[[],[["option",4,["fixedsizelist"]],["fixedsizelist",3]]],[[],[["option",4,["floatingpoint"]],["floatingpoint",3]]],[[],[["int",3],["option",4,["int"]]]],[[],[["option",4,["interval"]],["interval",3]]],[[],[["option",4,["largebinary"]],["largebinary",3]]],[[],[["option",4,["largelist"]],["largelist",3]]],[[],[["largeutf8",3],["option",4,["largeutf8"]]]],[[],[["list",3],["option",4,["list"]]]],[[],[["option",4,["map"]],["map",3]]],[[],[["option",4,["null"]],["null",3]]],[[],[["option",4,["struct_"]],["struct_",3]]],[[],[["option",4,["time"]],["time",3]]],[[],[["timestamp",3],["option",4,["timestamp"]]]],[[],[["option",4,["union"]],["union",3]]],[[],[["utf8",3],["option",4,["utf8"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["type",3]],null,[[],["dateunit",3]],[[],["timeunit",3]],[[],["timeunit",3]],[[],["intervalunit",3]],[[],["timeunit",3]],null,null,null,null,null,[[],[["str",15],["option",4,["str"]]]],null,[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vector",3,["i32"]],["wipoffset",3,["vector"]]]],[[["sparsematrixcompressedaxis",3]]],[[["buffer",3]]],[[["buffer",3]]],[[["buffer",3]]],[[["vector",3,["buffer"]],["wipoffset",3,["vector"]]]],[[["vector",3,["i64"]],["wipoffset",3,["vector"]]]],[[["wipoffset",3,["int"]],["int",3]]],[[["wipoffset",3,["int"]],["int",3]]],[[["wipoffset",3,["int"]],["int",3]]],[[["buffer",3]]],[[["vector",3,["buffer"]],["wipoffset",3,["vector"]]]],[[["wipoffset",3,["int"]],["int",3]]],[[["wipoffset",3,["int"]],["int",3]]],[[["bool",15]]],[[["i64",15]]],[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["unionwipoffset",3],["wipoffset",3,["unionwipoffset"]]]],[[["sparsetensorindex",3]]],[[["unionwipoffset",3],["wipoffset",3,["unionwipoffset"]]]],[[["type",3]]],[[],[["vector",3,["i32"]],["i32",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sparsematrixcompressedaxis",3]],[[],["sparsetensorindex",3]],[[],["sparsetensorindexcoo",3]],[[],["sparsematrixindexcsx",3]],[[],["sparsetensorindexcsf",3]],[[],["sparsetensor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sparsematrixcompressedaxis",3]],["ordering",4]],[[["sparsetensorindex",3]],["ordering",4]],[[],["sparsematrixcompressedaxis",3]],null,[[["flatbufferbuilder",3],["sparsetensorindexcooargs",3]],[["wipoffset",3,["sparsetensorindexcoo"]],["sparsetensorindexcoo",3]]],[[["flatbufferbuilder",3],["sparsematrixindexcsxargs",3]],[["wipoffset",3,["sparsematrixindexcsx"]],["sparsematrixindexcsx",3]]],[[["flatbufferbuilder",3],["sparsetensorindexcsfargs",3]],[["sparsetensorindexcsf",3],["wipoffset",3,["sparsetensorindexcsf"]]]],[[["flatbufferbuilder",3],["sparsetensorargs",3]],[["wipoffset",3,["sparsetensor"]],["sparsetensor",3]]],[[],["buffer",3]],null,[[]],[[]],[[]],[[]],[[["sparsematrixcompressedaxis",3]],["bool",15]],[[["sparsetensorindex",3]],["bool",15]],[[["sparsetensorindexcoo",3]],["bool",15]],[[["sparsematrixindexcsx",3]],["bool",15]],[[["sparsetensorindexcsf",3]],["bool",15]],[[["sparsetensor",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["wipoffset",3,["sparsetensorindexcoo"]],["sparsetensorindexcoo",3]]],[[],[["wipoffset",3,["sparsematrixindexcsx"]],["sparsematrixindexcsx",3]]],[[],[["sparsetensorindexcsf",3],["wipoffset",3,["sparsetensorindexcsf"]]]],[[],[["sparsetensor",3],["wipoffset",3,["sparsetensor"]]]],[[["sparsetensor",3],["wipoffset",3,["sparsetensor"]],["flatbufferbuilder",3]]],[[["sparsetensor",3],["wipoffset",3,["sparsetensor"]],["flatbufferbuilder",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["sparsetensor",3]],[[],["sparsetensor",3]],[[]],[[]],[[],["buffer",3]],[[],["buffer",3]],null,null,[[]],null,[[],[["vector",3,["i64"]],["option",4,["vector"]]]],null,[[],["int",3]],[[],["int",3]],[[],["int",3]],null,null,null,[[],["buffer",3]],null,[[]],null,[[],["int",3]],[[],["int",3]],null,null,[[["table",3]]],[[["table",3]]],[[["table",3]]],[[["table",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[["sparsematrixcompressedaxis",3]],["bool",15]],[[["sparsetensorindex",3]],["bool",15]],[[["sparsetensorindexcoo",3]],["bool",15]],[[["sparsematrixindexcsx",3]],["bool",15]],[[["sparsetensorindexcsf",3]],["bool",15]],[[["sparsetensor",3]],["bool",15]],[[["flatbufferbuilder",3]],["sparsetensorindexcoobuilder",3]],[[["flatbufferbuilder",3]],["sparsematrixindexcsxbuilder",3]],[[["flatbufferbuilder",3]],["sparsetensorindexcsfbuilder",3]],[[["flatbufferbuilder",3]],["sparsetensorbuilder",3]],[[],["i64",15]],null,[[["sparsematrixcompressedaxis",3]],[["option",4,["ordering"]],["ordering",4]]],[[["sparsetensorindex",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[],[["sparsetensor",3],["invalidflatbuffer",4],["result",4,["sparsetensor","invalidflatbuffer"]]]],[[],["sparsetensor",3]],[[["verifieroptions",3]],[["sparsetensor",3],["invalidflatbuffer",4],["result",4,["sparsetensor","invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[],[["forwardsuoffset",3,["tensordim"]],["vector",3,["forwardsuoffset"]]]],null,[[],[["sparsetensor",3],["invalidflatbuffer",4],["result",4,["sparsetensor","invalidflatbuffer"]]]],[[],["sparsetensor",3]],[[["verifieroptions",3]],[["sparsetensor",3],["invalidflatbuffer",4],["result",4,["sparsetensor","invalidflatbuffer"]]]],[[],["table",3]],null,[[],[["option",4,["sparsematrixindexcsx"]],["sparsematrixindexcsx",3]]],[[],[["option",4,["sparsetensorindexcoo"]],["sparsetensorindexcoo",3]]],[[],[["option",4,["sparsetensorindexcsf"]],["sparsetensorindexcsf",3]]],[[],["sparsetensorindex",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["table",3]],null,[[],[["binary",3],["option",4,["binary"]]]],[[],[["option",4,["bool"]],["bool",3]]],[[],[["date",3],["option",4,["date"]]]],[[],[["decimal",3],["option",4,["decimal"]]]],[[],[["duration",3],["option",4,["duration"]]]],[[],[["fixedsizebinary",3],["option",4,["fixedsizebinary"]]]],[[],[["option",4,["fixedsizelist"]],["fixedsizelist",3]]],[[],[["option",4,["floatingpoint"]],["floatingpoint",3]]],[[],[["int",3],["option",4,["int"]]]],[[],[["option",4,["interval"]],["interval",3]]],[[],[["option",4,["largebinary"]],["largebinary",3]]],[[],[["option",4,["largelist"]],["largelist",3]]],[[],[["largeutf8",3],["option",4,["largeutf8"]]]],[[],[["list",3],["option",4,["list"]]]],[[],[["option",4,["map"]],["map",3]]],[[],[["option",4,["null"]],["null",3]]],[[],[["option",4,["struct_"]],["struct_",3]]],[[],[["option",4,["time"]],["time",3]]],[[],[["timestamp",3],["option",4,["timestamp"]]]],[[],[["option",4,["union"]],["union",3]]],[[],[["utf8",3],["option",4,["utf8"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["type",3]],null,[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["buffer",3]]],[[["wipoffset",3,["str"]],["str",15]]],[[["wipoffset",3,["vector"]],["vector",3,["forwardsuoffset"]]]],[[["i64",15]]],[[["vector",3,["i64"]],["wipoffset",3,["vector"]]]],[[["unionwipoffset",3],["wipoffset",3,["unionwipoffset"]]]],[[["type",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tensordim",3]],[[],["tensor",3]],[[]],[[]],[[["flatbufferbuilder",3],["tensordimargs",3]],[["wipoffset",3,["tensordim"]],["tensordim",3]]],[[["flatbufferbuilder",3],["tensorargs",3]],[["wipoffset",3,["tensor"]],["tensor",3]]],[[],["buffer",3]],null,[[]],[[]],[[["tensordim",3]],["bool",15]],[[["tensor",3]],["bool",15]],[[],[["tensordim",3],["wipoffset",3,["tensordim"]]]],[[],[["wipoffset",3,["tensor"]],["tensor",3]]],[[["tensor",3],["wipoffset",3,["tensor"]],["flatbufferbuilder",3]]],[[["tensor",3],["wipoffset",3,["tensor"]],["flatbufferbuilder",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tensor",3]],[[],["tensor",3]],[[["table",3]]],[[["table",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["str",15],["option",4,["str"]]]],null,[[["tensordim",3]],["bool",15]],[[["tensor",3]],["bool",15]],[[["flatbufferbuilder",3]],["tensordimbuilder",3]],[[["flatbufferbuilder",3]],["tensorbuilder",3]],[[],[["tensor",3],["invalidflatbuffer",4],["result",4,["tensor","invalidflatbuffer"]]]],[[],["tensor",3]],[[["verifieroptions",3]],[["tensor",3],["invalidflatbuffer",4],["result",4,["tensor","invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[["usize",15],["verifier",3]],[["invalidflatbuffer",4],["result",4,["invalidflatbuffer"]]]],[[],[["forwardsuoffset",3,["tensordim"]],["vector",3,["forwardsuoffset"]]]],null,[[],["i64",15]],null,[[],[["tensor",3],["invalidflatbuffer",4],["result",4,["tensor","invalidflatbuffer"]]]],[[],["tensor",3]],[[["verifieroptions",3]],[["tensor",3],["invalidflatbuffer",4],["result",4,["tensor","invalidflatbuffer"]]]],[[],[["vector",3,["i64"]],["option",4,["vector"]]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["table",3]],null,[[],[["binary",3],["option",4,["binary"]]]],[[],[["option",4,["bool"]],["bool",3]]],[[],[["date",3],["option",4,["date"]]]],[[],[["decimal",3],["option",4,["decimal"]]]],[[],[["duration",3],["option",4,["duration"]]]],[[],[["fixedsizebinary",3],["option",4,["fixedsizebinary"]]]],[[],[["option",4,["fixedsizelist"]],["fixedsizelist",3]]],[[],[["option",4,["floatingpoint"]],["floatingpoint",3]]],[[],[["int",3],["option",4,["int"]]]],[[],[["option",4,["interval"]],["interval",3]]],[[],[["option",4,["largebinary"]],["largebinary",3]]],[[],[["option",4,["largelist"]],["largelist",3]]],[[],[["largeutf8",3],["option",4,["largeutf8"]]]],[[],[["list",3],["option",4,["list"]]]],[[],[["option",4,["map"]],["map",3]]],[[],[["option",4,["null"]],["null",3]]],[[],[["option",4,["struct_"]],["struct_",3]]],[[],[["option",4,["time"]],["time",3]]],[[],[["timestamp",3],["option",4,["timestamp"]]]],[[],[["option",4,["union"]],["union",3]]],[[],[["utf8",3],["option",4,["utf8"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["type",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["filemetadata",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["option",4,["vec"]],["vec",3,["usize"]],["filemetadata",3]]],[[["streammetadata",3]]],[[],["option",4]],[[],["option",4]],[[["u64",15],["schema",3],["bool",15],["dictionarybatch",3]],["result",6]],[[],[["result",6,["filemetadata"]],["filemetadata",3]]],[[["recordbatch",3],["schema",3],["u64",15],["option",4],["metadataversion",3],["bool",15],["arc",3,["schema"]]],[["result",6,["recordbatch"]],["recordbatch",3]]],[[],[["result",6,["streammetadata"]],["streammetadata",3]]],[[],["schema",3]],[[],["arc",3]],[[],["arc",3]],[[],["arc",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["recordbatch",3]],null,null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[["schema",3],["metadataversion",3]],[["vec",3,["u8"]],["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["schema",3]],["result",6]],[[["schema",3]],["result",6]],[[["schema",3],["ipcwriteoptions",3]],["result",6]],[[["schema",3],["ipcwriteoptions",3]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[["vec",3],["i64",15],["bool",15],["vec",3],["vec",3],["array",8]]],[[["recordbatch",3]],["result",6]],[[["recordbatch",3]],["result",6]],[[["vec",3],["i64",15],["bool",15],["vec",3],["vec",3],["array",8]],["usize",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dictionarytracker",3],["ipcwriteoptions",3],["recordbatch",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["arc",3],["i64",15]],[["result",6,["bool"]],["bool",15]]],[[]],[[]],[[]],null,[[],["metadataversion",3]],[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["metadataversion",3],["bool",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["ipcwriteoptions",3],["i32",15]],[["usize",15],["result",6,["usize"]]]],[[["ipcwriteoptions",3],["encodeddata",3]],["result",6]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",6,["reader"]],["reader",3]]],[[]],[[],["linedelimited",3]],[[],["jsonarray",3]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["schema",3],["bufreader",3],["usize",15],["vec",3,["string"]],["arc",3,["schema"]],["option",4,["vec"]]]],[[["usize",15],["option",4,["usize"]],["bufreader",3]],[["schema",3],["result",6,["schema"]]]],[[],[["schema",3],["result",6,["schema"]]]],[[["usize",15],["option",4,["usize"]],["bufreader",3]],[["schema",3],["result",6,["schema"]]]],[[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["schema",3],["usize",15],["vec",3,["string"]],["arc",3,["schema"]],["option",4,["vec"]]]],[[]],[[]],[[],[["option",4,["recordbatch"]],["result",6,["option"]]]],[[],["arc",3]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[["string",3],["vec",3,["string"]]]],[[["arc",3,["schema"]],["schema",3]]],[[],["result",6]],[[],[["vec",3,["map"]],["map",3,["string","value"]]]],[[["value",4]],["result",6]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["arrowjsoncolumn",3]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["field",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["recordbatch",3]],["arrowjsonbatch",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["arrowjsonbatch",3],["schema",3],["hashmap",3]],[["result",6,["recordbatch"]],["recordbatch",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arc",3,["fn"]],["u8",15],["option",4,["arc"]],["global",3],["columnchunkmetadata",3],["vec",3,["u8","global"]]],[["pageiterator",3],["parqueterror",4],["result",4,["pageiterator","parqueterror"]]]],[[["arc",3,["fn"]],["u8",15],["fn",8],["global",3],["vec",3,["u8","global"]],["columnchunkmetadata",3]]],[[],[["filemetadata",3],["result",4,["filemetadata","parqueterror"]],["parqueterror",4]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chain",3]],[[],["chain",3]],[[],["parqueterror",4]],[[],["columnchunkmetadata",3]],[[],["filemetadata",3]],[[],["rowgroupmetadata",3]],[[],["datapageheader",4]],[[],["datapage",3]],[[],["physicaltype",4]],[[],["primitiveconvertedtype",4]],[[],["timeunit",4]],[[],["timestamptype",3]],[[],["logicaltype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cloned",3]],[[],["cloned",3]],[[["timeunit",4]],["ordering",4]],[[["timestamptype",3]],["ordering",4]],[[["logicaltype",4]],["ordering",4]],[[["usize",15]],["columnchunkmetadata",3]],[[],["vec",3]],[[["usize",15]],["columnorder",4]],null,[[]],[[],["i64",15]],[[],["i64",15]],[[],["compression",4]],[[],["usize",15]],[[],["usize",15]],null,[[],["i64",15]],[[["compresseddatapage",3],["vec",3]],[["datapage",3],["parqueterror",4],["result",4,["datapage","parqueterror"]]]],[[],["encoding",4]],[[],["columndescriptor",3]],[[],["columndescriptor",3]],[[],[["arc",3],["option",4,["arc"]]]],[[],[["option",4,["i64"]],["i64",15]]],[[],["encoding",4]],[[["physicaltype",4]],["bool",15]],[[["primitiveconvertedtype",4]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["timestamptype",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["i64",15]],[[],["option",4]],[[],["filter",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["filtermap",3]],[[],["filtermapderef",3]],[[],["filtermapderef",3]],[[],["option",4]],[[],["option",4]],[[],["flatmap",3]],[[],["flatmap",3]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",4]],["parqueterror",4]],[[["error",3]],["parqueterror",4]],[[["error",4]],["parqueterror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parqueterror",4]],[[],["fuse",3]],[[],["fuse",3]],[[],["option",4]],[[],["option",4]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["pagefilter",6],["option",4,["pagefilter"]],["u8",15],["columnchunkmetadata",3],["vec",3,["u8"]]],[["pageiterator",3],["result",6,["pageiterator"]]]],[[["pagefilter",6],["option",4,["pagefilter"]],["u8",15],["vec",3,["u8"]],["columnchunkmetadata",3]]],[[],["bool",15]],[[]],[[]],[[]],[[],["datapageheader",4]],[[],[["option",4,["i64"]],["i64",15]]],[[],["inspect",3]],[[],["inspect",3]],[[],["i64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["columnchunk",3]],[[],[["result",4,["filemetadata","parqueterror"]],["parqueterror",4],["filemetadata",3]]],[[],["rowgroup",3]],null,[[],["option",4]],null,[[],["map",3]],[[],["map",3]],[[],["mapderef",3]],[[],["mapderef",3]],[[],["mapref",3]],[[],["mapref",3]],[[],["filemetadata",3]],[[["physicaltype",4]],["bool",15]],[[["primitiveconvertedtype",4]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["timestamptype",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["u8",15],["pageiterator",3],["vec",3,["u8","global"]],["global",3]],["decompressor",3]],[[["u8",15],["compression",4],["fn",8],["global",3],["arc",3,["fn"]],["columndescriptor",3],["vec",3,["u8","global"]],["i64",15]],["pageiterator",3]],[[["vec",3,["keyvalue","global"]],["vec",3,["rowgroupmetadata","global"]],["global",3],["schemadescriptor",3],["option",4,["string"]],["rowgroupmetadata",3],["i32",15],["string",3],["option",4,["vec"]],["vec",3,["columnorder","global"]],["option",4,["vec"]],["i64",15]],["filemetadata",3]],[[["u8",15],["datapageheader",4],["global",3],["vec",3,["u8","global"]],["option",4,["arc"]],["columndescriptor",3],["arc",3,["dictpage"]]],["datapage",3]],[[["timeunit",4],["bool",15]],["timestamptype",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["usize",15]],[[],["i64",15]],null,[[],["i64",15]],[[],["usize",15]],[[],["usize",15]],[[["columnchunkmetadata",3],["datatype",4]],[["result",6,["box"]],["box",3,["array"]]]],[[["columnchunkmetadata",3],["datatype",4],["stream",8]]],[[["timeunit",4]],[["option",4,["ordering"]],["ordering",4]]],[[["timestamptype",3]],[["option",4,["ordering"]],["ordering",4]]],[[["logicaltype",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["physicaltype",4]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[["tinputprotocol",8]],[["result",4,["timeunit","error"]],["timeunit",4],["error",4]]],[[["tinputprotocol",8]],[["timestamptype",3],["result",4,["timestamptype","error"]],["error",4]]],[[["tinputprotocol",8]],[["error",4],["result",4,["logicaltype","error"]],["logicaltype",4]]],[[],[["filemetadata",3],["result",6,["filemetadata"]]]],[[]],[[],["encoding",4]],[[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],["rev",3]],[[],["rev",3]],null,null,[[],["arc",3]],[[],["schemadescriptor",3]],null,[[["arc",3,["fn"]],["fn",8]]],[[]],[[]],[[["usize",15]],["skip",3]],[[["usize",15]],["skip",3]],[[],["skipwhile",3]],[[],["skipwhile",3]],null,[[],[["result",4,["arc","parqueterror"]],["option",4,["result"]]]],[[],[["result",4,["arc","parqueterror"]],["option",4,["result"]]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["usize",15]],["take",3]],[[["usize",15]],["take",3]],[[],["takewhile",3]],[[],["takewhile",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["columndescriptor",3],["columnchunk",3]],[["result",4,["columnchunkmetadata","parqueterror"]],["columnchunkmetadata",3],["parqueterror",4]]],[[["schemadescriptor",3],["rowgroup",3]],[["parqueterror",4],["result",4,["rowgroupmetadata","parqueterror"]],["rowgroupmetadata",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["option",4,["arc"]],["arc",3,["fn"]],["pagefilter",6],["vec",3,["usize"]],["usize",15],["option",4,["pagefilter"]],["option",4,["vec"]],["option",4,["usize"]]],["result",6]],[[],["type",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["i64",15]],null,null,[[["toutputprotocol",8]],[["result",4,["usize","error"]],["usize",15],["error",4]]],[[["toutputprotocol",8]],[["result",4,["usize","error"]],["usize",15],["error",4]]],[[["toutputprotocol",8]],[["result",4,["usize","error"]],["usize",15],["error",4]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["filemetadata",3]],[["schema",3],["result",6,["schema"]]]],[[["parquettype",4]],["bool",15]],null,null,[[["schemadescriptor",3],["option",4]],[["schema",3],["result",6,["schema"]]]],[[["option",4]],[["option",4,["schema"]],["result",6,["option"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["primitivestatistics",3]],[[],["binarystatistics",3]],[[],["utf8statistics",3]],[[],["booleanstatistics",3]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],null,[[["parquetstatistics",8]],[["box",3,["statistics"]],["result",6,["box"]]]],null,null,null,null,[[],["bool",15]],[[["primitivestatistics",3]],["bool",15]],[[["binarystatistics",3]],["bool",15]],[[["utf8statistics",3]],["bool",15]],[[["booleanstatistics",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["parquetbytearraystatistics",3]]],[[]],[[]],[[]],[[["parquetbooleanstatistics",3]]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["primitivestatistics",3]],["bool",15]],[[["binarystatistics",3]],["bool",15]],[[["utf8statistics",3]],["bool",15]],[[["booleanstatistics",3]],["bool",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["parquetbytearraystatistics",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["columndescriptor",3],["writeoptions",3],["encoding",4],["array",8]],[["compressedpage",4],["result",6,["compressedpage"]]]],[[["arc",3,["array"]],["columndescriptor",3],["writeoptions",3],["array",8],["encoding",4]],[["dyniter",3,["result"]],["result",6,["dyniter"]]]],[[],["parquettype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["datatype",4],["encoding",4]],["bool",15]],[[["parquettype",4]],["bool",15]],[[],["columndescriptor",3]],[[],["schemadescriptor",3]],[[],["compression",4]],[[],["encoding",4]],[[],["parquettype",4]],[[],["writeoptions",3]],[[],["version",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["columndescriptor",3]],[[]],[[],["usize",15]],[[],["compression",4]],null,[[],["columndescriptor",3]],[[["columndescriptor",3]],["bool",15]],[[["compression",4]],["bool",15]],[[["encoding",4]],["bool",15]],[[["parquettype",4]],["bool",15]],[[["writeoptions",3]],["bool",15]],[[["version",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4,["repetition"]],["global",3],["option",4,["i32"]],["option",4,["groupconvertedtype"]],["parquettype",4],["groupconvertedtype",4],["string",3],["i32",15],["repetition",4],["vec",3,["parquettype","global"]]],["parquettype",4]],[[["string",3],["physicaltype",4]],["parquettype",4]],[[],["basictypeinfo",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["datapageheader",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["i16",15]],[[],["i16",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["columndescriptor",3]],["bool",15]],[[["parquettype",4]],["bool",15]],[[["writeoptions",3]],["bool",15]],[[],["dyniter",3]],[[["string",3],["i16",15],["vec",3,["string","global"]],["global",3],["parquettype",4]],["columndescriptor",3]],[[["string",3],["global",3],["vec",3,["parquettype","global"]],["parquettype",4]],["schemadescriptor",3]],[[["u8",15],["datapageheader",4],["global",3],["compression",4],["usize",15],["columndescriptor",3],["vec",3,["u8","global"]],["option",4,["arc"]],["arc",3,["dictpage"]]],["compresseddatapage",3]],[[["string",3],["global",3],["vec",3,["parquettype","global"]],["parquettype",4]],["parquettype",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["schemadescriptor",3]],[[["string",3],["schemadescriptor",3],["writeoptions",3],["vec",3,["keyvalue","global"]],["option",4,["vec"]],["option",4,["string"]]],[["u64",15],["parqueterror",4],["result",4,["u64","parqueterror"]]]],[[]],[[],["physicaltype",4]],[[]],[[],[["result",4,["arc","parqueterror"]],["option",4,["result"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["schema",3]],[["result",6,["schemadescriptor"]],["schemadescriptor",3]]],[[["field",3]],[["result",6,["parquettype"]],["parquettype",4]]],[[],[["parqueterror",4],["vec",3,["schemaelement","global"]],["result",4,["vec","parqueterror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["compressioncodec",3]],[["result",4,["compression"]],["compression",4]]],[[["encoding",3]],[["result",4,["encoding"]],["encoding",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["global",3],["option",4,["i32"]],["option",4,["groupconvertedtype"]],["logicaltype",4],["option",4,["logicaltype"]],["string",3],["groupconvertedtype",4],["parquettype",4],["i32",15],["repetition",4],["vec",3,["parquettype","global"]]],[["parqueterror",4],["parquettype",4],["result",4,["parquettype","parqueterror"]]]],[[["str",15]],[["result",4,["schemadescriptor","parqueterror"]],["parqueterror",4],["schemadescriptor",3]]],[[["primitiveconvertedtype",4],["physicaltype",4],["option",4,["i32"]],["logicaltype",4],["option",4,["logicaltype"]],["string",3],["i32",15],["option",4,["primitiveconvertedtype"]],["repetition",4]],[["parqueterror",4],["parquettype",4],["result",4,["parquettype","parqueterror"]]]],[[],[["parqueterror",4],["parquettype",4],["result",4,["parquettype","parqueterror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["schema",3],["writeoptions",3],["encoding",4],["vec",3,["encoding"]]],["result",6]],[[],["parquettype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],null,[[["schema",3],["schemadescriptor",3],["writeoptions",3],["vec",3,["keyvalue"]],["option",4,["vec"]]],[["u64",15],["result",6,["u64"]]]],null,null,null,null,null,null,null,null,null,null,null,[[["schema",3],["schemadescriptor",3],["writeoptions",3],["vec",3,["keyvalue"]],["option",4,["vec"]]]],[[["schema",3],["schemadescriptor",3],["writeoptions",3],["vec",3,["keyvalue"]],["option",4,["vec"]]]],[[]],[[],["string",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["recordbatch",3]],[[]],[[["usize",15]],["arc",3]],[[]],[[]],[[["recordbatch",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["structarray",3]]],[[]],[[]],[[]],[[]],null,[[["recordbatch",3]],["bool",15]],[[["arc",3,["schema"]],["schema",3]]],[[],[["option",4,["recordbatch"]],["result",6,["option"]]]],[[],["usize",15]],[[],["usize",15]],[[],["schema",3]],[[],["arc",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[["schema",3],["arc",3,["array"]],["arc",3,["schema"]],["vec",3,["arc"]]],["result",6]],[[["schema",3],["arc",3,["array"]],["arc",3,["schema"]],["recordbatchoptions",3],["vec",3,["arc"]]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["primitivescalar",3]],[[],["utf8scalar",3]],[[],["binaryscalar",3]],[[],["booleanscalar",3]],[[],["listscalar",3]],[[],["nullscalar",3]],[[],["structscalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[],["datatype",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["nullscalar",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["option",4]]],[[["option",4]]],[[]],[[]],[[["option",4]]],[[["option",4,["bool"]],["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["datatype",4],["option",4]]],[[["asref",8,["str"]],["str",15],["option",4]]],[[["asref",8],["option",4]]],[[["option",4,["bool"]],["bool",15]]],[[["option",4,["arc"]],["datatype",4],["arc",3,["array"]]]],[[]],[[["option",4,["vec"]],["datatype",4],["vec",3,["arc"]]]],[[["usize",15],["array",8]],[["box",3,["scalar"]],["scalar",8]]],[[["datatype",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["str",15]],[[]],[[],["bool",15]],[[],["arc",3]],[[]],null,null,null,null,null,null,[[["i32",15]],["naivedate",3]],[[["i32",15]],["naivedatetime",3]],[[["i64",15]],["naivedate",3]],[[["i64",15]],["naivedatetime",3]],[[["str",15]],[["fixedoffset",3],["result",6,["fixedoffset"]]]],[[["i32",15]],["naivetime",3]],[[["i32",15]],["naivetime",3]],[[["i64",15]],["naivetime",3]],[[["i64",15]],["naivetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["i64",15]],["naivedatetime",3]],[[["timeunit",4]],["f64",15]],[[["utf8array",3],["str",15]],[["primitivearray",3,["i64"]],["i64",15]]],[[["str",15]],[["option",4,["i64"]],["i64",15]]],[[["utf8array",3],["str",15],["string",3]],[["result",6,["primitivearray"]],["primitivearray",3,["i64"]]]],[[["str",15]],[["option",4,["i64"]],["i64",15]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["days_ms",3]],[[],["months_days_ns",3]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],null,[[],["days_ms",3]],[[],["months_days_ns",3]],[[["days_ms",3]],["bool",15]],[[["months_days_ns",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["datatype",4]],["bool",15]],[[["datatype",4]],["bool",15]],[[["datatype",4]],["bool",15]],[[],["i32",15]],[[],["i32",15]],null,[[["days_ms",3]],["bool",15]],[[["months_days_ns",3]],["bool",15]],[[["usize",15]]],[[]],[[["i32",15]]],[[["i32",15],["i64",15]]],[[],["option",4]],[[],["option",4]],[[],["i64",15]],[[]],[[["usize",15]],[["option",4,["indexrange"]],["indexrange",3]]],[[["usize",15]],[["option",4,["indexrange"]],["indexrange",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["f32",15]]],[[["f64",15]]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["f32",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["f32",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["u8",15]]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["u8",15]]],[[["u16",15]]],[[["u8",15]]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["f32",15]],[[],["f64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["tolexical",8]],[["vec",3,["u8"]],["u8",15]]],[[["vec",3],["tolexical",8]]],[[["tolexical",8]],["string",3]]],"p":[[3,"PrimitiveArray"],[8,"Array"],[8,"MutableArray"],[3,"MutableBinaryArray"],[3,"BinaryArray"],[3,"MutableBooleanArray"],[3,"BooleanArray"],[3,"MutableDictionaryArray"],[3,"DictionaryArray"],[3,"MutableFixedSizeBinaryArray"],[3,"FixedSizeBinaryArray"],[3,"MutableFixedSizeListArray"],[3,"FixedSizeListArray"],[3,"MutableListArray"],[3,"ListArray"],[3,"NullArray"],[3,"MutablePrimitiveArray"],[3,"StructArray"],[3,"UnionArray"],[3,"MutableUtf8Array"],[3,"Utf8Array"],[3,"Utf8ValuesIter"],[8,"ToFfi"],[8,"Offset"],[8,"GenericBinaryArray"],[8,"TryExtend"],[8,"FromFfi"],[8,"TryPush"],[8,"IterableListArray"],[3,"GrowableBinary"],[3,"GrowableBoolean"],[3,"GrowableFixedSizeBinary"],[3,"GrowableNull"],[3,"GrowablePrimitive"],[3,"GrowableList"],[3,"GrowableStruct"],[3,"GrowableUtf8"],[8,"Growable"],[3,"GrowableDictionary"],[3,"MutableBitmap"],[3,"Bitmap"],[8,"BitChunk"],[3,"ZipValidity"],[3,"BitChunksExact"],[3,"BitChunks"],[3,"BitmapIter"],[3,"SlicesIterator"],[8,"BitChunkIterExact"],[3,"MutableBuffer"],[3,"Buffer"],[8,"SimdOrd"],[8,"Sum"],[4,"Operator"],[8,"ArrayAdd"],[8,"ArrayCheckedAdd"],[8,"ArraySaturatingAdd"],[8,"ArrayOverflowingAdd"],[8,"ArraySub"],[8,"ArrayCheckedSub"],[8,"ArraySaturatingSub"],[8,"ArrayOverflowingSub"],[8,"ArrayMul"],[8,"ArrayCheckedMul"],[8,"ArraySaturatingMul"],[8,"ArrayOverflowingMul"],[8,"ArrayDiv"],[8,"ArrayCheckedDiv"],[8,"ArrayRem"],[8,"ArrayCheckedRem"],[4,"Operator"],[8,"Simd8"],[8,"Simd8Lanes"],[3,"MergeSortSlices"],[3,"SortColumn"],[3,"SortOptions"],[4,"PhysicalType"],[4,"DataType"],[4,"IntervalUnit"],[4,"PrimitiveType"],[4,"DictionaryIndexType"],[4,"TimeUnit"],[3,"Field"],[3,"Schema"],[13,"Timestamp"],[13,"Time32"],[13,"Time64"],[13,"Duration"],[13,"Interval"],[13,"FixedSizeBinary"],[13,"List"],[13,"FixedSizeList"],[13,"LargeList"],[13,"Struct"],[13,"Union"],[13,"Dictionary"],[13,"Decimal"],[13,"Extension"],[13,"Primitive"],[13,"Dictionary"],[4,"ArrowError"],[13,"NotYetImplemented"],[13,"External"],[13,"Schema"],[13,"Io"],[13,"InvalidArgumentError"],[13,"Ffi"],[13,"Ipc"],[13,"ExternalFormat"],[13,"ArithmeticError"],[13,"Other"],[3,"Ffi_ArrowArray"],[3,"Ffi_ArrowSchema"],[3,"CSVError"],[3,"ReaderBuilder"],[3,"Reader"],[3,"ByteRecord"],[3,"SerializeOptions"],[3,"WriterBuilder"],[3,"Writer"],[3,"Block"],[3,"Footer"],[3,"FooterBuilder"],[4,"FooterOffset"],[3,"FooterArgs"],[3,"CompressionType"],[3,"BodyCompressionMethod"],[3,"MessageHeader"],[3,"FieldNode"],[3,"Message"],[3,"RecordBatch"],[3,"BodyCompression"],[3,"DictionaryBatch"],[3,"MessageBuilder"],[3,"RecordBatchBuilder"],[3,"BodyCompressionBuilder"],[3,"DictionaryBatchBuilder"],[3,"MessageArgs"],[3,"MessageHeaderUnionTableOffset"],[4,"BodyCompressionOffset"],[3,"BodyCompressionArgs"],[4,"RecordBatchOffset"],[3,"RecordBatchArgs"],[4,"DictionaryBatchOffset"],[3,"DictionaryBatchArgs"],[4,"MessageOffset"],[3,"MetadataVersion"],[3,"Feature"],[3,"UnionMode"],[3,"Precision"],[3,"DateUnit"],[3,"TimeUnit"],[3,"IntervalUnit"],[3,"Type"],[3,"DictionaryKind"],[3,"Endianness"],[3,"Buffer"],[3,"Int"],[3,"Decimal"],[3,"Time"],[3,"FixedSizeBinary"],[3,"Field"],[3,"Schema"],[3,"DictionaryEncoding"],[3,"KeyValue"],[3,"Map"],[3,"FixedSizeList"],[3,"Union"],[3,"FloatingPoint"],[3,"Timestamp"],[3,"Date"],[3,"Interval"],[3,"Duration"],[3,"Null"],[3,"Struct_"],[3,"List"],[3,"LargeList"],[3,"Utf8"],[3,"Binary"],[3,"LargeUtf8"],[3,"LargeBinary"],[3,"Bool"],[3,"IntBuilder"],[3,"DecimalBuilder"],[3,"TimeBuilder"],[3,"FixedSizeBinaryBuilder"],[3,"FieldBuilder"],[3,"SchemaBuilder"],[3,"DictionaryEncodingBuilder"],[3,"KeyValueBuilder"],[3,"MapBuilder"],[3,"FixedSizeListBuilder"],[3,"UnionBuilder"],[3,"FloatingPointBuilder"],[3,"TimestampBuilder"],[3,"DateBuilder"],[3,"IntervalBuilder"],[3,"DurationBuilder"],[3,"IntArgs"],[3,"DecimalArgs"],[3,"TimeArgs"],[3,"TypeUnionTableOffset"],[4,"NullOffset"],[3,"NullArgs"],[3,"NullBuilder"],[4,"Struct_Offset"],[3,"Struct_Args"],[3,"Struct_Builder"],[4,"ListOffset"],[3,"ListArgs"],[3,"ListBuilder"],[4,"LargeListOffset"],[3,"LargeListArgs"],[3,"LargeListBuilder"],[4,"FixedSizeListOffset"],[3,"FixedSizeListArgs"],[4,"MapOffset"],[3,"MapArgs"],[4,"UnionOffset"],[3,"UnionArgs"],[4,"IntOffset"],[4,"FloatingPointOffset"],[3,"FloatingPointArgs"],[4,"Utf8Offset"],[3,"Utf8Args"],[3,"Utf8Builder"],[4,"BinaryOffset"],[3,"BinaryArgs"],[3,"BinaryBuilder"],[4,"LargeUtf8Offset"],[3,"LargeUtf8Args"],[3,"LargeUtf8Builder"],[4,"LargeBinaryOffset"],[3,"LargeBinaryArgs"],[3,"LargeBinaryBuilder"],[4,"FixedSizeBinaryOffset"],[3,"FixedSizeBinaryArgs"],[4,"BoolOffset"],[3,"BoolArgs"],[3,"BoolBuilder"],[4,"DecimalOffset"],[4,"DateOffset"],[3,"DateArgs"],[4,"TimeOffset"],[4,"TimestampOffset"],[3,"TimestampArgs"],[4,"IntervalOffset"],[3,"IntervalArgs"],[4,"DurationOffset"],[3,"DurationArgs"],[4,"KeyValueOffset"],[3,"KeyValueArgs"],[4,"DictionaryEncodingOffset"],[3,"DictionaryEncodingArgs"],[4,"FieldOffset"],[3,"FieldArgs"],[4,"SchemaOffset"],[3,"SchemaArgs"],[3,"SparseMatrixCompressedAxis"],[3,"SparseTensorIndex"],[3,"SparseTensorIndexCSF"],[3,"SparseMatrixIndexCSX"],[3,"SparseTensor"],[3,"SparseTensorIndexCOO"],[3,"SparseTensorIndexCSFBuilder"],[3,"SparseMatrixIndexCSXBuilder"],[3,"SparseTensorBuilder"],[3,"SparseTensorIndexCOOBuilder"],[3,"SparseTensorIndexCSFArgs"],[3,"SparseTensorIndexUnionTableOffset"],[4,"SparseTensorIndexCOOOffset"],[3,"SparseTensorIndexCOOArgs"],[4,"SparseMatrixIndexCSXOffset"],[3,"SparseMatrixIndexCSXArgs"],[4,"SparseTensorIndexCSFOffset"],[4,"SparseTensorOffset"],[3,"SparseTensorArgs"],[3,"Tensor"],[3,"TensorDim"],[3,"TensorBuilder"],[3,"TensorDimBuilder"],[4,"TensorDimOffset"],[3,"TensorDimArgs"],[4,"TensorOffset"],[3,"TensorArgs"],[4,"StreamState"],[3,"FileReader"],[3,"StreamReader"],[3,"FileMetadata"],[3,"StreamMetadata"],[13,"Some"],[3,"StreamWriter"],[3,"FileWriter"],[3,"EncodedData"],[3,"DictionaryTracker"],[3,"IpcWriteOptions"],[3,"Reader"],[3,"ReaderBuilder"],[3,"LineDelimited"],[3,"JsonArray"],[3,"Writer"],[8,"JsonFormat"],[3,"ArrowJson"],[3,"DictionaryIndexType"],[3,"ArrowJsonSchema"],[3,"ArrowJsonField"],[3,"ArrowJsonFieldDictionary"],[3,"ArrowJsonBatch"],[3,"ArrowJsonDictionaryBatch"],[3,"ArrowJsonColumn"],[4,"LogicalType"],[4,"PhysicalType"],[4,"PrimitiveConvertedType"],[4,"ParquetError"],[4,"ParquetType"],[8,"StreamingIterator"],[4,"ParquetTimeUnit"],[4,"DataPageHeader"],[3,"Decompressor"],[3,"RecordReader"],[3,"PageIterator"],[3,"ColumnChunkMetaData"],[3,"FileMetaData"],[3,"RowGroupMetaData"],[3,"DataPage"],[3,"TimestampType"],[13,"V1"],[13,"V2"],[13,"STRING"],[13,"MAP"],[13,"LIST"],[13,"ENUM"],[13,"DECIMAL"],[13,"DATE"],[13,"TIME"],[13,"TIMESTAMP"],[13,"INTEGER"],[13,"UNKNOWN"],[13,"JSON"],[13,"BSON"],[13,"UUID"],[13,"General"],[13,"OutOfSpec"],[13,"External"],[13,"MILLIS"],[13,"MICROS"],[13,"NANOS"],[13,"PrimitiveType"],[13,"GroupType"],[13,"FixedLenByteArray"],[13,"Decimal"],[3,"PrimitiveStatistics"],[3,"BinaryStatistics"],[3,"Utf8Statistics"],[3,"BooleanStatistics"],[8,"Statistics"],[4,"Encoding"],[4,"Compression"],[4,"CompressedPage"],[4,"Version"],[3,"ColumnDescriptor"],[3,"RowGroupIterator"],[3,"DynIter"],[3,"SchemaDescriptor"],[3,"CompressedDataPage"],[3,"WriteOptions"],[13,"Data"],[13,"Dict"],[3,"RecordBatch"],[3,"RecordBatchOptions"],[8,"RecordBatchReader"],[8,"Scalar"],[3,"PrimitiveScalar"],[3,"Utf8Scalar"],[3,"BinaryScalar"],[3,"BooleanScalar"],[3,"ListScalar"],[3,"NullScalar"],[3,"StructScalar"],[8,"NativeType"],[8,"NaturalDataType"],[3,"BitChunkIter"],[3,"IndexRange"],[3,"days_ms"],[3,"months_days_ns"],[8,"Index"],[8,"Relation"],[3,"u8x64"],[3,"u16x32"],[3,"u32x16"],[3,"u64x8"],[3,"i8x64"],[3,"i16x32"],[3,"i32x16"],[3,"i64x8"],[3,"f32x16"],[3,"f64x8"],[8,"NativeSimd"],[8,"Simd"],[8,"FromMaskChunk"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};